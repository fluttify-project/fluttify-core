me.yohom.fluttify.ConstantsKt -> me.yohom.fluttify.ConstantsKt:
    java.util.Map PERMISSION_IOS -> PERMISSION_IOS
    java.util.Map PERMISSION_ANDROID -> PERMISSION_ANDROID
    java.util.Map SYSTEM_TYPEDEF -> SYSTEM_TYPEDEF
    java.util.List SYSTEM_TYPE -> SYSTEM_TYPE
    java.util.Map getPERMISSION_IOS() -> getPERMISSION_IOS
    java.util.Map getPERMISSION_ANDROID() -> getPERMISSION_ANDROID
    java.util.List getEXCLUDE_METHODS() -> getEXCLUDE_METHODS
    java.util.List getEXCLUDE_TYPES() -> getEXCLUDE_TYPES
    java.util.Map getSYSTEM_TYPEDEF() -> getSYSTEM_TYPEDEF
    java.util.List getSYSTEM_TYPE() -> getSYSTEM_TYPE
    void <clinit>() -> <clinit>
me.yohom.fluttify.Exclude -> me.yohom.fluttify.Exclude:
    java.util.List classes -> classes
    java.util.List methods -> methods
    java.util.List getClasses() -> getClasses
    void setClasses(java.util.List) -> setClasses
    java.util.List getMethods() -> getMethods
    void setMethods(java.util.List) -> setMethods
    java.lang.String toString() -> toString
    void <init>() -> <init>
me.yohom.fluttify.FluttifyCorePlugin -> me.yohom.fluttify.FluttifyCorePlugin:
    void apply(org.gradle.api.Project) -> apply
    void apply(java.lang.Object) -> apply
    void <init>() -> <init>
me.yohom.fluttify.FluttifyCorePluginKt -> me.yohom.fluttify.FluttifyCorePluginKt:
    me.yohom.fluttify.FluttifyExtension ext -> ext
    me.yohom.fluttify.FluttifyExtension getExt() -> getExt
    void setExt(me.yohom.fluttify.FluttifyExtension) -> setExt
me.yohom.fluttify.FluttifyExtension -> me.yohom.fluttify.FluttifyExtension:
    java.lang.String projectName -> projectName
    java.lang.String org -> org
    java.lang.String desc -> desc
    java.lang.String author -> author
    java.lang.String email -> email
    java.lang.String homepage -> homepage
    java.lang.String foundationVersion -> foundationVersion
    java.util.Map pluginDependencies -> pluginDependencies
    me.yohom.fluttify.PlatformSpec android -> android
    me.yohom.fluttify.PlatformSpec ios -> ios
    java.lang.String getProjectName() -> getProjectName
    void setProjectName(java.lang.String) -> setProjectName
    java.lang.String getOrg() -> getOrg
    void setOrg(java.lang.String) -> setOrg
    java.lang.String getDesc() -> getDesc
    void setDesc(java.lang.String) -> setDesc
    java.lang.String getAuthor() -> getAuthor
    void setAuthor(java.lang.String) -> setAuthor
    java.lang.String getEmail() -> getEmail
    void setEmail(java.lang.String) -> setEmail
    java.lang.String getHomepage() -> getHomepage
    void setHomepage(java.lang.String) -> setHomepage
    java.lang.String getFoundationVersion() -> getFoundationVersion
    void setFoundationVersion(java.lang.String) -> setFoundationVersion
    java.util.Map getPluginDependencies() -> getPluginDependencies
    void setPluginDependencies(java.util.Map) -> setPluginDependencies
    me.yohom.fluttify.PlatformSpec getAndroid() -> getAndroid
    void setAndroid(me.yohom.fluttify.PlatformSpec) -> setAndroid
    void android(org.gradle.api.Action) -> android
    me.yohom.fluttify.PlatformSpec getIos() -> getIos
    void setIos(me.yohom.fluttify.PlatformSpec) -> setIos
    void ios(org.gradle.api.Action) -> ios
    java.util.List getIOSTransitiveFramework() -> getIOSTransitiveFramework
    java.util.List getIOSTransitiveTbd() -> getIOSTransitiveTbd
    java.util.List getIOSResource() -> getIOSResource
    java.lang.String getMethodChannelName() -> getMethodChannelName
    java.lang.String toString() -> toString
    void <init>(org.gradle.api.model.ObjectFactory) -> <init>
me.yohom.fluttify.Local -> me.yohom.fluttify.Local:
    java.util.List transitiveDependencies -> transitiveDependencies
    java.util.List getTransitiveDependencies() -> getTransitiveDependencies
    void setTransitiveDependencies(java.util.List) -> setTransitiveDependencies
    java.lang.String toString() -> toString
    void <init>() -> <init>
me.yohom.fluttify.PlatformSpec -> me.yohom.fluttify.PlatformSpec:
    java.lang.String language -> language
    java.lang.String libDir -> libDir
    me.yohom.fluttify.Remote remote -> remote
    me.yohom.fluttify.Local local -> local
    me.yohom.fluttify.Exclude exclude -> exclude
    java.lang.String getLanguage() -> getLanguage
    void setLanguage(java.lang.String) -> setLanguage
    java.lang.String getLibDir() -> getLibDir
    void setLibDir(java.lang.String) -> setLibDir
    me.yohom.fluttify.Remote getRemote() -> getRemote
    void remote(org.gradle.api.Action) -> remote
    me.yohom.fluttify.Local getLocal() -> getLocal
    void local(org.gradle.api.Action) -> local
    me.yohom.fluttify.Exclude getExclude() -> getExclude
    void exclude(org.gradle.api.Action) -> exclude
    java.lang.String toString() -> toString
    void <init>(org.gradle.api.model.ObjectFactory) -> <init>
me.yohom.fluttify.Remote -> me.yohom.fluttify.Remote:
    java.lang.String org -> org
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String getOrg() -> getOrg
    void setOrg(java.lang.String) -> setOrg
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    java.lang.String getAndroidCoordinate() -> getAndroidCoordinate
    boolean getAndroidConfigured() -> getAndroidConfigured
    java.lang.String getIosCoordinate() -> getIosCoordinate
    boolean getIosConfigured() -> getIosConfigured
    java.lang.String toString() -> toString
    void <init>() -> <init>
me.yohom.fluttify.extensions.AnyXKt -> me.yohom.fluttify.extensions.AnyXKt:
    java.lang.String toJson(java.lang.Object) -> toJson
    boolean must(java.lang.Object,java.lang.String,kotlin.jvm.functions.Function1) -> must
    boolean must$default(java.lang.Object,java.lang.String,kotlin.jvm.functions.Function1,int,java.lang.Object) -> must$default
    boolean mustNot(java.lang.Object,java.lang.String,kotlin.jvm.functions.Function1) -> mustNot
    boolean mustNot$default(java.lang.Object,java.lang.String,kotlin.jvm.functions.Function1,int,java.lang.Object) -> mustNot$default
    java.net.URL getResource(java.lang.String) -> getResource
me.yohom.fluttify.extensions.AnyXKt$must$1 -> me.yohom.fluttify.extensions.a:
    me.yohom.fluttify.extensions.AnyXKt$must$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.AnyXKt$must$2 -> me.yohom.fluttify.extensions.b:
    me.yohom.fluttify.extensions.AnyXKt$must$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.AnyXKt$mustNot$1 -> me.yohom.fluttify.extensions.c:
    me.yohom.fluttify.extensions.AnyXKt$mustNot$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.AnyXKt$mustNot$2 -> me.yohom.fluttify.extensions.d:
    me.yohom.fluttify.extensions.AnyXKt$mustNot$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ClassContextXKt -> me.yohom.fluttify.extensions.ClassContextXKt:
    boolean isSubclass(parser.java.JavaParser$ClassDeclarationContext) -> isSubclass
    java.util.List genericTypes(parser.java.JavaParser$ClassDeclarationContext) -> genericTypes
    boolean isAbstract(parser.java.JavaParser$ClassDeclarationContext) -> isAbstract
    boolean isPublic(parser.java.JavaParser$ClassDeclarationContext) -> isPublic
    boolean isPublic(parser.java.JavaParser$EnumDeclarationContext) -> isPublic
    java.lang.String fullName(parser.java.JavaParser$ClassDeclarationContext) -> fullName
    java.lang.String fullName(parser.java.JavaParser$EnumDeclarationContext) -> fullName
    java.util.List genericTypes(parser.java.JavaParser$InterfaceDeclarationContext) -> genericTypes
    java.util.List superInterfaces(parser.java.JavaParser$InterfaceDeclarationContext) -> superInterfaces
    boolean isPublic(parser.java.JavaParser$InterfaceDeclarationContext) -> isPublic
    boolean isSubclass(parser.objc.ObjectiveCParser$ClassInterfaceContext) -> isSubclass
    java.lang.String fullName(parser.objc.ObjectiveCParser$ClassInterfaceContext) -> fullName
me.yohom.fluttify.extensions.ConstructorContextXKt -> me.yohom.fluttify.extensions.ConstructorContextXKt:
    boolean isPublic(parser.java.JavaParser$ConstructorDeclarationContext) -> isPublic
    boolean hasDependency(parser.java.JavaParser$ConstructorDeclarationContext) -> hasDependency
    boolean isStaticType(parser.java.JavaParser$ConstructorDeclarationContext) -> isStaticType
    java.util.List formalParams(parser.java.JavaParser$ConstructorDeclarationContext) -> formalParams
me.yohom.fluttify.extensions.FieldContextXKt -> me.yohom.fluttify.extensions.FieldContextXKt:
    boolean isStatic(parser.java.JavaParser$FieldDeclarationContext) -> isStatic
    boolean isDeprecated(parser.java.JavaParser$FieldDeclarationContext) -> isDeprecated
    boolean isPrivate(parser.java.JavaParser$FieldDeclarationContext) -> isPrivate
    boolean isPublic(parser.java.JavaParser$FieldDeclarationContext) -> isPublic
    java.lang.String getValue(parser.java.JavaParser$FieldDeclarationContext) -> getValue
    java.lang.String type(parser.java.JavaParser$FieldDeclarationContext) -> type
    java.lang.String name(parser.java.JavaParser$FieldDeclarationContext) -> name
    boolean isFinal(parser.java.JavaParser$FieldDeclarationContext) -> isFinal
    java.lang.String value(parser.java.JavaParser$FieldDeclarationContext) -> value
    boolean jsonable(parser.java.JavaParser$FieldDeclarationContext) -> jsonable
    boolean isFinal(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> isFinal
    java.lang.String getValue(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> getValue
    java.lang.String type(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> type
    java.lang.String name(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> name
    boolean isListType(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> isListType
    boolean isStatic(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> isStatic
    java.lang.String getterName(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> getterName
    java.lang.String setterName(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> setterName
    boolean jsonable(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> jsonable
me.yohom.fluttify.extensions.FileXKt -> me.yohom.fluttify.extensions.FileXKt:
    me.yohom.fluttify.model.Type javaType(java.io.File) -> javaType
    java.util.List objcType(java.io.File) -> objcType
    void iterate(java.io.File,java.lang.String,boolean,org.apache.commons.io.filefilter.IOFileFilter,kotlin.jvm.functions.Function1) -> iterate
    void iterate$default(java.io.File,java.lang.String,boolean,org.apache.commons.io.filefilter.IOFileFilter,kotlin.jvm.functions.Function1,int,java.lang.Object) -> iterate$default
    void downloadFrom(java.io.File,java.lang.String) -> downloadFrom
me.yohom.fluttify.extensions.FileXKt$downloadFrom$httpClient$1 -> me.yohom.fluttify.extensions.e:
    me.yohom.fluttify.extensions.FileXKt$downloadFrom$httpClient$1 INSTANCE -> a
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.FileXKt$downloadFrom$manager$1 -> me.yohom.fluttify.extensions.FileXKt$downloadFrom$manager$1:
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void <init>() -> <init>
me.yohom.fluttify.extensions.FileXKt$javaType$1 -> me.yohom.fluttify.extensions.FileXKt$javaType$1:
    java.io.File $this_javaType -> $this_javaType
    kotlin.jvm.internal.Ref$ObjectRef $packageName -> $packageName
    kotlin.jvm.internal.Ref$BooleanRef $isPublic -> $isPublic
    kotlin.jvm.internal.Ref$ObjectRef $simpleName -> $simpleName
    kotlin.jvm.internal.Ref$BooleanRef $isInnerType -> $isInnerType
    kotlin.jvm.internal.Ref$ObjectRef $typeType -> $typeType
    kotlin.jvm.internal.Ref$ObjectRef $genericTypes -> $genericTypes
    kotlin.jvm.internal.Ref$BooleanRef $isAbstract -> $isAbstract
    kotlin.jvm.internal.Ref$ObjectRef $superClass -> $superClass
    java.util.List $interfaces -> $interfaces
    kotlin.jvm.internal.Ref$BooleanRef $isStaticType -> $isStaticType
    java.util.List $constructors -> $constructors
    java.util.List $methods -> $methods
    java.util.List $fields -> $fields
    java.util.List $enumConstants -> $enumConstants
    void enterPackageDeclaration(parser.java.JavaParser$PackageDeclarationContext) -> enterPackageDeclaration
    void enterClassDeclaration(parser.java.JavaParser$ClassDeclarationContext) -> enterClassDeclaration
    void enterInterfaceDeclaration(parser.java.JavaParser$InterfaceDeclarationContext) -> enterInterfaceDeclaration
    void enterEnumDeclaration(parser.java.JavaParser$EnumDeclarationContext) -> enterEnumDeclaration
    void enterConstructorDeclaration(parser.java.JavaParser$ConstructorDeclarationContext) -> enterConstructorDeclaration
    void enterMethodDeclaration(parser.java.JavaParser$MethodDeclarationContext) -> enterMethodDeclaration
    void enterInterfaceMethodDeclaration(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> enterInterfaceMethodDeclaration
    void enterFieldDeclaration(parser.java.JavaParser$FieldDeclarationContext) -> enterFieldDeclaration
    void enterEnumConstant(parser.java.JavaParser$EnumConstantContext) -> enterEnumConstant
    void <init>(java.io.File,kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$BooleanRef,kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$BooleanRef,kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$BooleanRef,kotlin.jvm.internal.Ref$ObjectRef,java.util.List,kotlin.jvm.internal.Ref$BooleanRef,java.util.List,java.util.List,java.util.List,java.util.List) -> <init>
me.yohom.fluttify.extensions.FileXKt$objcType$1 -> me.yohom.fluttify.extensions.FileXKt$objcType$1:
    kotlin.jvm.internal.Ref$ObjectRef $typeType -> $typeType
    kotlin.jvm.internal.Ref$ObjectRef $name -> $name
    kotlin.jvm.internal.Ref$ObjectRef $superClass -> $superClass
    kotlin.jvm.internal.Ref$ObjectRef $interfaces -> $interfaces
    kotlin.jvm.internal.Ref$BooleanRef $isAbstract -> $isAbstract
    kotlin.jvm.internal.Ref$ObjectRef $methods -> $methods
    java.util.List $result -> $result
    kotlin.jvm.internal.Ref$ObjectRef $fields -> $fields
    kotlin.jvm.internal.Ref$ObjectRef $enumConstants -> $enumConstants
    void enterClassInterface(parser.objc.ObjectiveCParser$ClassInterfaceContext) -> enterClassInterface
    void exitClassInterface(parser.objc.ObjectiveCParser$ClassInterfaceContext) -> exitClassInterface
    void enterProtocolDeclaration(parser.objc.ObjectiveCParser$ProtocolDeclarationContext) -> enterProtocolDeclaration
    void exitProtocolDeclaration(parser.objc.ObjectiveCParser$ProtocolDeclarationContext) -> exitProtocolDeclaration
    void enterEnumDeclaration(parser.objc.ObjectiveCParser$EnumDeclarationContext) -> enterEnumDeclaration
    void enterEnumeratorIdentifier(parser.objc.ObjectiveCParser$EnumeratorIdentifierContext) -> enterEnumeratorIdentifier
    void exitEnumDeclaration(parser.objc.ObjectiveCParser$EnumDeclarationContext) -> exitEnumDeclaration
    void enterCategoryInterface(parser.objc.ObjectiveCParser$CategoryInterfaceContext) -> enterCategoryInterface
    void exitCategoryInterface(parser.objc.ObjectiveCParser$CategoryInterfaceContext) -> exitCategoryInterface
    void enterStructOrUnionSpecifier(parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext) -> enterStructOrUnionSpecifier
    void exitStructOrUnionSpecifier(parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext) -> exitStructOrUnionSpecifier
    void enterTypedefDeclaration(parser.objc.ObjectiveCParser$TypedefDeclarationContext) -> enterTypedefDeclaration
    void enterFieldDeclaration(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> enterFieldDeclaration
    void enterMethodDeclaration(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> enterMethodDeclaration
    void enterFunctionSignature(parser.objc.ObjectiveCParser$FunctionSignatureContext) -> enterFunctionSignature
    void <init>(kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$BooleanRef,kotlin.jvm.internal.Ref$ObjectRef,java.util.List,kotlin.jvm.internal.Ref$ObjectRef,kotlin.jvm.internal.Ref$ObjectRef) -> <init>
me.yohom.fluttify.extensions.ListXKt -> me.yohom.fluttify.extensions.ListXKt:
    java.lang.String toDartMap(java.util.List,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1) -> toDartMap
    java.lang.String toDartMap$default(java.util.List,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1,int,java.lang.Object) -> toDartMap$default
    java.util.List filterType(java.util.List) -> filterType
    java.util.List filterConstants(java.util.List) -> filterConstants
    java.util.List filterMethod(java.util.List) -> filterMethod
    java.util.List filterGetters(java.util.List) -> filterGetters
    java.util.List filterSetters(java.util.List) -> filterSetters
    java.util.List filterConstructable(java.util.List) -> filterConstructable
    java.util.List filterConstructor(java.util.List) -> filterConstructor
    java.util.List filterFormalParams(java.util.List) -> filterFormalParams
    java.lang.String joinToStringX(java.util.List,java.lang.String,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1) -> joinToStringX
    java.lang.String joinToStringX$default(java.util.List,java.lang.String,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1,int,java.lang.Object) -> joinToStringX$default
me.yohom.fluttify.extensions.ListXKt$filterConstants$1 -> me.yohom.fluttify.extensions.f:
    me.yohom.fluttify.extensions.ListXKt$filterConstants$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterConstants$2 -> me.yohom.fluttify.extensions.g:
    me.yohom.fluttify.extensions.ListXKt$filterConstants$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterConstructable$1 -> me.yohom.fluttify.extensions.h:
    me.yohom.fluttify.extensions.ListXKt$filterConstructable$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterConstructor$1 -> me.yohom.fluttify.extensions.i:
    me.yohom.fluttify.extensions.ListXKt$filterConstructor$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Constructor) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterFormalParams$1 -> me.yohom.fluttify.extensions.j:
    me.yohom.fluttify.extensions.ListXKt$filterFormalParams$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterFormalParams$2 -> me.yohom.fluttify.extensions.k:
    me.yohom.fluttify.extensions.ListXKt$filterFormalParams$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterGetters$1 -> me.yohom.fluttify.extensions.l:
    me.yohom.fluttify.extensions.ListXKt$filterGetters$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterGetters$2 -> me.yohom.fluttify.extensions.m:
    me.yohom.fluttify.extensions.ListXKt$filterGetters$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterMethod$1 -> me.yohom.fluttify.extensions.n:
    me.yohom.fluttify.extensions.ListXKt$filterMethod$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterMethod$2 -> me.yohom.fluttify.extensions.o:
    me.yohom.fluttify.extensions.ListXKt$filterMethod$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterMethod$3 -> me.yohom.fluttify.extensions.p:
    me.yohom.fluttify.extensions.ListXKt$filterMethod$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterSetters$1 -> me.yohom.fluttify.extensions.q:
    me.yohom.fluttify.extensions.ListXKt$filterSetters$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterSetters$2 -> me.yohom.fluttify.extensions.r:
    me.yohom.fluttify.extensions.ListXKt$filterSetters$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterType$1 -> me.yohom.fluttify.extensions.s:
    me.yohom.fluttify.extensions.ListXKt$filterType$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$filterType$2 -> me.yohom.fluttify.extensions.t:
    me.yohom.fluttify.extensions.ListXKt$filterType$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$toDartMap$1 -> me.yohom.fluttify.extensions.u:
    me.yohom.fluttify.extensions.ListXKt$toDartMap$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.ListXKt$toDartMap$2 -> me.yohom.fluttify.extensions.v:
    kotlin.jvm.functions.Function1 $valueBuilder -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>(kotlin.jvm.functions.Function1) -> <init>
me.yohom.fluttify.extensions.MethodContextXKt -> me.yohom.fluttify.extensions.MethodContextXKt:
    java.lang.String returnType(parser.java.JavaParser$MethodDeclarationContext) -> returnType
    java.lang.String returnType(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> returnType
    java.lang.String name(parser.java.JavaParser$MethodDeclarationContext) -> name
    boolean isAbstract(parser.java.JavaParser$MethodDeclarationContext) -> isAbstract
    java.lang.String name(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> name
    boolean isPrivate(parser.java.JavaParser$MethodDeclarationContext) -> isPrivate
    boolean isStatic(parser.java.JavaParser$MethodDeclarationContext) -> isStatic
    boolean isStatic(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> isStatic
    boolean isObfuscated(parser.java.JavaParser$MethodDeclarationContext) -> isObfuscated
    boolean isPublic(parser.java.JavaParser$MethodDeclarationContext) -> isPublic
    boolean isInstanceMethod(parser.java.JavaParser$MethodDeclarationContext) -> isInstanceMethod
    boolean isDeprecated(parser.java.JavaParser$MethodDeclarationContext) -> isDeprecated
    boolean isDeprecated(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> isDeprecated
    java.util.List formalParams(parser.java.JavaParser$MethodDeclarationContext) -> formalParams
    java.util.List formalParams(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> formalParams
    java.lang.String returnType(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> returnType
    boolean isStatic(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> isStatic
    java.lang.String name(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> name
    java.util.List formalParams(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> formalParams
    boolean isDeprecated(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> isDeprecated
    boolean isUnavailable(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> isUnavailable
    java.lang.String returnType(parser.objc.ObjectiveCParser$BlockTypeContext) -> returnType
    java.lang.String parameters(parser.objc.ObjectiveCParser$BlockTypeContext) -> parameters
me.yohom.fluttify.extensions.MethodContextXKt$parameters$1 -> me.yohom.fluttify.extensions.w:
    me.yohom.fluttify.extensions.MethodContextXKt$parameters$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.extensions.RuleContextXKt -> me.yohom.fluttify.extensions.RuleContextXKt:
    boolean isChildOf(org.antlr.v4.runtime.RuleContext,kotlin.reflect.KClass) -> isChildOf
    org.antlr.v4.runtime.RuleContext ancestorOf(org.antlr.v4.runtime.RuleContext,kotlin.reflect.KClass) -> ancestorOf
    java.lang.String typeFullName(org.antlr.v4.runtime.RuleContext,java.lang.String) -> typeFullName
me.yohom.fluttify.extensions.SourceXKt -> me.yohom.fluttify.extensions.SourceXKt:
    void walkTree(java.lang.String,parser.java.JavaParserBaseListener) -> walkTree
    parser.java.JavaParser parser(java.lang.String) -> parser
    void walkTree(java.lang.String,parser.objc.ObjectiveCParserBaseListener) -> walkTree
me.yohom.fluttify.extensions.StringXKt -> me.yohom.fluttify.extensions.StringXKt:
    java.lang.Object fromJson(java.lang.String) -> fromJson
    boolean jsonable(java.lang.String) -> jsonable
    boolean isCollection(java.lang.String) -> isCollection
    boolean isArrayList(java.lang.String) -> isArrayList
    boolean isList(java.lang.String) -> isList
    boolean isNumber(java.lang.String) -> isNumber
    boolean isString(java.lang.String) -> isString
    boolean isLinkedList(java.lang.String) -> isLinkedList
    boolean isVoid(java.lang.String) -> isVoid
    java.lang.String enList(java.lang.String) -> enList
    java.lang.String enCollection(java.lang.String) -> enCollection
    java.lang.String enArrayList(java.lang.String) -> enArrayList
    java.lang.String enArray(java.lang.String) -> enArray
    boolean isArray(java.lang.String) -> isArray
    boolean isMap(java.lang.String) -> isMap
    boolean isStringArray(java.lang.String) -> isStringArray
    java.lang.String boxedType(java.lang.String) -> boxedType
    java.lang.String dearray(java.lang.String) -> dearray
    java.lang.String simpleName(java.lang.String) -> simpleName
    java.util.List superTypes(java.lang.String) -> superTypes
    me.yohom.fluttify.model.Type findType(java.lang.String) -> findType
    java.lang.String toKotlinType(java.lang.String) -> toKotlinType
    java.lang.String toSwiftType(java.lang.String) -> toSwiftType
    boolean isValueType(java.lang.String) -> isValueType
    boolean isCPointerType(java.lang.String) -> isCPointerType
    java.lang.String pack(java.lang.String) -> pack
    java.lang.String toSwiftMethod(java.lang.String) -> toSwiftMethod
    boolean isObfuscated(java.lang.String) -> isObfuscated
    java.lang.String toDartType(java.lang.String) -> toDartType
    java.lang.String toUnderscore(java.lang.String) -> toUnderscore
    java.lang.String depointer(java.lang.String) -> depointer
    java.lang.String pointerValue(java.lang.String) -> pointerValue
    java.lang.String deprotocol(java.lang.String) -> deprotocol
    java.lang.String enprotocol(java.lang.String) -> enprotocol
    java.lang.String enpointer(java.lang.String) -> enpointer
    java.lang.String genericType(java.lang.String) -> genericType
    java.lang.String containerType(java.lang.String) -> containerType
    java.lang.String removeNumberSuffix(java.lang.String) -> removeNumberSuffix
    int genericLevel(java.lang.String) -> genericLevel
    java.lang.String underscore2Camel(java.lang.String,boolean) -> underscore2Camel
    java.lang.String underscore2Camel$default(java.lang.String,boolean,int,java.lang.Object) -> underscore2Camel$default
    java.lang.String camel2Underscore(java.lang.String) -> camel2Underscore
    java.lang.String objc2SwiftSpec(java.lang.String) -> objc2SwiftSpec
    java.io.File file(java.lang.String) -> file
    java.lang.StringBuilder builder(java.lang.String) -> builder
    java.lang.String replaceParagraph(java.lang.String,java.lang.String,java.lang.String) -> replaceParagraph
    java.lang.String stripQuotes(java.lang.String) -> stripQuotes
    boolean isAndroidArchive(java.lang.String) -> isAndroidArchive
    boolean isIOSArchive(java.lang.String) -> isIOSArchive
me.yohom.fluttify.extensions.StringXKt$replaceParagraph$1 -> me.yohom.fluttify.extensions.x:
    java.lang.String $oldValue -> a
    java.lang.String $newValue -> b
    java.lang.StringBuilder $indent -> c
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(java.lang.String) -> a
    void <init>(java.lang.String,java.lang.String,java.lang.StringBuilder) -> <init>
me.yohom.fluttify.extensions.StringXKt$replaceParagraph$1$1 -> me.yohom.fluttify.extensions.y:
    me.yohom.fluttify.extensions.StringXKt$replaceParagraph$1 this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(java.lang.String) -> a
    void <init>(me.yohom.fluttify.extensions.StringXKt$replaceParagraph$1) -> <init>
me.yohom.fluttify.extensions.StringXKt$underscore2Camel$raw$2 -> me.yohom.fluttify.extensions.z:
    me.yohom.fluttify.extensions.StringXKt$underscore2Camel$raw$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Constructor -> me.yohom.fluttify.model.Constructor:
    java.lang.String name -> name
    java.util.List formalParams -> formalParams
    boolean isPublic -> isPublic
    me.yohom.fluttify.model.Platform platform -> platform
    boolean filter() -> filter
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.util.List getFormalParams() -> getFormalParams
    void setFormalParams(java.util.List) -> setFormalParams
    boolean isPublic() -> isPublic
    void setPublic(boolean) -> setPublic
    me.yohom.fluttify.model.Platform getPlatform() -> getPlatform
    void setPlatform(me.yohom.fluttify.model.Platform) -> setPlatform
    void <init>(java.lang.String,java.util.List,boolean,me.yohom.fluttify.model.Platform) -> <init>
    java.lang.String component1() -> component1
    java.util.List component2() -> component2
    boolean component3() -> component3
    me.yohom.fluttify.model.Platform component4() -> component4
    me.yohom.fluttify.model.Constructor copy(java.lang.String,java.util.List,boolean,me.yohom.fluttify.model.Platform) -> copy
    me.yohom.fluttify.model.Constructor copy$default(me.yohom.fluttify.model.Constructor,java.lang.String,java.util.List,boolean,me.yohom.fluttify.model.Platform,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
me.yohom.fluttify.model.Constructor$filter$1 -> me.yohom.fluttify.model.a:
    me.yohom.fluttify.model.Constructor$filter$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Constructor) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field -> me.yohom.fluttify.model.Field:
    boolean isPublic -> isPublic
    java.lang.Boolean isFinal -> isFinal
    java.lang.Boolean isStatic -> isStatic
    java.lang.String value -> value
    me.yohom.fluttify.model.Variable variable -> variable
    java.lang.String className -> className
    java.lang.String getterName -> getterName
    java.lang.String setterName -> setterName
    me.yohom.fluttify.model.Platform platform -> platform
    boolean isDeprecated -> isDeprecated
    boolean filterConstants() -> filterConstants
    boolean filterGetters() -> filterGetters
    boolean filterSetter() -> filterSetter
    java.lang.String nativeHandleGetterMethodName() -> nativeHandleGetterMethodName
    java.lang.String nativeHandleSetterMethodName() -> nativeHandleSetterMethodName
    java.lang.String getterMethodName() -> getterMethodName
    java.lang.String setterMethodName() -> setterMethodName
    me.yohom.fluttify.model.Method asGetterMethod() -> asGetterMethod
    me.yohom.fluttify.model.Method asSetterMethod() -> asSetterMethod
    boolean isPublic() -> isPublic
    java.lang.Boolean isFinal() -> isFinal
    java.lang.Boolean isStatic() -> isStatic
    java.lang.String getValue() -> getValue
    me.yohom.fluttify.model.Variable getVariable() -> getVariable
    java.lang.String getClassName() -> getClassName
    java.lang.String getGetterName() -> getGetterName
    java.lang.String getSetterName() -> getSetterName
    me.yohom.fluttify.model.Platform getPlatform() -> getPlatform
    void setPlatform(me.yohom.fluttify.model.Platform) -> setPlatform
    boolean isDeprecated() -> isDeprecated
    void setDeprecated(boolean) -> setDeprecated
    void <init>(boolean,java.lang.Boolean,java.lang.Boolean,java.lang.String,me.yohom.fluttify.model.Variable,java.lang.String,java.lang.String,java.lang.String,me.yohom.fluttify.model.Platform,boolean) -> <init>
    void <init>(boolean,java.lang.Boolean,java.lang.Boolean,java.lang.String,me.yohom.fluttify.model.Variable,java.lang.String,java.lang.String,java.lang.String,me.yohom.fluttify.model.Platform,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    boolean component1() -> component1
    java.lang.Boolean component2() -> component2
    java.lang.Boolean component3() -> component3
    java.lang.String component4() -> component4
    me.yohom.fluttify.model.Variable component5() -> component5
    java.lang.String component6() -> component6
    java.lang.String component7() -> component7
    java.lang.String component8() -> component8
    me.yohom.fluttify.model.Platform component9() -> component9
    boolean component10() -> component10
    me.yohom.fluttify.model.Field copy(boolean,java.lang.Boolean,java.lang.Boolean,java.lang.String,me.yohom.fluttify.model.Variable,java.lang.String,java.lang.String,java.lang.String,me.yohom.fluttify.model.Platform,boolean) -> copy
    me.yohom.fluttify.model.Field copy$default(me.yohom.fluttify.model.Field,boolean,java.lang.Boolean,java.lang.Boolean,java.lang.String,me.yohom.fluttify.model.Variable,java.lang.String,java.lang.String,java.lang.String,me.yohom.fluttify.model.Platform,boolean,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
me.yohom.fluttify.model.Field$filterConstants$1 -> me.yohom.fluttify.model.b:
    me.yohom.fluttify.model.Field$filterConstants$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterConstants$2 -> me.yohom.fluttify.model.c:
    me.yohom.fluttify.model.Field$filterConstants$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterConstants$3 -> me.yohom.fluttify.model.d:
    me.yohom.fluttify.model.Field$filterConstants$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterConstants$4 -> me.yohom.fluttify.model.e:
    me.yohom.fluttify.model.Field this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>(me.yohom.fluttify.model.Field) -> <init>
me.yohom.fluttify.model.Field$filterConstants$5 -> me.yohom.fluttify.model.f:
    me.yohom.fluttify.model.Field$filterConstants$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterConstants$6 -> me.yohom.fluttify.model.g:
    me.yohom.fluttify.model.Field$filterConstants$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$1 -> me.yohom.fluttify.model.h:
    me.yohom.fluttify.model.Field$filterGetters$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$2 -> me.yohom.fluttify.model.i:
    me.yohom.fluttify.model.Field$filterGetters$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.Boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$3 -> me.yohom.fluttify.model.j:
    me.yohom.fluttify.model.Field$filterGetters$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$4 -> me.yohom.fluttify.model.k:
    me.yohom.fluttify.model.Field$filterGetters$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$5 -> me.yohom.fluttify.model.l:
    me.yohom.fluttify.model.Field$filterGetters$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$6 -> me.yohom.fluttify.model.m:
    me.yohom.fluttify.model.Field$filterGetters$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$7 -> me.yohom.fluttify.model.n:
    me.yohom.fluttify.model.Field$filterGetters$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$8 -> me.yohom.fluttify.model.o:
    me.yohom.fluttify.model.Field$filterGetters$8 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterGetters$9 -> me.yohom.fluttify.model.p:
    me.yohom.fluttify.model.Field$filterGetters$9 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterSetter$1 -> me.yohom.fluttify.model.q:
    me.yohom.fluttify.model.Field$filterSetter$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterSetter$2 -> me.yohom.fluttify.model.r:
    me.yohom.fluttify.model.Field$filterSetter$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.Boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterSetter$3 -> me.yohom.fluttify.model.s:
    me.yohom.fluttify.model.Field$filterSetter$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.Boolean invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterSetter$4 -> me.yohom.fluttify.model.t:
    me.yohom.fluttify.model.Field$filterSetter$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterSetter$5 -> me.yohom.fluttify.model.u:
    me.yohom.fluttify.model.Field$filterSetter$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterSetter$6 -> me.yohom.fluttify.model.v:
    me.yohom.fluttify.model.Field$filterSetter$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterSetter$7 -> me.yohom.fluttify.model.w:
    me.yohom.fluttify.model.Field$filterSetter$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Field$filterSetter$8 -> me.yohom.fluttify.model.x:
    me.yohom.fluttify.model.Field$filterSetter$8 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.IPlatform -> me.yohom.fluttify.model.IPlatform:
    me.yohom.fluttify.model.Platform getPlatform() -> getPlatform
    void setPlatform(me.yohom.fluttify.model.Platform) -> setPlatform
me.yohom.fluttify.model.IScope -> me.yohom.fluttify.model.IScope:
    boolean isPublic() -> isPublic
me.yohom.fluttify.model.Lib -> me.yohom.fluttify.model.Lib:
    java.lang.String name -> name
    java.util.List types -> types
    boolean isDependency -> isDependency
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.util.List getTypes() -> getTypes
    void setTypes(java.util.List) -> setTypes
    boolean isDependency() -> isDependency
    void setDependency(boolean) -> setDependency
    java.lang.String toString() -> toString
    void <init>() -> <init>
me.yohom.fluttify.model.ListType -> me.yohom.fluttify.model.ListType:
    me.yohom.fluttify.model.ListType Array -> Array
    me.yohom.fluttify.model.ListType List -> List
    me.yohom.fluttify.model.ListType ArrayList -> ArrayList
    me.yohom.fluttify.model.ListType LinkedList -> LinkedList
    me.yohom.fluttify.model.ListType NonList -> NonList
    me.yohom.fluttify.model.ListType[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    me.yohom.fluttify.model.ListType[] values() -> values
    me.yohom.fluttify.model.ListType valueOf(java.lang.String) -> valueOf
me.yohom.fluttify.model.Method -> me.yohom.fluttify.model.Method:
    java.lang.String exactName -> exactName
    java.lang.String returnType -> returnType
    java.lang.String name -> name
    java.util.List formalParams -> formalParams
    boolean isStatic -> isStatic
    java.lang.Boolean isAbstract -> isAbstract
    boolean isPublic -> isPublic
    java.lang.String className -> className
    me.yohom.fluttify.model.Platform platform -> platform
    boolean isDeprecated -> isDeprecated
    boolean isFunction -> isFunction
    java.lang.String getExactName() -> getExactName
    boolean filter() -> filter
    java.lang.String handleMethodName() -> handleMethodName
    java.lang.String nameWithClass() -> nameWithClass
    java.lang.String signature() -> signature
    java.lang.String signatureNamed() -> signatureNamed
    java.lang.String toString() -> toString
    java.lang.String getReturnType() -> getReturnType
    void setReturnType(java.lang.String) -> setReturnType
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.util.List getFormalParams() -> getFormalParams
    void setFormalParams(java.util.List) -> setFormalParams
    boolean isStatic() -> isStatic
    void setStatic(boolean) -> setStatic
    java.lang.Boolean isAbstract() -> isAbstract
    void setAbstract(java.lang.Boolean) -> setAbstract
    boolean isPublic() -> isPublic
    void setPublic(boolean) -> setPublic
    java.lang.String getClassName() -> getClassName
    void setClassName(java.lang.String) -> setClassName
    me.yohom.fluttify.model.Platform getPlatform() -> getPlatform
    void setPlatform(me.yohom.fluttify.model.Platform) -> setPlatform
    boolean isDeprecated() -> isDeprecated
    void setDeprecated(boolean) -> setDeprecated
    boolean isFunction() -> isFunction
    void setFunction(boolean) -> setFunction
    void <init>(java.lang.String,java.lang.String,java.util.List,boolean,java.lang.Boolean,boolean,java.lang.String,me.yohom.fluttify.model.Platform,boolean,boolean) -> <init>
    void <init>(java.lang.String,java.lang.String,java.util.List,boolean,java.lang.Boolean,boolean,java.lang.String,me.yohom.fluttify.model.Platform,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.lang.String component1() -> component1
    java.lang.String component2() -> component2
    java.util.List component3() -> component3
    boolean component4() -> component4
    java.lang.Boolean component5() -> component5
    boolean component6() -> component6
    java.lang.String component7() -> component7
    me.yohom.fluttify.model.Platform component8() -> component8
    boolean component9() -> component9
    boolean component10() -> component10
    me.yohom.fluttify.model.Method copy(java.lang.String,java.lang.String,java.util.List,boolean,java.lang.Boolean,boolean,java.lang.String,me.yohom.fluttify.model.Platform,boolean,boolean) -> copy
    me.yohom.fluttify.model.Method copy$default(me.yohom.fluttify.model.Method,java.lang.String,java.lang.String,java.util.List,boolean,java.lang.Boolean,boolean,java.lang.String,me.yohom.fluttify.model.Platform,boolean,boolean,int,java.lang.Object) -> copy$default
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
me.yohom.fluttify.model.Method$exactName$1 -> me.yohom.fluttify.model.y:
    me.yohom.fluttify.model.Method$exactName$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$10 -> me.yohom.fluttify.model.z:
    me.yohom.fluttify.model.Method$filter$10 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$11 -> me.yohom.fluttify.model.aa:
    me.yohom.fluttify.model.Method$filter$11 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$12 -> me.yohom.fluttify.model.ab:
    me.yohom.fluttify.model.Method$filter$12 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$13 -> me.yohom.fluttify.model.ac:
    me.yohom.fluttify.model.Method$filter$13 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$14 -> me.yohom.fluttify.model.ad:
    me.yohom.fluttify.model.Method$filter$14 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$15 -> me.yohom.fluttify.model.ae:
    me.yohom.fluttify.model.Method$filter$15 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$16 -> me.yohom.fluttify.model.af:
    me.yohom.fluttify.model.Method$filter$16 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$17 -> me.yohom.fluttify.model.ag:
    me.yohom.fluttify.model.Method$filter$17 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$18 -> me.yohom.fluttify.model.ah:
    me.yohom.fluttify.model.Method$filter$18 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$19 -> me.yohom.fluttify.model.ai:
    me.yohom.fluttify.model.Method$filter$19 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$2 -> me.yohom.fluttify.model.aj:
    me.yohom.fluttify.model.Method$filter$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$20 -> me.yohom.fluttify.model.ak:
    me.yohom.fluttify.model.Method$filter$20 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$21 -> me.yohom.fluttify.model.al:
    me.yohom.fluttify.model.Method$filter$21 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$22 -> me.yohom.fluttify.model.am:
    me.yohom.fluttify.model.Method$filter$22 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$23 -> me.yohom.fluttify.model.an:
    me.yohom.fluttify.model.Method$filter$23 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$24 -> me.yohom.fluttify.model.ao:
    me.yohom.fluttify.model.Method$filter$24 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$3 -> me.yohom.fluttify.model.ap:
    me.yohom.fluttify.model.Method$filter$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$4 -> me.yohom.fluttify.model.aq:
    me.yohom.fluttify.model.Method$filter$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$5 -> me.yohom.fluttify.model.ar:
    me.yohom.fluttify.model.Method$filter$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$6 -> me.yohom.fluttify.model.as:
    me.yohom.fluttify.model.Method$filter$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$7 -> me.yohom.fluttify.model.at:
    me.yohom.fluttify.model.Method$filter$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$8 -> me.yohom.fluttify.model.au:
    me.yohom.fluttify.model.Method$filter$8 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$filter$9 -> me.yohom.fluttify.model.av:
    me.yohom.fluttify.model.Method$filter$9 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$signature$3 -> me.yohom.fluttify.model.aw:
    me.yohom.fluttify.model.Method$signature$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Method$signatureNamed$1 -> me.yohom.fluttify.model.ax:
    me.yohom.fluttify.model.Method$signatureNamed$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Parameter -> me.yohom.fluttify.model.Parameter:
    java.lang.String named -> named
    me.yohom.fluttify.model.Variable variable -> variable
    me.yohom.fluttify.model.Platform platform -> platform
    boolean filter() -> filter
    java.lang.String getNamed() -> getNamed
    me.yohom.fluttify.model.Variable getVariable() -> getVariable
    me.yohom.fluttify.model.Platform getPlatform() -> getPlatform
    void setPlatform(me.yohom.fluttify.model.Platform) -> setPlatform
    void <init>(java.lang.String,me.yohom.fluttify.model.Variable,me.yohom.fluttify.model.Platform) -> <init>
    void <init>(java.lang.String,me.yohom.fluttify.model.Variable,me.yohom.fluttify.model.Platform,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.lang.String component1() -> component1
    me.yohom.fluttify.model.Variable component2() -> component2
    me.yohom.fluttify.model.Platform component3() -> component3
    me.yohom.fluttify.model.Parameter copy(java.lang.String,me.yohom.fluttify.model.Variable,me.yohom.fluttify.model.Platform) -> copy
    me.yohom.fluttify.model.Parameter copy$default(me.yohom.fluttify.model.Parameter,java.lang.String,me.yohom.fluttify.model.Variable,me.yohom.fluttify.model.Platform,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
me.yohom.fluttify.model.Parameter$filter$1 -> me.yohom.fluttify.model.ay:
    me.yohom.fluttify.model.Parameter$filter$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Parameter$filter$2 -> me.yohom.fluttify.model.az:
    me.yohom.fluttify.model.Parameter$filter$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Parameter$filter$3 -> me.yohom.fluttify.model.ba:
    me.yohom.fluttify.model.Parameter$filter$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Platform -> me.yohom.fluttify.model.Platform:
    me.yohom.fluttify.model.Platform General -> General
    me.yohom.fluttify.model.Platform iOS -> iOS
    me.yohom.fluttify.model.Platform Android -> Android
    me.yohom.fluttify.model.Platform Unknown -> Unknown
    me.yohom.fluttify.model.Platform[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    java.lang.String objectType() -> objectType
    void <init>(java.lang.String,int) -> <init>
    me.yohom.fluttify.model.Platform[] values() -> values
    me.yohom.fluttify.model.Platform valueOf(java.lang.String) -> valueOf
me.yohom.fluttify.model.Platform$WhenMappings -> me.yohom.fluttify.model.Platform$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.SDK -> me.yohom.fluttify.model.SDK:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    java.lang.String version -> version
    me.yohom.fluttify.model.Platform platform -> platform
    java.util.List libs -> libs
    kotlin.Lazy allFilteredMethods$delegate -> allFilteredMethods$delegate
    java.util.List sdks -> sdks
    me.yohom.fluttify.model.SDK$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    me.yohom.fluttify.model.Platform getPlatform() -> getPlatform
    void setPlatform(me.yohom.fluttify.model.Platform) -> setPlatform
    java.util.List getLibs() -> getLibs
    void setLibs(java.util.List) -> setLibs
    java.util.List getDirectLibs() -> getDirectLibs
    java.util.List getAllFilteredMethods() -> getAllFilteredMethods
    java.lang.String toString() -> toString
    void <init>() -> <init>
    java.util.List access$getSdks$cp() -> access$getSdks$cp
me.yohom.fluttify.model.SDK$Companion -> me.yohom.fluttify.model.SDK$Companion:
    java.util.List getSdks() -> getSdks
    me.yohom.fluttify.model.SDK getAndroidSDK() -> getAndroidSDK
    me.yohom.fluttify.model.SDK getIOSSDK() -> getIOSSDK
    me.yohom.fluttify.model.Type findType(java.lang.String) -> findType
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
me.yohom.fluttify.model.SDK$allFilteredMethods$2 -> me.yohom.fluttify.model.bb:
    me.yohom.fluttify.model.SDK this$0 -> a
    java.lang.Object invoke() -> a
    java.util.List invoke() -> b
    void <init>(me.yohom.fluttify.model.SDK) -> <init>
me.yohom.fluttify.model.Type -> me.yohom.fluttify.model.Type:
    kotlin.reflect.KProperty[] $$delegatedProperties -> $$delegatedProperties
    me.yohom.fluttify.model.Platform platform -> platform
    java.lang.String name -> name
    java.lang.String aliasOf -> aliasOf
    java.util.List genericTypes -> genericTypes
    me.yohom.fluttify.model.TypeType typeType -> typeType
    boolean isPublic -> isPublic
    boolean isAbstract -> isAbstract
    boolean isInnerType -> isInnerType
    boolean isStaticType -> isStaticType
    boolean isJsonable -> isJsonable
    java.lang.String superClass -> superClass
    java.util.List interfaces -> interfaces
    java.util.List constructors -> constructors
    java.util.List fields -> fields
    java.util.List methods -> methods
    java.util.List constants -> constants
    java.lang.String returnType -> returnType
    java.util.List formalParams -> formalParams
    boolean deprecated -> deprecated
    kotlin.Lazy ancestorTypes$delegate -> ancestorTypes$delegate
    me.yohom.fluttify.model.Type UNKNOWN_TYPE -> UNKNOWN_TYPE
    me.yohom.fluttify.model.Type NO_TYPE -> NO_TYPE
    me.yohom.fluttify.model.Type$Companion Companion -> Companion
    void <clinit>() -> <clinit>
    me.yohom.fluttify.model.Platform getPlatform() -> getPlatform
    void setPlatform(me.yohom.fluttify.model.Platform) -> setPlatform
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getAliasOf() -> getAliasOf
    void setAliasOf(java.lang.String) -> setAliasOf
    java.util.List getGenericTypes() -> getGenericTypes
    void setGenericTypes(java.util.List) -> setGenericTypes
    me.yohom.fluttify.model.TypeType getTypeType() -> getTypeType
    void setTypeType(me.yohom.fluttify.model.TypeType) -> setTypeType
    boolean isPublic() -> isPublic
    void setPublic(boolean) -> setPublic
    boolean isAbstract() -> isAbstract
    void setAbstract(boolean) -> setAbstract
    boolean isInnerType() -> isInnerType
    void setInnerType(boolean) -> setInnerType
    boolean isStaticType() -> isStaticType
    void setStaticType(boolean) -> setStaticType
    boolean isJsonable() -> isJsonable
    void setJsonable(boolean) -> setJsonable
    java.lang.String getSuperClass() -> getSuperClass
    void setSuperClass(java.lang.String) -> setSuperClass
    java.util.List getInterfaces() -> getInterfaces
    void setInterfaces(java.util.List) -> setInterfaces
    java.util.List getConstructors() -> getConstructors
    void setConstructors(java.util.List) -> setConstructors
    java.util.List getFields() -> getFields
    void setFields(java.util.List) -> setFields
    java.util.List getMethods() -> getMethods
    void setMethods(java.util.List) -> setMethods
    java.util.List getConstants() -> getConstants
    void setConstants(java.util.List) -> setConstants
    java.lang.String getReturnType() -> getReturnType
    void setReturnType(java.lang.String) -> setReturnType
    java.util.List getFormalParams() -> getFormalParams
    void setFormalParams(java.util.List) -> setFormalParams
    boolean getDeprecated() -> getDeprecated
    void setDeprecated(boolean) -> setDeprecated
    java.util.List getAncestorTypes() -> getAncestorTypes
    boolean filter() -> filter
    boolean isCallback() -> isCallback
    boolean isLambda() -> isLambda
    boolean isFunction() -> isFunction
    boolean isKnownFunction() -> isKnownFunction
    java.util.List subtypes() -> subtypes
    boolean hasConcretSubtype() -> hasConcretSubtype
    me.yohom.fluttify.model.Type firstConcretSubtype() -> firstConcretSubtype
    java.util.List superTypes() -> superTypes
    boolean isAlias() -> isAlias
    boolean constructable() -> constructable
    boolean isEnum() -> isEnum
    boolean isStruct() -> isStruct
    boolean isStructPointer() -> isStructPointer
    boolean isInterface() -> isInterface
    boolean isConcret() -> isConcret
    boolean hasSubtype() -> hasSubtype
    boolean isList() -> isList
    boolean jsonable() -> jsonable
    java.lang.String toDartType() -> toDartType
    boolean isRefType() -> isRefType
    boolean isObfuscated() -> isObfuscated
    boolean isView() -> isView
    java.lang.String nameWithGeneric() -> nameWithGeneric
    me.yohom.fluttify.model.Method asMethod() -> asMethod
    java.util.List ancestorClasses() -> ancestorClasses
    java.util.List ancestorInterfaces(boolean) -> ancestorInterfaces
    java.util.List ancestorInterfaces$default(me.yohom.fluttify.model.Type,boolean,int,java.lang.Object) -> ancestorInterfaces$default
    boolean isKnownType() -> isKnownType
    boolean isUnknownType() -> isUnknownType
    java.lang.String toString() -> toString
    void <init>() -> <init>
    me.yohom.fluttify.model.Type access$getUNKNOWN_TYPE$cp() -> access$getUNKNOWN_TYPE$cp
    me.yohom.fluttify.model.Type access$getNO_TYPE$cp() -> access$getNO_TYPE$cp
me.yohom.fluttify.model.Type$Companion -> me.yohom.fluttify.model.Type$Companion:
    me.yohom.fluttify.model.Type getUNKNOWN_TYPE() -> getUNKNOWN_TYPE
    me.yohom.fluttify.model.Type getNO_TYPE() -> getNO_TYPE
    void <init>() -> <init>
    void <init>(kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
me.yohom.fluttify.model.Type$ancestorTypes$2 -> me.yohom.fluttify.model.bc:
    me.yohom.fluttify.model.Type this$0 -> a
    java.lang.Object invoke() -> a
    java.util.List invoke() -> b
    void <init>(me.yohom.fluttify.model.Type) -> <init>
me.yohom.fluttify.model.Type$ancestorTypes$2$1 -> me.yohom.fluttify.model.bd:
    java.util.List $result -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.lang.String) -> a
    void <init>(java.util.List) -> <init>
me.yohom.fluttify.model.Type$ancestorTypes$2$2 -> me.yohom.fluttify.model.be:
    java.util.List $result -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.lang.String) -> a
    void <init>(java.util.List) -> <init>
me.yohom.fluttify.model.Type$filter$1 -> me.yohom.fluttify.model.bf:
    me.yohom.fluttify.model.Type$filter$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Type$filter$2 -> me.yohom.fluttify.model.bg:
    me.yohom.fluttify.model.Type$filter$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Type$filter$3 -> me.yohom.fluttify.model.bh:
    me.yohom.fluttify.model.Type$filter$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Type$filter$4 -> me.yohom.fluttify.model.bi:
    me.yohom.fluttify.model.Type$filter$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Type$filter$5 -> me.yohom.fluttify.model.bj:
    me.yohom.fluttify.model.Type$filter$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Type$filter$6 -> me.yohom.fluttify.model.bk:
    me.yohom.fluttify.model.Type$filter$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.Type$filter$7 -> me.yohom.fluttify.model.bl:
    me.yohom.fluttify.model.Type$filter$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.model.TypeType -> me.yohom.fluttify.model.TypeType:
    me.yohom.fluttify.model.TypeType Class -> Class
    me.yohom.fluttify.model.TypeType Enum -> Enum
    me.yohom.fluttify.model.TypeType Interface -> Interface
    me.yohom.fluttify.model.TypeType Lambda -> Lambda
    me.yohom.fluttify.model.TypeType Struct -> Struct
    me.yohom.fluttify.model.TypeType Function -> Function
    me.yohom.fluttify.model.TypeType Alias -> Alias
    me.yohom.fluttify.model.TypeType[] $VALUES -> $VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    me.yohom.fluttify.model.TypeType[] values() -> values
    me.yohom.fluttify.model.TypeType valueOf(java.lang.String) -> valueOf
me.yohom.fluttify.model.Variable -> me.yohom.fluttify.model.Variable:
    java.lang.String typeName -> typeName
    java.lang.String name -> name
    me.yohom.fluttify.model.Platform platform -> platform
    me.yohom.fluttify.model.ListType listType -> listType
    int genericLevel -> genericLevel
    boolean isList() -> isList
    boolean constructable() -> constructable
    boolean isStructPointer() -> isStructPointer
    boolean isStruct() -> isStruct
    boolean isEnum() -> isEnum
    boolean jsonable() -> jsonable
    boolean isAliasType() -> isAliasType
    boolean isValueType() -> isValueType
    boolean isLambda() -> isLambda
    boolean isCallback() -> isCallback
    boolean isInterface() -> isInterface
    boolean isAbstract() -> isAbstract
    boolean isConcret() -> isConcret
    boolean hasConcretSubtype() -> hasConcretSubtype
    boolean hasSubtype() -> hasSubtype
    boolean isRefType() -> isRefType
    boolean isUnknownType() -> isUnknownType
    boolean isKnownType() -> isKnownType
    boolean isPublicType() -> isPublicType
    boolean isGenericType() -> isGenericType
    me.yohom.fluttify.model.Type type() -> type
    java.lang.String paramType() -> paramType
    java.lang.String toDartString() -> toDartString
    java.lang.String var2Args(me.yohom.fluttify.model.Method) -> var2Args
    java.lang.String var2Args$default(me.yohom.fluttify.model.Variable,me.yohom.fluttify.model.Method,int,java.lang.Object) -> var2Args$default
    boolean isStringArray() -> isStringArray
    boolean isArray() -> isArray
    boolean isCollection() -> isCollection
    boolean isMap() -> isMap
    java.lang.String getTypeName() -> getTypeName
    java.lang.String getName() -> getName
    me.yohom.fluttify.model.Platform getPlatform() -> getPlatform
    void setPlatform(me.yohom.fluttify.model.Platform) -> setPlatform
    me.yohom.fluttify.model.ListType getListType() -> getListType
    int getGenericLevel() -> getGenericLevel
    void <init>(java.lang.String,java.lang.String,me.yohom.fluttify.model.Platform,me.yohom.fluttify.model.ListType,int) -> <init>
    void <init>(java.lang.String,java.lang.String,me.yohom.fluttify.model.Platform,me.yohom.fluttify.model.ListType,int,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    java.lang.String component1() -> component1
    java.lang.String component2() -> component2
    me.yohom.fluttify.model.Platform component3() -> component3
    me.yohom.fluttify.model.ListType component4() -> component4
    int component5() -> component5
    me.yohom.fluttify.model.Variable copy(java.lang.String,java.lang.String,me.yohom.fluttify.model.Platform,me.yohom.fluttify.model.ListType,int) -> copy
    me.yohom.fluttify.model.Variable copy$default(me.yohom.fluttify.model.Variable,java.lang.String,java.lang.String,me.yohom.fluttify.model.Platform,me.yohom.fluttify.model.ListType,int,int,java.lang.Object) -> copy$default
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
me.yohom.fluttify.model.Variable$toDartString$1 -> me.yohom.fluttify.model.bm:
    me.yohom.fluttify.model.Variable$toDartString$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidAddDependency -> me.yohom.fluttify.task.AndroidAddDependency:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.AndroidAddDependency$process$2 -> me.yohom.fluttify.task.a:
    me.yohom.fluttify.task.AndroidAddDependency$process$2 INSTANCE -> a
    boolean accept(java.io.File) -> accept
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidDartInterface -> me.yohom.fluttify.task.AndroidDartInterface:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.AndroidDartInterface$WhenMappings -> me.yohom.fluttify.task.AndroidDartInterface$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$3 -> me.yohom.fluttify.task.b:
    me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$4 -> me.yohom.fluttify.task.c:
    me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$5 -> me.yohom.fluttify.task.d:
    me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$6 -> me.yohom.fluttify.task.e:
    me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$7 -> me.yohom.fluttify.task.f:
    me.yohom.fluttify.task.AndroidDartInterface$process$targetTypes$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidDartInterface$process$typeCasts$1 -> me.yohom.fluttify.task.g:
    me.yohom.fluttify.task.AndroidDartInterface$process$typeCasts$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidDartInterface$process$typeChecks$1 -> me.yohom.fluttify.task.h:
    me.yohom.fluttify.task.AndroidDartInterface$process$typeChecks$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.AndroidJavaInterface -> me.yohom.fluttify.task.AndroidJavaInterface:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.AndroidJsonRepresentation -> me.yohom.fluttify.task.AndroidJsonRepresentation:
    java.io.File decompiledDir -> decompiledDir
    me.yohom.fluttify.model.SDK sdk -> sdk
    java.io.File getDecompiledDir() -> getDecompiledDir
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.AndroidJsonRepresentation$process$2$1 -> me.yohom.fluttify.task.i:
    me.yohom.fluttify.model.Lib $lib -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.io.File) -> a
    void <init>(me.yohom.fluttify.model.Lib) -> <init>
me.yohom.fluttify.task.AndroidKotlinInterface -> me.yohom.fluttify.task.AndroidKotlinInterface:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.CleanEmpty -> me.yohom.fluttify.task.CleanEmpty:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.CleanEmpty$process$1 -> me.yohom.fluttify.task.j:
    me.yohom.fluttify.task.CleanEmpty$process$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.io.File) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.Dartfmt -> me.yohom.fluttify.task.Dartfmt:
    java.io.File projectDir -> projectDir
    java.io.File getProjectDir() -> getProjectDir
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.Dartfmt$process$1 -> me.yohom.fluttify.task.k:
    me.yohom.fluttify.task.Dartfmt$process$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.io.File) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.Dartfmt$process$1$1 -> me.yohom.fluttify.task.l:
    me.yohom.fluttify.task.Dartfmt$process$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.lang.Object) -> b
    kotlin.reflect.KDeclarationContainer getOwner() -> a
    java.lang.String getName() -> b
    java.lang.String getSignature() -> c
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.Dartfmt$sam$java_util_function_Consumer$0 -> me.yohom.fluttify.task.m:
    kotlin.jvm.functions.Function1 function -> a
    void <init>(kotlin.jvm.functions.Function1) -> <init>
    void accept(java.lang.Object) -> accept
me.yohom.fluttify.task.DecompileClass -> me.yohom.fluttify.task.DecompileClass:
    java.io.File classFilesDir -> classFilesDir
    java.io.File javaFilesDir -> javaFilesDir
    java.io.File getClassFilesDir() -> getClassFilesDir
    java.io.File getJavaFilesDir() -> getJavaFilesDir
    void decompile() -> decompile
    void <init>() -> <init>
me.yohom.fluttify.task.DownloadAndroidSDK -> me.yohom.fluttify.task.DownloadAndroidSDK:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.DownloadIOSSDK -> me.yohom.fluttify.task.DownloadIOSSDK:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.Export -> me.yohom.fluttify.task.Export:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.Export$process$1 -> me.yohom.fluttify.task.n:
    java.io.File $androidExportFile -> a
    java.lang.StringBuilder $androidResult -> b
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.io.File) -> a
    void <init>(java.io.File,java.lang.StringBuilder) -> <init>
me.yohom.fluttify.task.Export$process$2 -> me.yohom.fluttify.task.o:
    java.io.File $iosExportFile -> a
    java.lang.StringBuilder $iosResult -> b
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.io.File) -> a
    void <init>(java.io.File,java.lang.StringBuilder) -> <init>
me.yohom.fluttify.task.FluttifyTask -> me.yohom.fluttify.task.p:
    me.yohom.fluttify.FluttifyExtension getExt() -> getExt
    java.lang.String getGroup() -> getGroup
    void <init>() -> <init>
me.yohom.fluttify.task.IOSAddDependency -> me.yohom.fluttify.task.IOSAddDependency:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.IOSDartInterface -> me.yohom.fluttify.task.IOSDartInterface:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.IOSDartInterface$WhenMappings -> me.yohom.fluttify.task.IOSDartInterface$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$3 -> me.yohom.fluttify.task.q:
    me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$4 -> me.yohom.fluttify.task.r:
    me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$5 -> me.yohom.fluttify.task.s:
    me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$6 -> me.yohom.fluttify.task.t:
    me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$7 -> me.yohom.fluttify.task.u:
    me.yohom.fluttify.task.IOSDartInterface$process$targetTypes$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.IOSDartInterface$process$typeCasts$1 -> me.yohom.fluttify.task.v:
    me.yohom.fluttify.task.IOSDartInterface$process$typeCasts$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.IOSDartInterface$process$typeChecks$1 -> me.yohom.fluttify.task.w:
    me.yohom.fluttify.task.IOSDartInterface$process$typeChecks$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.IOSJsonRepresentation -> me.yohom.fluttify.task.IOSJsonRepresentation:
    java.io.File frameworkDir -> frameworkDir
    me.yohom.fluttify.model.SDK sdk -> sdk
    java.io.File getFrameworkDir() -> getFrameworkDir
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.IOSJsonRepresentation$process$1$2 -> me.yohom.fluttify.task.x:
    me.yohom.fluttify.model.Lib $lib -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.io.File) -> a
    void <init>(me.yohom.fluttify.model.Lib) -> <init>
me.yohom.fluttify.task.IOSJsonRepresentation$process$1$4$1 -> me.yohom.fluttify.task.y:
    me.yohom.fluttify.model.Lib $lib -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.io.File) -> a
    void <init>(me.yohom.fluttify.model.Lib) -> <init>
me.yohom.fluttify.task.IOSObjcInterface -> me.yohom.fluttify.task.IOSObjcInterface:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.IOSSwiftInterface -> me.yohom.fluttify.task.IOSSwiftInterface:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.OutputProject -> me.yohom.fluttify.task.OutputProject:
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.OutputProject$process$1 -> me.yohom.fluttify.task.z:
    me.yohom.fluttify.task.OutputProject$process$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.lang.Object) -> b
    kotlin.reflect.KDeclarationContainer getOwner() -> a
    java.lang.String getName() -> b
    java.lang.String getSignature() -> c
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.OutputProject$sam$java_util_function_Consumer$0 -> me.yohom.fluttify.task.aa:
    kotlin.jvm.functions.Function1 function -> a
    void <init>(kotlin.jvm.functions.Function1) -> <init>
    void accept(java.lang.Object) -> accept
me.yohom.fluttify.task.TweakDefaultProject -> me.yohom.fluttify.task.TweakDefaultProject:
    java.lang.String infoPlistTmpl -> infoPlistTmpl
    java.lang.String podSpecTmpl -> podSpecTmpl
    java.lang.String pubSpecTmpl -> pubSpecTmpl
    java.lang.String getBuildGradleTmpl() -> getBuildGradleTmpl
    void process() -> process
    void <init>() -> <init>
me.yohom.fluttify.task.TweakDefaultProject$process$5 -> me.yohom.fluttify.task.ab:
    me.yohom.fluttify.task.TweakDefaultProject$process$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.TweakDefaultProject$process$6 -> me.yohom.fluttify.task.ac:
    me.yohom.fluttify.task.TweakDefaultProject$process$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.TweakDefaultProject$process$7 -> me.yohom.fluttify.task.ad:
    me.yohom.fluttify.task.TweakDefaultProject$process$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.UnzipArchive -> me.yohom.fluttify.task.UnzipArchive:
    java.io.File unzippedJarDir -> unzippedJarDir
    java.io.File getUnzippedJarDir() -> getUnzippedJarDir
    void setUnzippedJarDir(java.io.File) -> setUnzippedJarDir
    void unzip() -> unzip
    void <init>() -> <init>
me.yohom.fluttify.task.UnzipArchive$sam$i$java_util_function_Consumer$0 -> me.yohom.fluttify.task.UnzipArchive$sam$i$java_util_function_Consumer$0:
    kotlin.jvm.functions.Function1 function -> function
    void <init>(kotlin.jvm.functions.Function1) -> <init>
    void accept(java.lang.Object) -> accept
me.yohom.fluttify.task.UnzipArchive$unzip$1$1 -> me.yohom.fluttify.task.ae:
    me.yohom.fluttify.task.UnzipArchive$unzip$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.lang.Object) -> b
    kotlin.reflect.KDeclarationContainer getOwner() -> a
    java.lang.String getName() -> b
    java.lang.String getSignature() -> c
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.UnzipArchive$unzip$1$2 -> me.yohom.fluttify.task.af:
    me.yohom.fluttify.task.UnzipArchive$unzip$1$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.lang.Object) -> b
    kotlin.reflect.KDeclarationContainer getOwner() -> a
    java.lang.String getName() -> b
    java.lang.String getSignature() -> c
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.UnzipArchive$unzip$1$3 -> me.yohom.fluttify.task.ag:
    me.yohom.fluttify.task.UnzipArchive$unzip$1$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.lang.Object) -> b
    kotlin.reflect.KDeclarationContainer getOwner() -> a
    java.lang.String getName() -> b
    java.lang.String getSignature() -> c
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.task.UnzipArchive$unzip$1$5$1 -> me.yohom.fluttify.task.ah:
    me.yohom.fluttify.task.UnzipArchive$unzip$1$5$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    void invoke(java.lang.Object) -> b
    kotlin.reflect.KDeclarationContainer getOwner() -> a
    java.lang.String getName() -> b
    java.lang.String getSignature() -> c
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.common.getter.GetterTmplKt -> me.yohom.fluttify.tmpl.dart.type.common.getter.GetterTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String GetterTmpl(me.yohom.fluttify.model.Field) -> GetterTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.common.invoke.InvokeTmplKt -> me.yohom.fluttify.tmpl.dart.type.common.invoke.InvokeTmplKt:
    java.lang.String InvokeTmpl(me.yohom.fluttify.model.Method) -> InvokeTmpl
me.yohom.fluttify.tmpl.dart.type.common.invoke.InvokeTmplKt$InvokeTmpl$1 -> me.yohom.fluttify.tmpl.dart.type.common.invoke.a:
    me.yohom.fluttify.model.Method $method -> a
    java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.String invoke(boolean,java.lang.String,java.util.List) -> a
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.dart.type.common.invoke.InvokeTmplKt$InvokeTmpl$1$actualParams$3 -> me.yohom.fluttify.tmpl.dart.type.common.invoke.b:
    me.yohom.fluttify.tmpl.dart.type.common.invoke.InvokeTmplKt$InvokeTmpl$1$actualParams$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.common.log.LogTmplKt -> me.yohom.fluttify.tmpl.dart.type.common.log.LogTmplKt:
    java.lang.String LogTmpl(me.yohom.fluttify.model.Method) -> LogTmpl
me.yohom.fluttify.tmpl.dart.type.common.return.ReturnTmplKt -> me.yohom.fluttify.tmpl.dart.type.common.return.ReturnTmplKt:
    java.lang.String ReturnTmpl(me.yohom.fluttify.model.Method) -> ReturnTmpl
me.yohom.fluttify.tmpl.dart.type.common.setter.SetterTmplKt -> me.yohom.fluttify.tmpl.dart.type.common.setter.SetterTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String SetterTmpl(me.yohom.fluttify.model.Field) -> SetterTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_enum.TypeEnumTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_enum.TypeEnumTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String TypeEnumTmpl(me.yohom.fluttify.model.Type) -> TypeEnumTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_functions.TypeFunctionsTmpl -> me.yohom.fluttify.tmpl.dart.type.type_functions.TypeFunctionsTmpl:
    java.lang.String tmpl -> tmpl
    java.util.List functions -> functions
    java.lang.String dartFunctions() -> dartFunctions
    void <init>(java.util.List) -> <init>
me.yohom.fluttify.tmpl.dart.type.type_functions.TypeFunctionsTmpl$dartFunctions$1 -> me.yohom.fluttify.tmpl.dart.type.type_functions.a:
    me.yohom.fluttify.tmpl.dart.type.type_functions.TypeFunctionsTmpl$dartFunctions$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_functions.function.TypeFunctionTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_functions.function.TypeFunctionTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String TypeFunctionTmpl(me.yohom.fluttify.model.Type) -> TypeFunctionTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_functions.function.TypeFunctionTmplKt$TypeFunctionTmpl$formalParams$1 -> me.yohom.fluttify.tmpl.dart.type.type_functions.function.a:
    me.yohom.fluttify.tmpl.dart.type.type_functions.function.TypeFunctionTmplKt$TypeFunctionTmpl$formalParams$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_interface.TypeInterfaceTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_interface.TypeInterfaceTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String TypeInterfaceTmpl(me.yohom.fluttify.model.Type) -> TypeInterfaceTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_interface.TypeInterfaceTmplKt$TypeInterfaceTmpl$1 -> me.yohom.fluttify.tmpl.dart.type.type_interface.a:
    me.yohom.fluttify.tmpl.dart.type.type_interface.TypeInterfaceTmplKt$TypeInterfaceTmpl$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_interface.interface_method.InterfaceMethodTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_interface.interface_method.InterfaceMethodTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String InterfaceMethodTmpl(me.yohom.fluttify.model.Method) -> InterfaceMethodTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_interface.interface_method.InterfaceMethodTmplKt$InterfaceMethodTmpl$callbackPool$2 -> me.yohom.fluttify.tmpl.dart.type.type_interface.interface_method.a:
    me.yohom.fluttify.tmpl.dart.type.type_interface.interface_method.InterfaceMethodTmplKt$InterfaceMethodTmpl$callbackPool$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_interface.interface_method.InterfaceMethodTmplKt$InterfaceMethodTmpl$formalParams$1 -> me.yohom.fluttify.tmpl.dart.type.type_interface.interface_method.b:
    me.yohom.fluttify.tmpl.dart.type.type_interface.interface_method.InterfaceMethodTmplKt$InterfaceMethodTmpl$formalParams$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_ref.type_cast.TypeCastTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_ref.type_cast.TypeCastTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String TypeCastTmpl(me.yohom.fluttify.model.Type) -> TypeCastTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_ref.type_check.TypeCheckTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_ref.type_check.TypeCheckTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String TypeCheckTmpl(me.yohom.fluttify.model.Type) -> TypeCheckTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.TypeSdkTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.TypeSdkTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String TypeSdkTmpl(me.yohom.fluttify.model.Type) -> TypeSdkTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.TypeSdkTmplKt$TypeSdkTmpl$1 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.a:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.TypeSdkTmplKt$TypeSdkTmpl$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Field) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.TypeSdkTmplKt$TypeSdkTmpl$mixins$1 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.b:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.TypeSdkTmplKt$TypeSdkTmpl$mixins$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(java.lang.String) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_method.CallbackMethodTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_method.CallbackMethodTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackMethodTmpl(me.yohom.fluttify.model.Method) -> CallbackMethodTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$callbackDelegateCases$1$1$1 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_method.a:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$callbackDelegateCases$1$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$callbackDelegateCases$1$2 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_method.b:
    me.yohom.fluttify.model.Parameter $param -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Method) -> a
    void <init>(me.yohom.fluttify.model.Parameter) -> <init>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_setter.CallbackSetterTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_setter.CallbackSetterTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackSetterTmpl(me.yohom.fluttify.model.Field) -> CallbackSetterTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_setter.CallbackSetterTmplKt$CallbackSetterTmpl$callbackDelegateCases$1$1 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_setter.a:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_setter.CallbackSetterTmplKt$CallbackSetterTmpl$callbackDelegateCases$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_setter.CallbackSetterTmplKt$CallbackSetterTmpl$callbackDelegateCases$2 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.callback_setter.b:
    me.yohom.fluttify.model.Field $field -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Method) -> a
    void <init>(me.yohom.fluttify.model.Field) -> <init>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_delegate.CallbackCaseDelegateTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_delegate.CallbackCaseDelegateTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackCaseDelegateTmpl(me.yohom.fluttify.model.Method,java.lang.String) -> CallbackCaseDelegateTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_delegate.CallbackCaseDelegateTmplKt$CallbackCaseDelegateTmpl$callbackArgs$1 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_delegate.a:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_delegate.CallbackCaseDelegateTmplKt$CallbackCaseDelegateTmpl$callbackArgs$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_lambda.CallbackCaseLambdaTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_lambda.CallbackCaseLambdaTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackCaseLambdaTmpl(me.yohom.fluttify.model.Parameter) -> CallbackCaseLambdaTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_lambda.CallbackCaseLambdaTmplKt$CallbackCaseLambdaTmpl$callbackArgs$1 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_lambda.a:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.callback_case_lambda.CallbackCaseLambdaTmplKt$CallbackCaseLambdaTmpl$callbackArgs$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.common.callback_case_arg.callback_case_arg_enum.CallbackCaseArgEnumTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.common.callback_case_arg.callback_case_arg_enum.CallbackCaseArgEnumTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackCaseArgEnumTmpl(me.yohom.fluttify.model.Parameter) -> CallbackCaseArgEnumTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.common.callback_case_arg.callback_case_arg_jsonable.CallbackCaseArgJsonableTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.common.callback_case_arg.callback_case_arg_jsonable.CallbackCaseArgJsonableTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackCaseArgJsonableTmpl(me.yohom.fluttify.model.Parameter) -> CallbackCaseArgJsonableTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.common.callback_case_arg.callback_case_arg_list.CallbackCaseArgListTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.common.callback_case_arg.callback_case_arg_list.CallbackCaseArgListTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackCaseArgListTmpl(me.yohom.fluttify.model.Parameter) -> CallbackCaseArgListTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.common.callback_case_arg.callback_case_arg_ref.CallbackCaseArgRefTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.callback.common.callback_case.common.callback_case_arg.callback_case_arg_ref.CallbackCaseArgRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackCaseArgRefTmpl(me.yohom.fluttify.model.Parameter) -> CallbackCaseArgRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultEnumTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultEnumTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultEnumTmpl(java.lang.String) -> ResultEnumTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultJsonableTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultJsonableTmplKt:
    java.lang.String ResultJsonableTmpl(java.lang.String,me.yohom.fluttify.model.Platform) -> ResultJsonableTmpl
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultListTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultListTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultListTmpl(java.lang.String,me.yohom.fluttify.model.Platform) -> ResultListTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultRefTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultRefTmpl(java.lang.String) -> ResultRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultVoidTmplKt -> me.yohom.fluttify.tmpl.dart.type.type_sdk.common.result.ResultVoidTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultVoidTmpl() -> ResultVoidTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl -> me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Type type -> type
    java.util.List dartCreator() -> dartCreator
    void <init>(me.yohom.fluttify.model.Type) -> <init>
me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$WhenMappings -> me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$dartCreator$1$1 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.a:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$dartCreator$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$dartCreator$1$2 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.b:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$dartCreator$1$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$dartCreator$1$3 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.c:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$dartCreator$1$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$dartCreator$1$5 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.d:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.creator.CreatorTmpl$dartCreator$1$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.type.type_sdk.method.MethodTmpl -> me.yohom.fluttify.tmpl.dart.type.type_sdk.method.MethodTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String dartMethod() -> dartMethod
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.dart.type.type_sdk.method.MethodTmpl$dartMethod$formalParams$1 -> me.yohom.fluttify.tmpl.dart.type.type_sdk.method.a:
    me.yohom.fluttify.tmpl.dart.type.type_sdk.method.MethodTmpl$dartMethod$formalParams$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.view.android_view.AndroidViewTmplKt -> me.yohom.fluttify.tmpl.dart.view.android_view.AndroidViewTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String AndroidViewTmpl(me.yohom.fluttify.model.Type) -> AndroidViewTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.view.android_view.AndroidViewTmplKt$AndroidViewTmpl$creationArgs$2 -> me.yohom.fluttify.tmpl.dart.view.android_view.a:
    me.yohom.fluttify.tmpl.dart.view.android_view.AndroidViewTmplKt$AndroidViewTmpl$creationArgs$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.view.android_view.AndroidViewTmplKt$AndroidViewTmpl$fields$1 -> me.yohom.fluttify.tmpl.dart.view.android_view.b:
    me.yohom.fluttify.tmpl.dart.view.android_view.AndroidViewTmplKt$AndroidViewTmpl$fields$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.view.android_view.AndroidViewTmplKt$AndroidViewTmpl$params$1 -> me.yohom.fluttify.tmpl.dart.view.android_view.c:
    me.yohom.fluttify.tmpl.dart.view.android_view.AndroidViewTmplKt$AndroidViewTmpl$params$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.dart.view.uikit_view.UiKitViewTmplKt -> me.yohom.fluttify.tmpl.dart.view.uikit_view.UiKitViewTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String UiKitViewTmpl(me.yohom.fluttify.model.Type) -> UiKitViewTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.arg.ArgEnumTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.arg.ArgEnumTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgEnumTmpl(me.yohom.fluttify.model.Variable) -> ArgEnumTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.arg.ArgJsonableTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.arg.ArgJsonableTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgJsonableTmpl(me.yohom.fluttify.model.Variable) -> ArgJsonableTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.arg.ArgListTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.arg.ArgListTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgListTmpl(me.yohom.fluttify.model.Variable) -> ArgListTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.arg.ArgRefTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.arg.ArgRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgRefTmpl(me.yohom.fluttify.model.Variable) -> ArgRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.CallbackTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.CallbackTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackTmpl(me.yohom.fluttify.model.Method,me.yohom.fluttify.model.Type) -> CallbackTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.CallbackTmplKt$CallbackTmpl$1 -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.a:
    me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.CallbackTmplKt$CallbackTmpl$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackMethodTmpl(me.yohom.fluttify.model.Method) -> CallbackMethodTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$callbackArgs$1 -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.a:
    me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$callbackArgs$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$formalParams$2 -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.b:
    me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$formalParams$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$localArgs$1 -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.c:
    me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$localArgs$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$logArgs$3 -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.d:
    me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$logArgs$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$WhenMappings -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmplKt$WhenMappings:
    int[] $EnumSwitchMapping$0 -> $EnumSwitchMapping$0
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_enum.CallbackArgEnumTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_enum.CallbackArgEnumTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgEnumTmpl(me.yohom.fluttify.model.Parameter) -> CallbackArgEnumTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_jsonable.CallbackArgJsonableTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_jsonable.CallbackArgJsonableTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgJsonableTmpl(me.yohom.fluttify.model.Parameter) -> CallbackArgJsonableTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_list.CallbackArgListTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_list.CallbackArgListTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgListTmpl(me.yohom.fluttify.model.Parameter) -> CallbackArgListTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_ref.CallbackArgRefTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_ref.CallbackArgRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgRefTmpl(me.yohom.fluttify.model.Parameter) -> CallbackArgRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_return.CallbackReturnTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.common.callback.callback_method.callback_return.CallbackReturnTmplKt:
    java.lang.String CallbackReturnTmpl(me.yohom.fluttify.model.Method) -> CallbackReturnTmpl
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.invoke_return.InvokeReturnTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.invoke_return.InvokeReturnTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String InvokeReturnTmpl(me.yohom.fluttify.model.Method) -> InvokeReturnTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.invoke_return.InvokeReturnTmplKt$InvokeReturnTmpl$1 -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.invoke_return.a:
    me.yohom.fluttify.model.Method $method -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.invoke_void.InvokeVoidTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.invoke_void.InvokeVoidTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String InvokeVoidTmpl(me.yohom.fluttify.model.Method) -> InvokeVoidTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.invoke.invoke_void.InvokeVoidTmplKt$InvokeVoidTmpl$1 -> me.yohom.fluttify.tmpl.java.common.handler.common.invoke.invoke_void.a:
    me.yohom.fluttify.model.Method $method -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.java.common.handler.common.log.LogInstanceTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.log.LogInstanceTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String LogInstanceTmpl(me.yohom.fluttify.model.Method) -> LogInstanceTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.log.LogInstanceTmplKt$LogInstanceTmpl$args$3 -> me.yohom.fluttify.tmpl.java.common.handler.common.log.a:
    me.yohom.fluttify.tmpl.java.common.handler.common.log.LogInstanceTmplKt$LogInstanceTmpl$args$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.log.LogStaticTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.log.LogStaticTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String LogStaticTmpl(me.yohom.fluttify.model.Method) -> LogStaticTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.log.LogStaticTmplKt$LogStaticTmpl$args$3 -> me.yohom.fluttify.tmpl.java.common.handler.common.log.b:
    me.yohom.fluttify.tmpl.java.common.handler.common.log.LogStaticTmplKt$LogStaticTmpl$args$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.ref.RefTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.ref.RefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String RefTmpl(me.yohom.fluttify.model.Method) -> RefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.result.result_jsonable.ResultJsonableTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.result.result_jsonable.ResultJsonableTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultJsonableTmpl(java.lang.String) -> ResultJsonableTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.result.result_list.ResultListTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.result.result_list.ResultListTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultListTmpl(java.lang.String) -> ResultListTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.result.result_ref.ResultRefTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.result.result_ref.ResultRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultRefTmpl() -> ResultRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.common.result.result_void.ResultVoidTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.common.result.result_void.ResultVoidTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultVoidTmpl() -> ResultVoidTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_getter.HandlerGetterTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.handler_getter.HandlerGetterTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerGetterTmpl(me.yohom.fluttify.model.Field) -> HandlerGetterTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_method.HandlerMethodTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.handler_method.HandlerMethodTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerMethodTmpl(me.yohom.fluttify.model.Method) -> HandlerMethodTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_method.HandlerMethodTmplKt$HandlerMethodTmpl$args$2 -> me.yohom.fluttify.tmpl.java.common.handler.handler_method.a:
    me.yohom.fluttify.tmpl.java.common.handler.handler_method.HandlerMethodTmplKt$HandlerMethodTmpl$args$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.HandlerObjectFactoryTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.HandlerObjectFactoryTmplKt:
    java.lang.String tmpl -> tmpl
    java.util.List HandlerObjectFactoryTmpl(me.yohom.fluttify.model.Type) -> HandlerObjectFactoryTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.HandlerObjectFactoryTmplKt$HandlerObjectFactoryTmpl$1$args$2 -> me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.a:
    me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.HandlerObjectFactoryTmplKt$HandlerObjectFactoryTmpl$1$args$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.HandlerObjectFactoryTmplKt$HandlerObjectFactoryTmpl$1$argsValue$1 -> me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.b:
    me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.HandlerObjectFactoryTmplKt$HandlerObjectFactoryTmpl$1$argsValue$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.HandlerObjectFactoryTmplKt$HandlerObjectFactoryTmpl$1$creatorName$1 -> me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.c:
    me.yohom.fluttify.tmpl.java.common.handler.handler_object_factory.HandlerObjectFactoryTmplKt$HandlerObjectFactoryTmpl$1$creatorName$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_setter.HandlerSetterTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.handler_setter.HandlerSetterTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerSetterTmpl(me.yohom.fluttify.model.Field) -> HandlerSetterTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_type_cast.HandlerTypeCastTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.handler_type_cast.HandlerTypeCastTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerTypeCastTmpl(me.yohom.fluttify.model.Method) -> HandlerTypeCastTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.common.handler.handler_type_check.HandlerTypeCheckTmplKt -> me.yohom.fluttify.tmpl.java.common.handler.handler_type_check.HandlerTypeCheckTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerTypeCheckTmpl(me.yohom.fluttify.model.Method) -> HandlerTypeCheckTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.platform_view_factory.PlatformViewFactoryTmplKt -> me.yohom.fluttify.tmpl.java.platform_view_factory.PlatformViewFactoryTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String PlatformViewFactoryTmpl(me.yohom.fluttify.model.Type) -> PlatformViewFactoryTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$args$1 -> me.yohom.fluttify.tmpl.java.platform_view_factory.a:
    me.yohom.fluttify.tmpl.java.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$args$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$creationArgs$1 -> me.yohom.fluttify.tmpl.java.platform_view_factory.b:
    me.yohom.fluttify.tmpl.java.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$creationArgs$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$handlers$1 -> me.yohom.fluttify.tmpl.java.platform_view_factory.c:
    me.yohom.fluttify.tmpl.java.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$handlers$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.plugin.JavaPluginTmplKt -> me.yohom.fluttify.tmpl.java.plugin.JavaPluginTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String JavaPluginTmpl(me.yohom.fluttify.model.Lib) -> JavaPluginTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.plugin.JavaPluginTmplKt$JavaPluginTmpl$registerPlatformViews$2 -> me.yohom.fluttify.tmpl.java.plugin.a:
    me.yohom.fluttify.tmpl.java.plugin.JavaPluginTmplKt$JavaPluginTmpl$registerPlatformViews$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.java.plugin.register_platform_view.RegisterPlatformViewTmplKt -> me.yohom.fluttify.tmpl.java.plugin.register_platform_view.RegisterPlatformViewTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String RegisterPlatformViewTmpl(me.yohom.fluttify.model.Type) -> RegisterPlatformViewTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.arg.ArgEnumTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.arg.ArgEnumTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Variable variable -> variable
    java.lang.String kotlinArgEnum() -> kotlinArgEnum
    void <init>(me.yohom.fluttify.model.Variable) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.arg.ArgJsonableTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.arg.ArgJsonableTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Variable variable -> variable
    java.lang.String kotlinArgJsonable() -> kotlinArgJsonable
    void <init>(me.yohom.fluttify.model.Variable) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.arg.ArgListTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.arg.ArgListTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Variable variable -> variable
    java.lang.String kotlinArgList() -> kotlinArgList
    void <init>(me.yohom.fluttify.model.Variable) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.arg.ArgRefTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.arg.ArgRefTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Variable variable -> variable
    java.lang.String kotlinArgRef() -> kotlinArgRef
    void <init>(me.yohom.fluttify.model.Variable) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.CallbackTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.CallbackTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method callerMethod -> callerMethod
    me.yohom.fluttify.model.Type callbackType -> callbackType
    java.lang.String kotlinCallback() -> kotlinCallback
    void <init>(me.yohom.fluttify.model.Method,me.yohom.fluttify.model.Type) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.CallbackTmpl$kotlinCallback$1 -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.a:
    me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.CallbackTmpl$kotlinCallback$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinCallbackMethod() -> kotlinCallbackMethod
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmpl$kotlinCallbackMethod$callbackArgs$1 -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.a:
    me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmpl$kotlinCallbackMethod$callbackArgs$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmpl$kotlinCallbackMethod$formalParams$1 -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.b:
    me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmpl$kotlinCallbackMethod$formalParams$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmpl$kotlinCallbackMethod$localArgs$1 -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.c:
    me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.CallbackMethodTmpl$kotlinCallbackMethod$localArgs$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_enum.CallbackArgEnumTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_enum.CallbackArgEnumTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Parameter param -> param
    java.lang.String kotlinCallbackArgEnum() -> kotlinCallbackArgEnum
    void <init>(me.yohom.fluttify.model.Parameter) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_jsonable.CallbackArgJsonableTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_jsonable.CallbackArgJsonableTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Parameter param -> param
    java.lang.String kotlinCallbackArgJsonable() -> kotlinCallbackArgJsonable
    void <init>(me.yohom.fluttify.model.Parameter) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_list.CallbackArgListTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_list.CallbackArgListTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Parameter param -> param
    java.lang.String kotlinCallbackArgList() -> kotlinCallbackArgList
    void <init>(me.yohom.fluttify.model.Parameter) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_ref.CallbackArgRefTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_arg.callback_arg_ref.CallbackArgRefTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Parameter param -> param
    java.lang.String kotlinCallbackArgRef() -> kotlinCallbackArgRef
    void <init>(me.yohom.fluttify.model.Parameter) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_return.CallbackReturnTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.common.callback.callback_method.callback_return.CallbackReturnTmpl:
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinCallbackReturn() -> kotlinCallbackReturn
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_return.InvokeReturnTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_return.InvokeReturnTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinInvokeReturn() -> kotlinInvokeReturn
    java.lang.String var2formalParam(me.yohom.fluttify.model.Variable) -> var2formalParam
    void <init>(me.yohom.fluttify.model.Method) -> <init>
    java.lang.String access$var2formalParam(me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_return.InvokeReturnTmpl,me.yohom.fluttify.model.Variable) -> access$var2formalParam
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_return.InvokeReturnTmpl$kotlinInvokeReturn$1 -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_return.a:
    me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_return.InvokeReturnTmpl this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>(me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_return.InvokeReturnTmpl) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_void.InvokeVoidTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_void.InvokeVoidTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinInvokeVoid() -> kotlinInvokeVoid
    java.lang.String var2formalParam(me.yohom.fluttify.model.Variable) -> var2formalParam
    void <init>(me.yohom.fluttify.model.Method) -> <init>
    java.lang.String access$var2formalParam(me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_void.InvokeVoidTmpl,me.yohom.fluttify.model.Variable) -> access$var2formalParam
me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_void.InvokeVoidTmpl$kotlinInvokeVoid$1 -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_void.a:
    me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_void.InvokeVoidTmpl this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>(me.yohom.fluttify.tmpl.kotlin.common.handler.common.invoke.invoke_void.InvokeVoidTmpl) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.LogInstanceTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.LogInstanceTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinLogInstance() -> kotlinLogInstance
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.LogInstanceTmpl$kotlinLogInstance$args$2 -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.a:
    me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.LogInstanceTmpl$kotlinLogInstance$args$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.LogStaticTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.LogStaticTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinLogStatic() -> kotlinLogStatic
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.LogStaticTmpl$kotlinLogStatic$args$2 -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.b:
    me.yohom.fluttify.tmpl.kotlin.common.handler.common.log.LogStaticTmpl$kotlinLogStatic$args$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.ref.RefTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.ref.RefTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinRef() -> kotlinRef
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.result.result_jsonable.ResultJsonableTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.result.result_jsonable.ResultJsonableTmpl:
    java.lang.String tmpl -> tmpl
    java.lang.String kotlinJsonableResult() -> kotlinJsonableResult
    void <init>() -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.result.result_list.ResultListTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.result.result_list.ResultListTmpl:
    java.lang.String tmpl -> tmpl
    java.lang.String kotlinListResult() -> kotlinListResult
    void <init>() -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.result.result_ref.ResultRefTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.result.result_ref.ResultRefTmpl:
    java.lang.String tmpl -> tmpl
    java.lang.String kotlinRefResult() -> kotlinRefResult
    void <init>() -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.common.result.result_void.ResultVoidTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.common.result.result_void.ResultVoidTmpl:
    java.lang.String tmpl -> tmpl
    java.lang.String kotlinVoidResult() -> kotlinVoidResult
    void <init>() -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_getter.HandlerGetterTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_getter.HandlerGetterTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Field field -> field
    java.lang.String kotlinGetter() -> kotlinGetter
    void <init>(me.yohom.fluttify.model.Field) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_method.HandlerMethodTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_method.HandlerMethodTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinHandlerMethod() -> kotlinHandlerMethod
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_method.HandlerMethodTmpl$kotlinHandlerMethod$args$2 -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_method.a:
    me.yohom.fluttify.tmpl.kotlin.common.handler.handler_method.HandlerMethodTmpl$kotlinHandlerMethod$args$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.HandlerObjectFactoryTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.HandlerObjectFactoryTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Type type -> type
    java.util.List kotlinObjectFactory() -> kotlinObjectFactory
    void <init>(me.yohom.fluttify.model.Type) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.HandlerObjectFactoryTmpl$kotlinObjectFactory$1$args$2 -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.a:
    me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.HandlerObjectFactoryTmpl$kotlinObjectFactory$1$args$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.HandlerObjectFactoryTmpl$kotlinObjectFactory$1$argsValue$1 -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.b:
    me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.HandlerObjectFactoryTmpl$kotlinObjectFactory$1$argsValue$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.HandlerObjectFactoryTmpl$kotlinObjectFactory$1$creatorName$1 -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.c:
    me.yohom.fluttify.tmpl.kotlin.common.handler.handler_object_factory.HandlerObjectFactoryTmpl$kotlinObjectFactory$1$creatorName$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_setter.HandlerSetterTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_setter.HandlerSetterTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Field field -> field
    java.lang.String kotlinSetter() -> kotlinSetter
    void <init>(me.yohom.fluttify.model.Field) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_type_cast.HandlerTypeCastTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_type_cast.HandlerTypeCastTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinTypeCast() -> kotlinTypeCast
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.kotlin.common.handler.handler_type_check.HandlerTypeCheckTmpl -> me.yohom.fluttify.tmpl.kotlin.common.handler.handler_type_check.HandlerTypeCheckTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String kotlinTypeCheck() -> kotlinTypeCheck
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.kotlin.platform_view_factory.PlatformViewFactoryTmpl -> me.yohom.fluttify.tmpl.kotlin.platform_view_factory.PlatformViewFactoryTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Type viewType -> viewType
    java.lang.String kotlinPlatformViewFactory() -> kotlinPlatformViewFactory
    void <init>(me.yohom.fluttify.model.Type) -> <init>
me.yohom.fluttify.tmpl.kotlin.platform_view_factory.PlatformViewFactoryTmpl$kotlinPlatformViewFactory$handlers$1 -> me.yohom.fluttify.tmpl.kotlin.platform_view_factory.a:
    me.yohom.fluttify.tmpl.kotlin.platform_view_factory.PlatformViewFactoryTmpl$kotlinPlatformViewFactory$handlers$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.plugin.KotlinPluginTmpl -> me.yohom.fluttify.tmpl.kotlin.plugin.KotlinPluginTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Lib lib -> lib
    java.lang.String kotlinPlugin() -> kotlinPlugin
    void <init>(me.yohom.fluttify.model.Lib) -> <init>
me.yohom.fluttify.tmpl.kotlin.plugin.KotlinPluginTmpl$kotlinPlugin$registerPlatformViews$2 -> me.yohom.fluttify.tmpl.kotlin.plugin.a:
    me.yohom.fluttify.tmpl.kotlin.plugin.KotlinPluginTmpl$kotlinPlugin$registerPlatformViews$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.kotlin.plugin.register_platform_view.RegisterPlatformViewTmpl -> me.yohom.fluttify.tmpl.kotlin.plugin.register_platform_view.RegisterPlatformViewTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Type viewType -> viewType
    me.yohom.fluttify.FluttifyExtension ext -> ext
    java.lang.String kotlinRegisterPlatformView() -> kotlinRegisterPlatformView
    void <init>(me.yohom.fluttify.model.Type,me.yohom.fluttify.FluttifyExtension) -> <init>
me.yohom.fluttify.tmpl.objc.common.callback.callback_lambda.CallbackLambdaTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.callback_lambda.CallbackLambdaTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackLambdaTmpl(me.yohom.fluttify.model.Method,me.yohom.fluttify.model.Type) -> CallbackLambdaTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.callback_lambda.CallbackLambdaTmplKt$CallbackLambdaTmpl$formalParams$1 -> me.yohom.fluttify.tmpl.objc.common.callback.callback_lambda.a:
    me.yohom.fluttify.tmpl.objc.common.callback.callback_lambda.CallbackLambdaTmplKt$CallbackLambdaTmpl$formalParams$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.callback_lambda.CallbackLambdaTmplKt$CallbackLambdaTmpl$localArgs$2 -> me.yohom.fluttify.tmpl.objc.common.callback.callback_lambda.b:
    me.yohom.fluttify.tmpl.objc.common.callback.callback_lambda.CallbackLambdaTmplKt$CallbackLambdaTmpl$localArgs$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.callback_method.CallbackMethodTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.callback_method.CallbackMethodTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackMethodTmpl(me.yohom.fluttify.model.Method) -> CallbackMethodTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$formalParams$1 -> me.yohom.fluttify.tmpl.objc.common.callback.callback_method.a:
    me.yohom.fluttify.tmpl.objc.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$formalParams$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$localArgs$2 -> me.yohom.fluttify.tmpl.objc.common.callback.callback_method.b:
    me.yohom.fluttify.tmpl.objc.common.callback.callback_method.CallbackMethodTmplKt$CallbackMethodTmpl$localArgs$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Variable) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_ctype.CallbackArgValueTypeTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_ctype.CallbackArgValueTypeTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgValueTypeTmpl(me.yohom.fluttify.model.Variable) -> CallbackArgValueTypeTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_enum.CallbackArgEnumTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_enum.CallbackArgEnumTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgEnumTmpl(me.yohom.fluttify.model.Variable) -> CallbackArgEnumTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_jsonable.CallbackArgJsonableTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_jsonable.CallbackArgJsonableTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgJsonableTmpl(me.yohom.fluttify.model.Variable) -> CallbackArgJsonableTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_list.CallbackArgListTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_list.CallbackArgListTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgListTmpl(me.yohom.fluttify.model.Variable) -> CallbackArgListTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_ref.CallbackArgRefTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_ref.CallbackArgRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgRefTmpl(me.yohom.fluttify.model.Variable) -> CallbackArgRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_struct.CallbackArgStructTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_arg.callback_arg_struct.CallbackArgStructTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackArgStructTmpl(me.yohom.fluttify.model.Variable) -> CallbackArgStructTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_return.CallbackReturnTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_return.CallbackReturnTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackReturnTmpl(me.yohom.fluttify.model.Method) -> CallbackReturnTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_return.callback_return_jsonable.CallbackReturnJsonableTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_return.callback_return_jsonable.CallbackReturnJsonableTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackReturnJsonableTmpl(me.yohom.fluttify.model.Method) -> CallbackReturnJsonableTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_return.callback_return_ref.CallbackReturnRefTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_return.callback_return_ref.CallbackReturnRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackReturnRefTmpl(me.yohom.fluttify.model.Method) -> CallbackReturnRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_return.callback_return_struct.CallbackReturnStructTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_return.callback_return_struct.CallbackReturnStructTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackReturnStructTmpl(me.yohom.fluttify.model.Method) -> CallbackReturnStructTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_void.CallbackVoidTmplKt -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_void.CallbackVoidTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String CallbackVoidTmpl(me.yohom.fluttify.model.Method) -> CallbackVoidTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_void.CallbackVoidTmplKt$CallbackVoidTmpl$callbackArgs$1 -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_void.a:
    me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_void.CallbackVoidTmplKt$CallbackVoidTmpl$callbackArgs$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_void.CallbackVoidTmplKt$CallbackVoidTmpl$callbackMethod$1$1 -> me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_void.b:
    me.yohom.fluttify.tmpl.objc.common.callback.common.callback_invoke.callback_void.CallbackVoidTmplKt$CallbackVoidTmpl$callbackMethod$1$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_enum.ArgEnumTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_enum.ArgEnumTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgEnumTmpl(me.yohom.fluttify.model.Variable) -> ArgEnumTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_jsonable.ArgJsonableTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_jsonable.ArgJsonableTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgJsonableTmpl(me.yohom.fluttify.model.Variable) -> ArgJsonableTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_list.arg_list_ref.ArgListRefTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_list.arg_list_ref.ArgListRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgListRefTmpl(me.yohom.fluttify.model.Variable) -> ArgListRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_list.arg_list_struct.ArgListStructTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_list.arg_list_struct.ArgListStructTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgListStructTmpl(me.yohom.fluttify.model.Variable) -> ArgListStructTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_ref.ArgRefTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_ref.ArgRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgRefTmpl(me.yohom.fluttify.model.Variable) -> ArgRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_struct.ArgStructTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.arg.arg_struct.ArgStructTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ArgStructTmpl(me.yohom.fluttify.model.Variable) -> ArgStructTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl -> me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl:
    me.yohom.fluttify.model.Field field -> field
    me.yohom.fluttify.model.Method method -> method
    java.lang.String objcInvoke() -> objcInvoke
    java.lang.String param2arg(me.yohom.fluttify.model.Parameter) -> param2arg
    void <init>(me.yohom.fluttify.model.Field,me.yohom.fluttify.model.Method) -> <init>
    void <init>(me.yohom.fluttify.model.Field) -> <init>
    void <init>(me.yohom.fluttify.model.Method) -> <init>
    java.lang.String access$param2arg(me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl,me.yohom.fluttify.model.Parameter) -> access$param2arg
me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl$objcInvoke$$inlined$run$lambda$1 -> me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.a:
    me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl this$0 -> a
    void <init>(me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl) -> <init>
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl$objcInvoke$$inlined$run$lambda$2 -> me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.b:
    me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl this$0 -> a
    void <init>(me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl) -> <init>
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl$objcInvoke$$inlined$run$lambda$3 -> me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.c:
    me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl this$0 -> a
    void <init>(me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl) -> <init>
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl$objcInvoke$invokeMethod$1$call$1 -> me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.d:
    me.yohom.fluttify.tmpl.objc.common.handler.common.invoke.InvokeTmpl$objcInvoke$invokeMethod$1$call$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.ref.ref_ref.RefRefTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.ref.ref_ref.RefRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String RefRefTmpl(me.yohom.fluttify.model.Method) -> RefRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.ref.struct_ref.StructRefTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.ref.struct_ref.StructRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String StructRefTmpl(me.yohom.fluttify.model.Method) -> StructRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultJsonableTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultJsonableTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultJsonableTmpl() -> ResultJsonableTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultListTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultListTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultListTmpl() -> ResultListTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultRefTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultRefTmpl(java.lang.String) -> ResultRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultStructTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultStructTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultStructTmpl(java.lang.String) -> ResultStructTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultValueTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultValueTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultValueTmpl() -> ResultValueTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultVoidTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.common.result.ResultVoidTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String ResultVoidTmpl() -> ResultVoidTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.handler_getter.HandlerGetterTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.handler_getter.HandlerGetterTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerGetterTmpl(me.yohom.fluttify.model.Field) -> HandlerGetterTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.handler_method.HandlerMethodTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.handler_method.HandlerMethodTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerMethodTmpl(me.yohom.fluttify.model.Method) -> HandlerMethodTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.handler_method.HandlerMethodTmplKt$HandlerMethodTmpl$args$1 -> me.yohom.fluttify.tmpl.objc.common.handler.handler_method.a:
    me.yohom.fluttify.tmpl.objc.common.handler.handler_method.HandlerMethodTmplKt$HandlerMethodTmpl$args$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.handler_object_factory.handler_object_factory_ref.HandlerObjectFactoryRefTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.handler_object_factory.handler_object_factory_ref.HandlerObjectFactoryRefTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerObjectFactoryRefTmpl(me.yohom.fluttify.model.Type) -> HandlerObjectFactoryRefTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.handler_object_factory.handler_object_factory_struct.HandlerObjectFactoryStructTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.handler_object_factory.handler_object_factory_struct.HandlerObjectFactoryStructTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerObjectFactoryStructTmpl(me.yohom.fluttify.model.Type) -> HandlerObjectFactoryStructTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.handler_setter.HandlerSetterTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.handler_setter.HandlerSetterTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerSetterTmpl(me.yohom.fluttify.model.Field) -> HandlerSetterTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.handler_type_cast.HandlerTypeCastTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.handler_type_cast.HandlerTypeCastTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerTypeCastTmpl(me.yohom.fluttify.model.Type) -> HandlerTypeCastTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.handler.handler_type_check.HandlerTypeCheckTmplKt -> me.yohom.fluttify.tmpl.objc.common.handler.handler_type_check.HandlerTypeCheckTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String HandlerTypeCheckTmpl(me.yohom.fluttify.model.Type) -> HandlerTypeCheckTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.nsvalue_struct.nsvalue_to_struct.NSValueToStructTmplKt -> me.yohom.fluttify.tmpl.objc.common.nsvalue_struct.nsvalue_to_struct.NSValueToStructTmplKt:
    java.lang.String hTmpl -> hTmpl
    java.lang.String NSValueToStructTmpl(java.lang.String,java.lang.String) -> NSValueToStructTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.common.nsvalue_struct.struct_to_nsvalue.StructToNSValueTmplKt -> me.yohom.fluttify.tmpl.objc.common.nsvalue_struct.struct_to_nsvalue.StructToNSValueTmplKt:
    java.lang.String hTmpl -> hTmpl
    java.lang.String StructToNSValueTmpl(me.yohom.fluttify.model.Variable) -> StructToNSValueTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt -> me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt:
    java.lang.String hTmpl -> hTmpl
    java.lang.String mTmpl -> mTmpl
    java.util.List PlatformViewFactoryTmpl(me.yohom.fluttify.model.Type,me.yohom.fluttify.model.Lib) -> PlatformViewFactoryTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$delegateMethods$4 -> me.yohom.fluttify.tmpl.objc.platform_view_factory.a:
    me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$delegateMethods$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Method) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$imports$1 -> me.yohom.fluttify.tmpl.objc.platform_view_factory.b:
    me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$imports$1 INSTANCE -> a
    boolean accept(java.io.File,java.lang.String) -> accept
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$imports$2$1 -> me.yohom.fluttify.tmpl.objc.platform_view_factory.c:
    me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$imports$2$1 INSTANCE -> a
    boolean accept(java.io.File,java.lang.String) -> accept
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$imports$3 -> me.yohom.fluttify.tmpl.objc.platform_view_factory.d:
    me.yohom.fluttify.tmpl.objc.platform_view_factory.PlatformViewFactoryTmplKt$PlatformViewFactoryTmpl$imports$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(kotlin.Pair) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt -> me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt:
    java.lang.String hTmpl -> hTmpl
    java.lang.String mTmpl -> mTmpl
    java.util.List ObjcPluginTmpl(java.util.List) -> ObjcPluginTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$imports$1 -> me.yohom.fluttify.tmpl.objc.plugin.a:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$imports$1 INSTANCE -> a
    boolean accept(java.io.File,java.lang.String) -> accept
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$imports$2$1 -> me.yohom.fluttify.tmpl.objc.plugin.b:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$imports$2$1 INSTANCE -> a
    boolean accept(java.io.File,java.lang.String) -> accept
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$registerPlatformViews$4 -> me.yohom.fluttify.tmpl.objc.plugin.c:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$registerPlatformViews$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$2 -> me.yohom.fluttify.tmpl.objc.plugin.d:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$3 -> me.yohom.fluttify.tmpl.objc.plugin.e:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$4 -> me.yohom.fluttify.tmpl.objc.plugin.f:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$5 -> me.yohom.fluttify.tmpl.objc.plugin.g:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$6 -> me.yohom.fluttify.tmpl.objc.plugin.h:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$7 -> me.yohom.fluttify.tmpl.objc.plugin.i:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCastHandlers$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$2 -> me.yohom.fluttify.tmpl.objc.plugin.j:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$3 -> me.yohom.fluttify.tmpl.objc.plugin.k:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$3 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$4 -> me.yohom.fluttify.tmpl.objc.plugin.l:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$4 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$5 -> me.yohom.fluttify.tmpl.objc.plugin.m:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$5 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$6 -> me.yohom.fluttify.tmpl.objc.plugin.n:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$6 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    boolean invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$7 -> me.yohom.fluttify.tmpl.objc.plugin.o:
    me.yohom.fluttify.tmpl.objc.plugin.ObjcPluginTmplKt$ObjcPluginTmpl$typeCheckHandlers$7 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.objc.plugin.register_platform_view.RegisterPlatformViewTmplKt -> me.yohom.fluttify.tmpl.objc.plugin.register_platform_view.RegisterPlatformViewTmplKt:
    java.lang.String tmpl -> tmpl
    java.lang.String RegisterPlatformViewTmpl(me.yohom.fluttify.model.Type) -> RegisterPlatformViewTmpl
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.swift.platformviewfactory.PlatformViewFactoryTmpl -> me.yohom.fluttify.tmpl.swift.platformviewfactory.PlatformViewFactoryTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Type viewType -> viewType
    me.yohom.fluttify.model.Lib lib -> lib
    java.lang.String swiftPlatformViewFactory() -> swiftPlatformViewFactory
    void <init>(me.yohom.fluttify.model.Type,me.yohom.fluttify.model.Lib) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.GetterBranchTmpl -> me.yohom.fluttify.tmpl.swift.plugin.GetterBranchTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Field field -> field
    java.lang.String swiftGetterBranch() -> swiftGetterBranch
    void <init>(me.yohom.fluttify.model.Field) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.MethodBranchTmpl -> me.yohom.fluttify.tmpl.swift.plugin.MethodBranchTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String swiftMethodBranch() -> swiftMethodBranch
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.PluginTmpl -> me.yohom.fluttify.tmpl.swift.plugin.PluginTmpl:
    java.lang.String tmpl -> tmpl
    java.util.List libs -> libs
    me.yohom.fluttify.FluttifyExtension ext -> ext
    java.lang.String swiftPlugin() -> swiftPlugin
    void <init>(java.util.List,me.yohom.fluttify.FluttifyExtension) -> <init>
    me.yohom.fluttify.FluttifyExtension access$getExt$p(me.yohom.fluttify.tmpl.swift.plugin.PluginTmpl) -> access$getExt$p
me.yohom.fluttify.tmpl.swift.plugin.PluginTmpl$swiftPlugin$1 -> me.yohom.fluttify.tmpl.swift.plugin.a:
    me.yohom.fluttify.tmpl.swift.plugin.PluginTmpl$swiftPlugin$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Lib) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.swift.plugin.PluginTmpl$swiftPlugin$registerPlatformViews$3 -> me.yohom.fluttify.tmpl.swift.plugin.b:
    me.yohom.fluttify.tmpl.swift.plugin.PluginTmpl this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Type) -> a
    void <init>(me.yohom.fluttify.tmpl.swift.plugin.PluginTmpl) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.RegisterPlatformViewTmpl -> me.yohom.fluttify.tmpl.swift.plugin.RegisterPlatformViewTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Type viewType -> viewType
    me.yohom.fluttify.FluttifyExtension ext -> ext
    java.lang.String swiftRegisterPlatformView() -> swiftRegisterPlatformView
    void <init>(me.yohom.fluttify.model.Type,me.yohom.fluttify.FluttifyExtension) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.SetterBranchTmpl -> me.yohom.fluttify.tmpl.swift.plugin.SetterBranchTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Field field -> field
    java.lang.String swiftSetterBranch() -> swiftSetterBranch
    void <init>(me.yohom.fluttify.model.Field) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.ArgEnumTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.ArgEnumTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Variable variable -> variable
    java.lang.String swiftArgEnum() -> swiftArgEnum
    void <init>(me.yohom.fluttify.model.Variable) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.ArgJsonableTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.ArgJsonableTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Variable variable -> variable
    java.lang.String swiftArgJsonable() -> swiftArgJsonable
    void <init>(me.yohom.fluttify.model.Variable) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.ArgRefTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.ArgRefTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Variable variable -> variable
    java.lang.String swiftArgRef() -> swiftArgRef
    void <init>(me.yohom.fluttify.model.Variable) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.GetterMethodTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.GetterMethodTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Field field -> field
    java.lang.String swiftGetter() -> swiftGetter
    void <init>(me.yohom.fluttify.model.Field) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.HandleMethodTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.HandleMethodTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String swiftHandlerMethod() -> swiftHandlerMethod
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.HandleMethodTmpl$swiftHandlerMethod$args$2 -> me.yohom.fluttify.tmpl.swift.plugin.handler.a:
    me.yohom.fluttify.tmpl.swift.plugin.handler.HandleMethodTmpl$swiftHandlerMethod$args$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.CharSequence invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.swift.plugin.handler.RefResultTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.RefResultTmpl:
    java.lang.String tmpl -> tmpl
    java.lang.String returnType -> returnType
    java.lang.String swiftRefResult() -> swiftRefResult
    java.lang.String getReturnType() -> getReturnType
    void <init>(java.lang.String) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.RefTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.RefTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method method -> method
    java.lang.String swiftRef() -> swiftRef
    void <init>(me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.SetterMethodTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.SetterMethodTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Field field -> field
    java.lang.String swiftSetter() -> swiftSetter
    void <init>(me.yohom.fluttify.model.Field) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.DelegateMethodTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.DelegateMethodTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method callerMethod -> callerMethod
    me.yohom.fluttify.model.Method callbackMethod -> callbackMethod
    java.lang.String swiftCallbackMethod() -> swiftCallbackMethod
    void <init>(me.yohom.fluttify.model.Method,me.yohom.fluttify.model.Method) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.DelegateMethodTmpl$swiftCallbackMethod$1 -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.a:
    me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.DelegateMethodTmpl$swiftCallbackMethod$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.DelegateMethodTmpl$swiftCallbackMethod$2 -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.b:
    me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.DelegateMethodTmpl$swiftCallbackMethod$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl:
    me.yohom.fluttify.model.Method method -> method
    java.lang.String swiftInvoke() -> swiftInvoke
    java.lang.String var2formalParam(me.yohom.fluttify.model.Parameter) -> var2formalParam
    void <init>(me.yohom.fluttify.model.Method) -> <init>
    java.lang.String access$var2formalParam(me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl,me.yohom.fluttify.model.Parameter) -> access$var2formalParam
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl$swiftInvoke$invoke$1 -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.c:
    me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>(me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl$swiftInvoke$invoke$2 -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.d:
    me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl this$0 -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>(me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.InvokeTmpl) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.LambdaCallbackTmpl -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.LambdaCallbackTmpl:
    java.lang.String tmpl -> tmpl
    me.yohom.fluttify.model.Method callerMethod -> callerMethod
    me.yohom.fluttify.model.Type callbackLambda -> callbackLambda
    java.lang.String swiftCallback() -> swiftCallback
    void <init>(me.yohom.fluttify.model.Method,me.yohom.fluttify.model.Type) -> <init>
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.LambdaCallbackTmpl$swiftCallback$1 -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.e:
    me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.LambdaCallbackTmpl$swiftCallback$1 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.LambdaCallbackTmpl$swiftCallback$2 -> me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.f:
    me.yohom.fluttify.tmpl.swift.plugin.handler.invoke.LambdaCallbackTmpl$swiftCallback$2 INSTANCE -> a
    java.lang.Object invoke(java.lang.Object) -> a
    java.lang.String invoke(me.yohom.fluttify.model.Parameter) -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
parser.dart.Dart2BaseListener -> parser.dart.Dart2BaseListener:
    void <init>() -> <init>
    void enterCompilationUnit(parser.dart.Dart2Parser$CompilationUnitContext) -> enterCompilationUnit
    void exitCompilationUnit(parser.dart.Dart2Parser$CompilationUnitContext) -> exitCompilationUnit
    void enterVariableDeclaration(parser.dart.Dart2Parser$VariableDeclarationContext) -> enterVariableDeclaration
    void exitVariableDeclaration(parser.dart.Dart2Parser$VariableDeclarationContext) -> exitVariableDeclaration
    void enterDeclaredIdentifier(parser.dart.Dart2Parser$DeclaredIdentifierContext) -> enterDeclaredIdentifier
    void exitDeclaredIdentifier(parser.dart.Dart2Parser$DeclaredIdentifierContext) -> exitDeclaredIdentifier
    void enterFinalConstVarOrType(parser.dart.Dart2Parser$FinalConstVarOrTypeContext) -> enterFinalConstVarOrType
    void exitFinalConstVarOrType(parser.dart.Dart2Parser$FinalConstVarOrTypeContext) -> exitFinalConstVarOrType
    void enterVarOrType(parser.dart.Dart2Parser$VarOrTypeContext) -> enterVarOrType
    void exitVarOrType(parser.dart.Dart2Parser$VarOrTypeContext) -> exitVarOrType
    void enterInitializedVariableDeclaration(parser.dart.Dart2Parser$InitializedVariableDeclarationContext) -> enterInitializedVariableDeclaration
    void exitInitializedVariableDeclaration(parser.dart.Dart2Parser$InitializedVariableDeclarationContext) -> exitInitializedVariableDeclaration
    void enterInitializedIdentifier(parser.dart.Dart2Parser$InitializedIdentifierContext) -> enterInitializedIdentifier
    void exitInitializedIdentifier(parser.dart.Dart2Parser$InitializedIdentifierContext) -> exitInitializedIdentifier
    void enterInitializedIdentifierList(parser.dart.Dart2Parser$InitializedIdentifierListContext) -> enterInitializedIdentifierList
    void exitInitializedIdentifierList(parser.dart.Dart2Parser$InitializedIdentifierListContext) -> exitInitializedIdentifierList
    void enterFunctionSignature(parser.dart.Dart2Parser$FunctionSignatureContext) -> enterFunctionSignature
    void exitFunctionSignature(parser.dart.Dart2Parser$FunctionSignatureContext) -> exitFunctionSignature
    void enterFormalParameterPart(parser.dart.Dart2Parser$FormalParameterPartContext) -> enterFormalParameterPart
    void exitFormalParameterPart(parser.dart.Dart2Parser$FormalParameterPartContext) -> exitFormalParameterPart
    void enterReturnType(parser.dart.Dart2Parser$ReturnTypeContext) -> enterReturnType
    void exitReturnType(parser.dart.Dart2Parser$ReturnTypeContext) -> exitReturnType
    void enterFunctionBody(parser.dart.Dart2Parser$FunctionBodyContext) -> enterFunctionBody
    void exitFunctionBody(parser.dart.Dart2Parser$FunctionBodyContext) -> exitFunctionBody
    void enterBlock(parser.dart.Dart2Parser$BlockContext) -> enterBlock
    void exitBlock(parser.dart.Dart2Parser$BlockContext) -> exitBlock
    void enterFormalParameterList(parser.dart.Dart2Parser$FormalParameterListContext) -> enterFormalParameterList
    void exitFormalParameterList(parser.dart.Dart2Parser$FormalParameterListContext) -> exitFormalParameterList
    void enterNormalFormalParameters(parser.dart.Dart2Parser$NormalFormalParametersContext) -> enterNormalFormalParameters
    void exitNormalFormalParameters(parser.dart.Dart2Parser$NormalFormalParametersContext) -> exitNormalFormalParameters
    void enterOptionalFormalParameters(parser.dart.Dart2Parser$OptionalFormalParametersContext) -> enterOptionalFormalParameters
    void exitOptionalFormalParameters(parser.dart.Dart2Parser$OptionalFormalParametersContext) -> exitOptionalFormalParameters
    void enterOptionalPositionalFormalParameters(parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext) -> enterOptionalPositionalFormalParameters
    void exitOptionalPositionalFormalParameters(parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext) -> exitOptionalPositionalFormalParameters
    void enterNamedFormalParameters(parser.dart.Dart2Parser$NamedFormalParametersContext) -> enterNamedFormalParameters
    void exitNamedFormalParameters(parser.dart.Dart2Parser$NamedFormalParametersContext) -> exitNamedFormalParameters
    void enterNormalFormalParameter(parser.dart.Dart2Parser$NormalFormalParameterContext) -> enterNormalFormalParameter
    void exitNormalFormalParameter(parser.dart.Dart2Parser$NormalFormalParameterContext) -> exitNormalFormalParameter
    void enterFunctionFormalParameter(parser.dart.Dart2Parser$FunctionFormalParameterContext) -> enterFunctionFormalParameter
    void exitFunctionFormalParameter(parser.dart.Dart2Parser$FunctionFormalParameterContext) -> exitFunctionFormalParameter
    void enterSimpleFormalParameter(parser.dart.Dart2Parser$SimpleFormalParameterContext) -> enterSimpleFormalParameter
    void exitSimpleFormalParameter(parser.dart.Dart2Parser$SimpleFormalParameterContext) -> exitSimpleFormalParameter
    void enterFieldFormalParameter(parser.dart.Dart2Parser$FieldFormalParameterContext) -> enterFieldFormalParameter
    void exitFieldFormalParameter(parser.dart.Dart2Parser$FieldFormalParameterContext) -> exitFieldFormalParameter
    void enterDefaultFormalParameter(parser.dart.Dart2Parser$DefaultFormalParameterContext) -> enterDefaultFormalParameter
    void exitDefaultFormalParameter(parser.dart.Dart2Parser$DefaultFormalParameterContext) -> exitDefaultFormalParameter
    void enterDefaultNamedParameter(parser.dart.Dart2Parser$DefaultNamedParameterContext) -> enterDefaultNamedParameter
    void exitDefaultNamedParameter(parser.dart.Dart2Parser$DefaultNamedParameterContext) -> exitDefaultNamedParameter
    void enterClassDefinition(parser.dart.Dart2Parser$ClassDefinitionContext) -> enterClassDefinition
    void exitClassDefinition(parser.dart.Dart2Parser$ClassDefinitionContext) -> exitClassDefinition
    void enterMixins(parser.dart.Dart2Parser$MixinsContext) -> enterMixins
    void exitMixins(parser.dart.Dart2Parser$MixinsContext) -> exitMixins
    void enterClassMemberDefinition(parser.dart.Dart2Parser$ClassMemberDefinitionContext) -> enterClassMemberDefinition
    void exitClassMemberDefinition(parser.dart.Dart2Parser$ClassMemberDefinitionContext) -> exitClassMemberDefinition
    void enterMethodSignature(parser.dart.Dart2Parser$MethodSignatureContext) -> enterMethodSignature
    void exitMethodSignature(parser.dart.Dart2Parser$MethodSignatureContext) -> exitMethodSignature
    void enterDeclaration(parser.dart.Dart2Parser$DeclarationContext) -> enterDeclaration
    void exitDeclaration(parser.dart.Dart2Parser$DeclarationContext) -> exitDeclaration
    void enterStaticFinalDeclarationList(parser.dart.Dart2Parser$StaticFinalDeclarationListContext) -> enterStaticFinalDeclarationList
    void exitStaticFinalDeclarationList(parser.dart.Dart2Parser$StaticFinalDeclarationListContext) -> exitStaticFinalDeclarationList
    void enterStaticFinalDeclaration(parser.dart.Dart2Parser$StaticFinalDeclarationContext) -> enterStaticFinalDeclaration
    void exitStaticFinalDeclaration(parser.dart.Dart2Parser$StaticFinalDeclarationContext) -> exitStaticFinalDeclaration
    void enterOperatorSignature(parser.dart.Dart2Parser$OperatorSignatureContext) -> enterOperatorSignature
    void exitOperatorSignature(parser.dart.Dart2Parser$OperatorSignatureContext) -> exitOperatorSignature
    void enterOperator(parser.dart.Dart2Parser$OperatorContext) -> enterOperator
    void exitOperator(parser.dart.Dart2Parser$OperatorContext) -> exitOperator
    void enterBinaryOperator(parser.dart.Dart2Parser$BinaryOperatorContext) -> enterBinaryOperator
    void exitBinaryOperator(parser.dart.Dart2Parser$BinaryOperatorContext) -> exitBinaryOperator
    void enterGetterSignature(parser.dart.Dart2Parser$GetterSignatureContext) -> enterGetterSignature
    void exitGetterSignature(parser.dart.Dart2Parser$GetterSignatureContext) -> exitGetterSignature
    void enterSetterSignature(parser.dart.Dart2Parser$SetterSignatureContext) -> enterSetterSignature
    void exitSetterSignature(parser.dart.Dart2Parser$SetterSignatureContext) -> exitSetterSignature
    void enterConstructorSignature(parser.dart.Dart2Parser$ConstructorSignatureContext) -> enterConstructorSignature
    void exitConstructorSignature(parser.dart.Dart2Parser$ConstructorSignatureContext) -> exitConstructorSignature
    void enterRedirection(parser.dart.Dart2Parser$RedirectionContext) -> enterRedirection
    void exitRedirection(parser.dart.Dart2Parser$RedirectionContext) -> exitRedirection
    void enterInitializers(parser.dart.Dart2Parser$InitializersContext) -> enterInitializers
    void exitInitializers(parser.dart.Dart2Parser$InitializersContext) -> exitInitializers
    void enterInitializerListEntry(parser.dart.Dart2Parser$InitializerListEntryContext) -> enterInitializerListEntry
    void exitInitializerListEntry(parser.dart.Dart2Parser$InitializerListEntryContext) -> exitInitializerListEntry
    void enterFieldInitializer(parser.dart.Dart2Parser$FieldInitializerContext) -> enterFieldInitializer
    void exitFieldInitializer(parser.dart.Dart2Parser$FieldInitializerContext) -> exitFieldInitializer
    void enterFactoryConstructorSignature(parser.dart.Dart2Parser$FactoryConstructorSignatureContext) -> enterFactoryConstructorSignature
    void exitFactoryConstructorSignature(parser.dart.Dart2Parser$FactoryConstructorSignatureContext) -> exitFactoryConstructorSignature
    void enterRedirectingFactoryConstructorSignature(parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext) -> enterRedirectingFactoryConstructorSignature
    void exitRedirectingFactoryConstructorSignature(parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext) -> exitRedirectingFactoryConstructorSignature
    void enterConstantConstructorSignature(parser.dart.Dart2Parser$ConstantConstructorSignatureContext) -> enterConstantConstructorSignature
    void exitConstantConstructorSignature(parser.dart.Dart2Parser$ConstantConstructorSignatureContext) -> exitConstantConstructorSignature
    void enterSuperclass(parser.dart.Dart2Parser$SuperclassContext) -> enterSuperclass
    void exitSuperclass(parser.dart.Dart2Parser$SuperclassContext) -> exitSuperclass
    void enterInterfaces(parser.dart.Dart2Parser$InterfacesContext) -> enterInterfaces
    void exitInterfaces(parser.dart.Dart2Parser$InterfacesContext) -> exitInterfaces
    void enterMixinApplicationClass(parser.dart.Dart2Parser$MixinApplicationClassContext) -> enterMixinApplicationClass
    void exitMixinApplicationClass(parser.dart.Dart2Parser$MixinApplicationClassContext) -> exitMixinApplicationClass
    void enterMixinApplication(parser.dart.Dart2Parser$MixinApplicationContext) -> enterMixinApplication
    void exitMixinApplication(parser.dart.Dart2Parser$MixinApplicationContext) -> exitMixinApplication
    void enterEnumType(parser.dart.Dart2Parser$EnumTypeContext) -> enterEnumType
    void exitEnumType(parser.dart.Dart2Parser$EnumTypeContext) -> exitEnumType
    void enterEnumEntry(parser.dart.Dart2Parser$EnumEntryContext) -> enterEnumEntry
    void exitEnumEntry(parser.dart.Dart2Parser$EnumEntryContext) -> exitEnumEntry
    void enterTypeParameter(parser.dart.Dart2Parser$TypeParameterContext) -> enterTypeParameter
    void exitTypeParameter(parser.dart.Dart2Parser$TypeParameterContext) -> exitTypeParameter
    void enterTypeParameters(parser.dart.Dart2Parser$TypeParametersContext) -> enterTypeParameters
    void exitTypeParameters(parser.dart.Dart2Parser$TypeParametersContext) -> exitTypeParameters
    void enterMetadata(parser.dart.Dart2Parser$MetadataContext) -> enterMetadata
    void exitMetadata(parser.dart.Dart2Parser$MetadataContext) -> exitMetadata
    void enterExpression(parser.dart.Dart2Parser$ExpressionContext) -> enterExpression
    void exitExpression(parser.dart.Dart2Parser$ExpressionContext) -> exitExpression
    void enterExpressionWithoutCascade(parser.dart.Dart2Parser$ExpressionWithoutCascadeContext) -> enterExpressionWithoutCascade
    void exitExpressionWithoutCascade(parser.dart.Dart2Parser$ExpressionWithoutCascadeContext) -> exitExpressionWithoutCascade
    void enterExpressionList(parser.dart.Dart2Parser$ExpressionListContext) -> enterExpressionList
    void exitExpressionList(parser.dart.Dart2Parser$ExpressionListContext) -> exitExpressionList
    void enterPrimary(parser.dart.Dart2Parser$PrimaryContext) -> enterPrimary
    void exitPrimary(parser.dart.Dart2Parser$PrimaryContext) -> exitPrimary
    void enterLiteral(parser.dart.Dart2Parser$LiteralContext) -> enterLiteral
    void exitLiteral(parser.dart.Dart2Parser$LiteralContext) -> exitLiteral
    void enterNullLiteral(parser.dart.Dart2Parser$NullLiteralContext) -> enterNullLiteral
    void exitNullLiteral(parser.dart.Dart2Parser$NullLiteralContext) -> exitNullLiteral
    void enterNumericLiteral(parser.dart.Dart2Parser$NumericLiteralContext) -> enterNumericLiteral
    void exitNumericLiteral(parser.dart.Dart2Parser$NumericLiteralContext) -> exitNumericLiteral
    void enterBooleanLiteral(parser.dart.Dart2Parser$BooleanLiteralContext) -> enterBooleanLiteral
    void exitBooleanLiteral(parser.dart.Dart2Parser$BooleanLiteralContext) -> exitBooleanLiteral
    void enterStringLiteral(parser.dart.Dart2Parser$StringLiteralContext) -> enterStringLiteral
    void exitStringLiteral(parser.dart.Dart2Parser$StringLiteralContext) -> exitStringLiteral
    void enterStringInterpolation(parser.dart.Dart2Parser$StringInterpolationContext) -> enterStringInterpolation
    void exitStringInterpolation(parser.dart.Dart2Parser$StringInterpolationContext) -> exitStringInterpolation
    void enterSymbolLiteral(parser.dart.Dart2Parser$SymbolLiteralContext) -> enterSymbolLiteral
    void exitSymbolLiteral(parser.dart.Dart2Parser$SymbolLiteralContext) -> exitSymbolLiteral
    void enterListLiteral(parser.dart.Dart2Parser$ListLiteralContext) -> enterListLiteral
    void exitListLiteral(parser.dart.Dart2Parser$ListLiteralContext) -> exitListLiteral
    void enterMapLiteral(parser.dart.Dart2Parser$MapLiteralContext) -> enterMapLiteral
    void exitMapLiteral(parser.dart.Dart2Parser$MapLiteralContext) -> exitMapLiteral
    void enterMapLiteralEntry(parser.dart.Dart2Parser$MapLiteralEntryContext) -> enterMapLiteralEntry
    void exitMapLiteralEntry(parser.dart.Dart2Parser$MapLiteralEntryContext) -> exitMapLiteralEntry
    void enterThrowExpression(parser.dart.Dart2Parser$ThrowExpressionContext) -> enterThrowExpression
    void exitThrowExpression(parser.dart.Dart2Parser$ThrowExpressionContext) -> exitThrowExpression
    void enterThrowExpressionWithoutCascade(parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext) -> enterThrowExpressionWithoutCascade
    void exitThrowExpressionWithoutCascade(parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext) -> exitThrowExpressionWithoutCascade
    void enterFunctionExpression(parser.dart.Dart2Parser$FunctionExpressionContext) -> enterFunctionExpression
    void exitFunctionExpression(parser.dart.Dart2Parser$FunctionExpressionContext) -> exitFunctionExpression
    void enterThisExpression(parser.dart.Dart2Parser$ThisExpressionContext) -> enterThisExpression
    void exitThisExpression(parser.dart.Dart2Parser$ThisExpressionContext) -> exitThisExpression
    void enterNayaExpression(parser.dart.Dart2Parser$NayaExpressionContext) -> enterNayaExpression
    void exitNayaExpression(parser.dart.Dart2Parser$NayaExpressionContext) -> exitNayaExpression
    void enterConstObjectExpression(parser.dart.Dart2Parser$ConstObjectExpressionContext) -> enterConstObjectExpression
    void exitConstObjectExpression(parser.dart.Dart2Parser$ConstObjectExpressionContext) -> exitConstObjectExpression
    void enterArguments(parser.dart.Dart2Parser$ArgumentsContext) -> enterArguments
    void exitArguments(parser.dart.Dart2Parser$ArgumentsContext) -> exitArguments
    void enterArgumentList(parser.dart.Dart2Parser$ArgumentListContext) -> enterArgumentList
    void exitArgumentList(parser.dart.Dart2Parser$ArgumentListContext) -> exitArgumentList
    void enterNamedArgument(parser.dart.Dart2Parser$NamedArgumentContext) -> enterNamedArgument
    void exitNamedArgument(parser.dart.Dart2Parser$NamedArgumentContext) -> exitNamedArgument
    void enterCascadeSection(parser.dart.Dart2Parser$CascadeSectionContext) -> enterCascadeSection
    void exitCascadeSection(parser.dart.Dart2Parser$CascadeSectionContext) -> exitCascadeSection
    void enterCascadeSelector(parser.dart.Dart2Parser$CascadeSelectorContext) -> enterCascadeSelector
    void exitCascadeSelector(parser.dart.Dart2Parser$CascadeSelectorContext) -> exitCascadeSelector
    void enterArgumentPart(parser.dart.Dart2Parser$ArgumentPartContext) -> enterArgumentPart
    void exitArgumentPart(parser.dart.Dart2Parser$ArgumentPartContext) -> exitArgumentPart
    void enterAssignmentOperator(parser.dart.Dart2Parser$AssignmentOperatorContext) -> enterAssignmentOperator
    void exitAssignmentOperator(parser.dart.Dart2Parser$AssignmentOperatorContext) -> exitAssignmentOperator
    void enterCompoundAssignmentOperator(parser.dart.Dart2Parser$CompoundAssignmentOperatorContext) -> enterCompoundAssignmentOperator
    void exitCompoundAssignmentOperator(parser.dart.Dart2Parser$CompoundAssignmentOperatorContext) -> exitCompoundAssignmentOperator
    void enterConditionalExpression(parser.dart.Dart2Parser$ConditionalExpressionContext) -> enterConditionalExpression
    void exitConditionalExpression(parser.dart.Dart2Parser$ConditionalExpressionContext) -> exitConditionalExpression
    void enterIfNullExpression(parser.dart.Dart2Parser$IfNullExpressionContext) -> enterIfNullExpression
    void exitIfNullExpression(parser.dart.Dart2Parser$IfNullExpressionContext) -> exitIfNullExpression
    void enterLogicalOrExpression(parser.dart.Dart2Parser$LogicalOrExpressionContext) -> enterLogicalOrExpression
    void exitLogicalOrExpression(parser.dart.Dart2Parser$LogicalOrExpressionContext) -> exitLogicalOrExpression
    void enterLogicalAndExpression(parser.dart.Dart2Parser$LogicalAndExpressionContext) -> enterLogicalAndExpression
    void exitLogicalAndExpression(parser.dart.Dart2Parser$LogicalAndExpressionContext) -> exitLogicalAndExpression
    void enterEqualityExpression(parser.dart.Dart2Parser$EqualityExpressionContext) -> enterEqualityExpression
    void exitEqualityExpression(parser.dart.Dart2Parser$EqualityExpressionContext) -> exitEqualityExpression
    void enterEqualityOperator(parser.dart.Dart2Parser$EqualityOperatorContext) -> enterEqualityOperator
    void exitEqualityOperator(parser.dart.Dart2Parser$EqualityOperatorContext) -> exitEqualityOperator
    void enterRelationalExpression(parser.dart.Dart2Parser$RelationalExpressionContext) -> enterRelationalExpression
    void exitRelationalExpression(parser.dart.Dart2Parser$RelationalExpressionContext) -> exitRelationalExpression
    void enterRelationalOperator(parser.dart.Dart2Parser$RelationalOperatorContext) -> enterRelationalOperator
    void exitRelationalOperator(parser.dart.Dart2Parser$RelationalOperatorContext) -> exitRelationalOperator
    void enterBitwiseOrExpression(parser.dart.Dart2Parser$BitwiseOrExpressionContext) -> enterBitwiseOrExpression
    void exitBitwiseOrExpression(parser.dart.Dart2Parser$BitwiseOrExpressionContext) -> exitBitwiseOrExpression
    void enterBitwiseXorExpression(parser.dart.Dart2Parser$BitwiseXorExpressionContext) -> enterBitwiseXorExpression
    void exitBitwiseXorExpression(parser.dart.Dart2Parser$BitwiseXorExpressionContext) -> exitBitwiseXorExpression
    void enterBitwiseAndExpression(parser.dart.Dart2Parser$BitwiseAndExpressionContext) -> enterBitwiseAndExpression
    void exitBitwiseAndExpression(parser.dart.Dart2Parser$BitwiseAndExpressionContext) -> exitBitwiseAndExpression
    void enterBitwiseOperator(parser.dart.Dart2Parser$BitwiseOperatorContext) -> enterBitwiseOperator
    void exitBitwiseOperator(parser.dart.Dart2Parser$BitwiseOperatorContext) -> exitBitwiseOperator
    void enterShiftExpression(parser.dart.Dart2Parser$ShiftExpressionContext) -> enterShiftExpression
    void exitShiftExpression(parser.dart.Dart2Parser$ShiftExpressionContext) -> exitShiftExpression
    void enterShiftOperator(parser.dart.Dart2Parser$ShiftOperatorContext) -> enterShiftOperator
    void exitShiftOperator(parser.dart.Dart2Parser$ShiftOperatorContext) -> exitShiftOperator
    void enterAdditiveExpression(parser.dart.Dart2Parser$AdditiveExpressionContext) -> enterAdditiveExpression
    void exitAdditiveExpression(parser.dart.Dart2Parser$AdditiveExpressionContext) -> exitAdditiveExpression
    void enterAdditiveOperator(parser.dart.Dart2Parser$AdditiveOperatorContext) -> enterAdditiveOperator
    void exitAdditiveOperator(parser.dart.Dart2Parser$AdditiveOperatorContext) -> exitAdditiveOperator
    void enterMultiplicativeExpression(parser.dart.Dart2Parser$MultiplicativeExpressionContext) -> enterMultiplicativeExpression
    void exitMultiplicativeExpression(parser.dart.Dart2Parser$MultiplicativeExpressionContext) -> exitMultiplicativeExpression
    void enterMultiplicativeOperator(parser.dart.Dart2Parser$MultiplicativeOperatorContext) -> enterMultiplicativeOperator
    void exitMultiplicativeOperator(parser.dart.Dart2Parser$MultiplicativeOperatorContext) -> exitMultiplicativeOperator
    void enterUnaryExpression(parser.dart.Dart2Parser$UnaryExpressionContext) -> enterUnaryExpression
    void exitUnaryExpression(parser.dart.Dart2Parser$UnaryExpressionContext) -> exitUnaryExpression
    void enterPrefixOperator(parser.dart.Dart2Parser$PrefixOperatorContext) -> enterPrefixOperator
    void exitPrefixOperator(parser.dart.Dart2Parser$PrefixOperatorContext) -> exitPrefixOperator
    void enterMinusOperator(parser.dart.Dart2Parser$MinusOperatorContext) -> enterMinusOperator
    void exitMinusOperator(parser.dart.Dart2Parser$MinusOperatorContext) -> exitMinusOperator
    void enterNegationOperator(parser.dart.Dart2Parser$NegationOperatorContext) -> enterNegationOperator
    void exitNegationOperator(parser.dart.Dart2Parser$NegationOperatorContext) -> exitNegationOperator
    void enterTildeOperator(parser.dart.Dart2Parser$TildeOperatorContext) -> enterTildeOperator
    void exitTildeOperator(parser.dart.Dart2Parser$TildeOperatorContext) -> exitTildeOperator
    void enterAwaitExpression(parser.dart.Dart2Parser$AwaitExpressionContext) -> enterAwaitExpression
    void exitAwaitExpression(parser.dart.Dart2Parser$AwaitExpressionContext) -> exitAwaitExpression
    void enterPostfixExpression(parser.dart.Dart2Parser$PostfixExpressionContext) -> enterPostfixExpression
    void exitPostfixExpression(parser.dart.Dart2Parser$PostfixExpressionContext) -> exitPostfixExpression
    void enterPostfixOperator(parser.dart.Dart2Parser$PostfixOperatorContext) -> enterPostfixOperator
    void exitPostfixOperator(parser.dart.Dart2Parser$PostfixOperatorContext) -> exitPostfixOperator
    void enterSelector(parser.dart.Dart2Parser$SelectorContext) -> enterSelector
    void exitSelector(parser.dart.Dart2Parser$SelectorContext) -> exitSelector
    void enterIncrementOperator(parser.dart.Dart2Parser$IncrementOperatorContext) -> enterIncrementOperator
    void exitIncrementOperator(parser.dart.Dart2Parser$IncrementOperatorContext) -> exitIncrementOperator
    void enterAssignableExpression(parser.dart.Dart2Parser$AssignableExpressionContext) -> enterAssignableExpression
    void exitAssignableExpression(parser.dart.Dart2Parser$AssignableExpressionContext) -> exitAssignableExpression
    void enterUnconditionalAssignableSelector(parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext) -> enterUnconditionalAssignableSelector
    void exitUnconditionalAssignableSelector(parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext) -> exitUnconditionalAssignableSelector
    void enterAssignableSelector(parser.dart.Dart2Parser$AssignableSelectorContext) -> enterAssignableSelector
    void exitAssignableSelector(parser.dart.Dart2Parser$AssignableSelectorContext) -> exitAssignableSelector
    void enterIdentifier(parser.dart.Dart2Parser$IdentifierContext) -> enterIdentifier
    void exitIdentifier(parser.dart.Dart2Parser$IdentifierContext) -> exitIdentifier
    void enterQualified(parser.dart.Dart2Parser$QualifiedContext) -> enterQualified
    void exitQualified(parser.dart.Dart2Parser$QualifiedContext) -> exitQualified
    void enterTypeTest(parser.dart.Dart2Parser$TypeTestContext) -> enterTypeTest
    void exitTypeTest(parser.dart.Dart2Parser$TypeTestContext) -> exitTypeTest
    void enterIsOperator(parser.dart.Dart2Parser$IsOperatorContext) -> enterIsOperator
    void exitIsOperator(parser.dart.Dart2Parser$IsOperatorContext) -> exitIsOperator
    void enterTypeCast(parser.dart.Dart2Parser$TypeCastContext) -> enterTypeCast
    void exitTypeCast(parser.dart.Dart2Parser$TypeCastContext) -> exitTypeCast
    void enterAsOperator(parser.dart.Dart2Parser$AsOperatorContext) -> enterAsOperator
    void exitAsOperator(parser.dart.Dart2Parser$AsOperatorContext) -> exitAsOperator
    void enterStatements(parser.dart.Dart2Parser$StatementsContext) -> enterStatements
    void exitStatements(parser.dart.Dart2Parser$StatementsContext) -> exitStatements
    void enterStatement(parser.dart.Dart2Parser$StatementContext) -> enterStatement
    void exitStatement(parser.dart.Dart2Parser$StatementContext) -> exitStatement
    void enterNonLabledStatment(parser.dart.Dart2Parser$NonLabledStatmentContext) -> enterNonLabledStatment
    void exitNonLabledStatment(parser.dart.Dart2Parser$NonLabledStatmentContext) -> exitNonLabledStatment
    void enterExpressionStatement(parser.dart.Dart2Parser$ExpressionStatementContext) -> enterExpressionStatement
    void exitExpressionStatement(parser.dart.Dart2Parser$ExpressionStatementContext) -> exitExpressionStatement
    void enterLocalVariableDeclaration(parser.dart.Dart2Parser$LocalVariableDeclarationContext) -> enterLocalVariableDeclaration
    void exitLocalVariableDeclaration(parser.dart.Dart2Parser$LocalVariableDeclarationContext) -> exitLocalVariableDeclaration
    void enterLocalFunctionDeclaration(parser.dart.Dart2Parser$LocalFunctionDeclarationContext) -> enterLocalFunctionDeclaration
    void exitLocalFunctionDeclaration(parser.dart.Dart2Parser$LocalFunctionDeclarationContext) -> exitLocalFunctionDeclaration
    void enterIfStatement(parser.dart.Dart2Parser$IfStatementContext) -> enterIfStatement
    void exitIfStatement(parser.dart.Dart2Parser$IfStatementContext) -> exitIfStatement
    void enterForStatement(parser.dart.Dart2Parser$ForStatementContext) -> enterForStatement
    void exitForStatement(parser.dart.Dart2Parser$ForStatementContext) -> exitForStatement
    void enterForLoopParts(parser.dart.Dart2Parser$ForLoopPartsContext) -> enterForLoopParts
    void exitForLoopParts(parser.dart.Dart2Parser$ForLoopPartsContext) -> exitForLoopParts
    void enterForInitializerStatement(parser.dart.Dart2Parser$ForInitializerStatementContext) -> enterForInitializerStatement
    void exitForInitializerStatement(parser.dart.Dart2Parser$ForInitializerStatementContext) -> exitForInitializerStatement
    void enterWhileStatement(parser.dart.Dart2Parser$WhileStatementContext) -> enterWhileStatement
    void exitWhileStatement(parser.dart.Dart2Parser$WhileStatementContext) -> exitWhileStatement
    void enterDoStatement(parser.dart.Dart2Parser$DoStatementContext) -> enterDoStatement
    void exitDoStatement(parser.dart.Dart2Parser$DoStatementContext) -> exitDoStatement
    void enterSwitchStatement(parser.dart.Dart2Parser$SwitchStatementContext) -> enterSwitchStatement
    void exitSwitchStatement(parser.dart.Dart2Parser$SwitchStatementContext) -> exitSwitchStatement
    void enterSwitchCase(parser.dart.Dart2Parser$SwitchCaseContext) -> enterSwitchCase
    void exitSwitchCase(parser.dart.Dart2Parser$SwitchCaseContext) -> exitSwitchCase
    void enterDefaultCase(parser.dart.Dart2Parser$DefaultCaseContext) -> enterDefaultCase
    void exitDefaultCase(parser.dart.Dart2Parser$DefaultCaseContext) -> exitDefaultCase
    void enterRethrowStatment(parser.dart.Dart2Parser$RethrowStatmentContext) -> enterRethrowStatment
    void exitRethrowStatment(parser.dart.Dart2Parser$RethrowStatmentContext) -> exitRethrowStatment
    void enterTryStatement(parser.dart.Dart2Parser$TryStatementContext) -> enterTryStatement
    void exitTryStatement(parser.dart.Dart2Parser$TryStatementContext) -> exitTryStatement
    void enterOnPart(parser.dart.Dart2Parser$OnPartContext) -> enterOnPart
    void exitOnPart(parser.dart.Dart2Parser$OnPartContext) -> exitOnPart
    void enterCatchPart(parser.dart.Dart2Parser$CatchPartContext) -> enterCatchPart
    void exitCatchPart(parser.dart.Dart2Parser$CatchPartContext) -> exitCatchPart
    void enterFinallyPart(parser.dart.Dart2Parser$FinallyPartContext) -> enterFinallyPart
    void exitFinallyPart(parser.dart.Dart2Parser$FinallyPartContext) -> exitFinallyPart
    void enterReturnStatement(parser.dart.Dart2Parser$ReturnStatementContext) -> enterReturnStatement
    void exitReturnStatement(parser.dart.Dart2Parser$ReturnStatementContext) -> exitReturnStatement
    void enterLabel(parser.dart.Dart2Parser$LabelContext) -> enterLabel
    void exitLabel(parser.dart.Dart2Parser$LabelContext) -> exitLabel
    void enterBreakStatement(parser.dart.Dart2Parser$BreakStatementContext) -> enterBreakStatement
    void exitBreakStatement(parser.dart.Dart2Parser$BreakStatementContext) -> exitBreakStatement
    void enterContinueStatement(parser.dart.Dart2Parser$ContinueStatementContext) -> enterContinueStatement
    void exitContinueStatement(parser.dart.Dart2Parser$ContinueStatementContext) -> exitContinueStatement
    void enterYieldStatement(parser.dart.Dart2Parser$YieldStatementContext) -> enterYieldStatement
    void exitYieldStatement(parser.dart.Dart2Parser$YieldStatementContext) -> exitYieldStatement
    void enterYieldEachStatement(parser.dart.Dart2Parser$YieldEachStatementContext) -> enterYieldEachStatement
    void exitYieldEachStatement(parser.dart.Dart2Parser$YieldEachStatementContext) -> exitYieldEachStatement
    void enterAssertStatement(parser.dart.Dart2Parser$AssertStatementContext) -> enterAssertStatement
    void exitAssertStatement(parser.dart.Dart2Parser$AssertStatementContext) -> exitAssertStatement
    void enterAssertion(parser.dart.Dart2Parser$AssertionContext) -> enterAssertion
    void exitAssertion(parser.dart.Dart2Parser$AssertionContext) -> exitAssertion
    void enterTopLevelDefinition(parser.dart.Dart2Parser$TopLevelDefinitionContext) -> enterTopLevelDefinition
    void exitTopLevelDefinition(parser.dart.Dart2Parser$TopLevelDefinitionContext) -> exitTopLevelDefinition
    void enterGetOrSet(parser.dart.Dart2Parser$GetOrSetContext) -> enterGetOrSet
    void exitGetOrSet(parser.dart.Dart2Parser$GetOrSetContext) -> exitGetOrSet
    void enterLibraryDefinition(parser.dart.Dart2Parser$LibraryDefinitionContext) -> enterLibraryDefinition
    void exitLibraryDefinition(parser.dart.Dart2Parser$LibraryDefinitionContext) -> exitLibraryDefinition
    void enterScriptTag(parser.dart.Dart2Parser$ScriptTagContext) -> enterScriptTag
    void exitScriptTag(parser.dart.Dart2Parser$ScriptTagContext) -> exitScriptTag
    void enterLibraryName(parser.dart.Dart2Parser$LibraryNameContext) -> enterLibraryName
    void exitLibraryName(parser.dart.Dart2Parser$LibraryNameContext) -> exitLibraryName
    void enterImportOrExport(parser.dart.Dart2Parser$ImportOrExportContext) -> enterImportOrExport
    void exitImportOrExport(parser.dart.Dart2Parser$ImportOrExportContext) -> exitImportOrExport
    void enterDottedIdentifierList(parser.dart.Dart2Parser$DottedIdentifierListContext) -> enterDottedIdentifierList
    void exitDottedIdentifierList(parser.dart.Dart2Parser$DottedIdentifierListContext) -> exitDottedIdentifierList
    void enterLibraryimport(parser.dart.Dart2Parser$LibraryimportContext) -> enterLibraryimport
    void exitLibraryimport(parser.dart.Dart2Parser$LibraryimportContext) -> exitLibraryimport
    void enterImportSpecification(parser.dart.Dart2Parser$ImportSpecificationContext) -> enterImportSpecification
    void exitImportSpecification(parser.dart.Dart2Parser$ImportSpecificationContext) -> exitImportSpecification
    void enterCombinator(parser.dart.Dart2Parser$CombinatorContext) -> enterCombinator
    void exitCombinator(parser.dart.Dart2Parser$CombinatorContext) -> exitCombinator
    void enterIdentifierList(parser.dart.Dart2Parser$IdentifierListContext) -> enterIdentifierList
    void exitIdentifierList(parser.dart.Dart2Parser$IdentifierListContext) -> exitIdentifierList
    void enterLibraryExport(parser.dart.Dart2Parser$LibraryExportContext) -> enterLibraryExport
    void exitLibraryExport(parser.dart.Dart2Parser$LibraryExportContext) -> exitLibraryExport
    void enterPartDirective(parser.dart.Dart2Parser$PartDirectiveContext) -> enterPartDirective
    void exitPartDirective(parser.dart.Dart2Parser$PartDirectiveContext) -> exitPartDirective
    void enterPartHeader(parser.dart.Dart2Parser$PartHeaderContext) -> enterPartHeader
    void exitPartHeader(parser.dart.Dart2Parser$PartHeaderContext) -> exitPartHeader
    void enterPartDeclaration(parser.dart.Dart2Parser$PartDeclarationContext) -> enterPartDeclaration
    void exitPartDeclaration(parser.dart.Dart2Parser$PartDeclarationContext) -> exitPartDeclaration
    void enterUri(parser.dart.Dart2Parser$UriContext) -> enterUri
    void exitUri(parser.dart.Dart2Parser$UriContext) -> exitUri
    void enterConfigurableUri(parser.dart.Dart2Parser$ConfigurableUriContext) -> enterConfigurableUri
    void exitConfigurableUri(parser.dart.Dart2Parser$ConfigurableUriContext) -> exitConfigurableUri
    void enterConfigurationUri(parser.dart.Dart2Parser$ConfigurationUriContext) -> enterConfigurationUri
    void exitConfigurationUri(parser.dart.Dart2Parser$ConfigurationUriContext) -> exitConfigurationUri
    void enterUriTest(parser.dart.Dart2Parser$UriTestContext) -> enterUriTest
    void exitUriTest(parser.dart.Dart2Parser$UriTestContext) -> exitUriTest
    void enterDtype(parser.dart.Dart2Parser$DtypeContext) -> enterDtype
    void exitDtype(parser.dart.Dart2Parser$DtypeContext) -> exitDtype
    void enterTypeName(parser.dart.Dart2Parser$TypeNameContext) -> enterTypeName
    void exitTypeName(parser.dart.Dart2Parser$TypeNameContext) -> exitTypeName
    void enterTypeArguments(parser.dart.Dart2Parser$TypeArgumentsContext) -> enterTypeArguments
    void exitTypeArguments(parser.dart.Dart2Parser$TypeArgumentsContext) -> exitTypeArguments
    void enterTypeList(parser.dart.Dart2Parser$TypeListContext) -> enterTypeList
    void exitTypeList(parser.dart.Dart2Parser$TypeListContext) -> exitTypeList
    void enterTypeAlias(parser.dart.Dart2Parser$TypeAliasContext) -> enterTypeAlias
    void exitTypeAlias(parser.dart.Dart2Parser$TypeAliasContext) -> exitTypeAlias
    void enterTypeAliasBody(parser.dart.Dart2Parser$TypeAliasBodyContext) -> enterTypeAliasBody
    void exitTypeAliasBody(parser.dart.Dart2Parser$TypeAliasBodyContext) -> exitTypeAliasBody
    void enterFunctionTypeAlias(parser.dart.Dart2Parser$FunctionTypeAliasContext) -> enterFunctionTypeAlias
    void exitFunctionTypeAlias(parser.dart.Dart2Parser$FunctionTypeAliasContext) -> exitFunctionTypeAlias
    void enterFunctionPrefix(parser.dart.Dart2Parser$FunctionPrefixContext) -> enterFunctionPrefix
    void exitFunctionPrefix(parser.dart.Dart2Parser$FunctionPrefixContext) -> exitFunctionPrefix
    void enterEveryRule(org.antlr.v4.runtime.ParserRuleContext) -> enterEveryRule
    void exitEveryRule(org.antlr.v4.runtime.ParserRuleContext) -> exitEveryRule
    void visitTerminal(org.antlr.v4.runtime.tree.TerminalNode) -> visitTerminal
    void visitErrorNode(org.antlr.v4.runtime.tree.ErrorNode) -> visitErrorNode
parser.dart.Dart2BaseVisitor -> parser.dart.Dart2BaseVisitor:
    void <init>() -> <init>
    java.lang.Object visitCompilationUnit(parser.dart.Dart2Parser$CompilationUnitContext) -> visitCompilationUnit
    java.lang.Object visitVariableDeclaration(parser.dart.Dart2Parser$VariableDeclarationContext) -> visitVariableDeclaration
    java.lang.Object visitDeclaredIdentifier(parser.dart.Dart2Parser$DeclaredIdentifierContext) -> visitDeclaredIdentifier
    java.lang.Object visitFinalConstVarOrType(parser.dart.Dart2Parser$FinalConstVarOrTypeContext) -> visitFinalConstVarOrType
    java.lang.Object visitVarOrType(parser.dart.Dart2Parser$VarOrTypeContext) -> visitVarOrType
    java.lang.Object visitInitializedVariableDeclaration(parser.dart.Dart2Parser$InitializedVariableDeclarationContext) -> visitInitializedVariableDeclaration
    java.lang.Object visitInitializedIdentifier(parser.dart.Dart2Parser$InitializedIdentifierContext) -> visitInitializedIdentifier
    java.lang.Object visitInitializedIdentifierList(parser.dart.Dart2Parser$InitializedIdentifierListContext) -> visitInitializedIdentifierList
    java.lang.Object visitFunctionSignature(parser.dart.Dart2Parser$FunctionSignatureContext) -> visitFunctionSignature
    java.lang.Object visitFormalParameterPart(parser.dart.Dart2Parser$FormalParameterPartContext) -> visitFormalParameterPart
    java.lang.Object visitReturnType(parser.dart.Dart2Parser$ReturnTypeContext) -> visitReturnType
    java.lang.Object visitFunctionBody(parser.dart.Dart2Parser$FunctionBodyContext) -> visitFunctionBody
    java.lang.Object visitBlock(parser.dart.Dart2Parser$BlockContext) -> visitBlock
    java.lang.Object visitFormalParameterList(parser.dart.Dart2Parser$FormalParameterListContext) -> visitFormalParameterList
    java.lang.Object visitNormalFormalParameters(parser.dart.Dart2Parser$NormalFormalParametersContext) -> visitNormalFormalParameters
    java.lang.Object visitOptionalFormalParameters(parser.dart.Dart2Parser$OptionalFormalParametersContext) -> visitOptionalFormalParameters
    java.lang.Object visitOptionalPositionalFormalParameters(parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext) -> visitOptionalPositionalFormalParameters
    java.lang.Object visitNamedFormalParameters(parser.dart.Dart2Parser$NamedFormalParametersContext) -> visitNamedFormalParameters
    java.lang.Object visitNormalFormalParameter(parser.dart.Dart2Parser$NormalFormalParameterContext) -> visitNormalFormalParameter
    java.lang.Object visitFunctionFormalParameter(parser.dart.Dart2Parser$FunctionFormalParameterContext) -> visitFunctionFormalParameter
    java.lang.Object visitSimpleFormalParameter(parser.dart.Dart2Parser$SimpleFormalParameterContext) -> visitSimpleFormalParameter
    java.lang.Object visitFieldFormalParameter(parser.dart.Dart2Parser$FieldFormalParameterContext) -> visitFieldFormalParameter
    java.lang.Object visitDefaultFormalParameter(parser.dart.Dart2Parser$DefaultFormalParameterContext) -> visitDefaultFormalParameter
    java.lang.Object visitDefaultNamedParameter(parser.dart.Dart2Parser$DefaultNamedParameterContext) -> visitDefaultNamedParameter
    java.lang.Object visitClassDefinition(parser.dart.Dart2Parser$ClassDefinitionContext) -> visitClassDefinition
    java.lang.Object visitMixins(parser.dart.Dart2Parser$MixinsContext) -> visitMixins
    java.lang.Object visitClassMemberDefinition(parser.dart.Dart2Parser$ClassMemberDefinitionContext) -> visitClassMemberDefinition
    java.lang.Object visitMethodSignature(parser.dart.Dart2Parser$MethodSignatureContext) -> visitMethodSignature
    java.lang.Object visitDeclaration(parser.dart.Dart2Parser$DeclarationContext) -> visitDeclaration
    java.lang.Object visitStaticFinalDeclarationList(parser.dart.Dart2Parser$StaticFinalDeclarationListContext) -> visitStaticFinalDeclarationList
    java.lang.Object visitStaticFinalDeclaration(parser.dart.Dart2Parser$StaticFinalDeclarationContext) -> visitStaticFinalDeclaration
    java.lang.Object visitOperatorSignature(parser.dart.Dart2Parser$OperatorSignatureContext) -> visitOperatorSignature
    java.lang.Object visitOperator(parser.dart.Dart2Parser$OperatorContext) -> visitOperator
    java.lang.Object visitBinaryOperator(parser.dart.Dart2Parser$BinaryOperatorContext) -> visitBinaryOperator
    java.lang.Object visitGetterSignature(parser.dart.Dart2Parser$GetterSignatureContext) -> visitGetterSignature
    java.lang.Object visitSetterSignature(parser.dart.Dart2Parser$SetterSignatureContext) -> visitSetterSignature
    java.lang.Object visitConstructorSignature(parser.dart.Dart2Parser$ConstructorSignatureContext) -> visitConstructorSignature
    java.lang.Object visitRedirection(parser.dart.Dart2Parser$RedirectionContext) -> visitRedirection
    java.lang.Object visitInitializers(parser.dart.Dart2Parser$InitializersContext) -> visitInitializers
    java.lang.Object visitInitializerListEntry(parser.dart.Dart2Parser$InitializerListEntryContext) -> visitInitializerListEntry
    java.lang.Object visitFieldInitializer(parser.dart.Dart2Parser$FieldInitializerContext) -> visitFieldInitializer
    java.lang.Object visitFactoryConstructorSignature(parser.dart.Dart2Parser$FactoryConstructorSignatureContext) -> visitFactoryConstructorSignature
    java.lang.Object visitRedirectingFactoryConstructorSignature(parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext) -> visitRedirectingFactoryConstructorSignature
    java.lang.Object visitConstantConstructorSignature(parser.dart.Dart2Parser$ConstantConstructorSignatureContext) -> visitConstantConstructorSignature
    java.lang.Object visitSuperclass(parser.dart.Dart2Parser$SuperclassContext) -> visitSuperclass
    java.lang.Object visitInterfaces(parser.dart.Dart2Parser$InterfacesContext) -> visitInterfaces
    java.lang.Object visitMixinApplicationClass(parser.dart.Dart2Parser$MixinApplicationClassContext) -> visitMixinApplicationClass
    java.lang.Object visitMixinApplication(parser.dart.Dart2Parser$MixinApplicationContext) -> visitMixinApplication
    java.lang.Object visitEnumType(parser.dart.Dart2Parser$EnumTypeContext) -> visitEnumType
    java.lang.Object visitEnumEntry(parser.dart.Dart2Parser$EnumEntryContext) -> visitEnumEntry
    java.lang.Object visitTypeParameter(parser.dart.Dart2Parser$TypeParameterContext) -> visitTypeParameter
    java.lang.Object visitTypeParameters(parser.dart.Dart2Parser$TypeParametersContext) -> visitTypeParameters
    java.lang.Object visitMetadata(parser.dart.Dart2Parser$MetadataContext) -> visitMetadata
    java.lang.Object visitExpression(parser.dart.Dart2Parser$ExpressionContext) -> visitExpression
    java.lang.Object visitExpressionWithoutCascade(parser.dart.Dart2Parser$ExpressionWithoutCascadeContext) -> visitExpressionWithoutCascade
    java.lang.Object visitExpressionList(parser.dart.Dart2Parser$ExpressionListContext) -> visitExpressionList
    java.lang.Object visitPrimary(parser.dart.Dart2Parser$PrimaryContext) -> visitPrimary
    java.lang.Object visitLiteral(parser.dart.Dart2Parser$LiteralContext) -> visitLiteral
    java.lang.Object visitNullLiteral(parser.dart.Dart2Parser$NullLiteralContext) -> visitNullLiteral
    java.lang.Object visitNumericLiteral(parser.dart.Dart2Parser$NumericLiteralContext) -> visitNumericLiteral
    java.lang.Object visitBooleanLiteral(parser.dart.Dart2Parser$BooleanLiteralContext) -> visitBooleanLiteral
    java.lang.Object visitStringLiteral(parser.dart.Dart2Parser$StringLiteralContext) -> visitStringLiteral
    java.lang.Object visitStringInterpolation(parser.dart.Dart2Parser$StringInterpolationContext) -> visitStringInterpolation
    java.lang.Object visitSymbolLiteral(parser.dart.Dart2Parser$SymbolLiteralContext) -> visitSymbolLiteral
    java.lang.Object visitListLiteral(parser.dart.Dart2Parser$ListLiteralContext) -> visitListLiteral
    java.lang.Object visitMapLiteral(parser.dart.Dart2Parser$MapLiteralContext) -> visitMapLiteral
    java.lang.Object visitMapLiteralEntry(parser.dart.Dart2Parser$MapLiteralEntryContext) -> visitMapLiteralEntry
    java.lang.Object visitThrowExpression(parser.dart.Dart2Parser$ThrowExpressionContext) -> visitThrowExpression
    java.lang.Object visitThrowExpressionWithoutCascade(parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext) -> visitThrowExpressionWithoutCascade
    java.lang.Object visitFunctionExpression(parser.dart.Dart2Parser$FunctionExpressionContext) -> visitFunctionExpression
    java.lang.Object visitThisExpression(parser.dart.Dart2Parser$ThisExpressionContext) -> visitThisExpression
    java.lang.Object visitNayaExpression(parser.dart.Dart2Parser$NayaExpressionContext) -> visitNayaExpression
    java.lang.Object visitConstObjectExpression(parser.dart.Dart2Parser$ConstObjectExpressionContext) -> visitConstObjectExpression
    java.lang.Object visitArguments(parser.dart.Dart2Parser$ArgumentsContext) -> visitArguments
    java.lang.Object visitArgumentList(parser.dart.Dart2Parser$ArgumentListContext) -> visitArgumentList
    java.lang.Object visitNamedArgument(parser.dart.Dart2Parser$NamedArgumentContext) -> visitNamedArgument
    java.lang.Object visitCascadeSection(parser.dart.Dart2Parser$CascadeSectionContext) -> visitCascadeSection
    java.lang.Object visitCascadeSelector(parser.dart.Dart2Parser$CascadeSelectorContext) -> visitCascadeSelector
    java.lang.Object visitArgumentPart(parser.dart.Dart2Parser$ArgumentPartContext) -> visitArgumentPart
    java.lang.Object visitAssignmentOperator(parser.dart.Dart2Parser$AssignmentOperatorContext) -> visitAssignmentOperator
    java.lang.Object visitCompoundAssignmentOperator(parser.dart.Dart2Parser$CompoundAssignmentOperatorContext) -> visitCompoundAssignmentOperator
    java.lang.Object visitConditionalExpression(parser.dart.Dart2Parser$ConditionalExpressionContext) -> visitConditionalExpression
    java.lang.Object visitIfNullExpression(parser.dart.Dart2Parser$IfNullExpressionContext) -> visitIfNullExpression
    java.lang.Object visitLogicalOrExpression(parser.dart.Dart2Parser$LogicalOrExpressionContext) -> visitLogicalOrExpression
    java.lang.Object visitLogicalAndExpression(parser.dart.Dart2Parser$LogicalAndExpressionContext) -> visitLogicalAndExpression
    java.lang.Object visitEqualityExpression(parser.dart.Dart2Parser$EqualityExpressionContext) -> visitEqualityExpression
    java.lang.Object visitEqualityOperator(parser.dart.Dart2Parser$EqualityOperatorContext) -> visitEqualityOperator
    java.lang.Object visitRelationalExpression(parser.dart.Dart2Parser$RelationalExpressionContext) -> visitRelationalExpression
    java.lang.Object visitRelationalOperator(parser.dart.Dart2Parser$RelationalOperatorContext) -> visitRelationalOperator
    java.lang.Object visitBitwiseOrExpression(parser.dart.Dart2Parser$BitwiseOrExpressionContext) -> visitBitwiseOrExpression
    java.lang.Object visitBitwiseXorExpression(parser.dart.Dart2Parser$BitwiseXorExpressionContext) -> visitBitwiseXorExpression
    java.lang.Object visitBitwiseAndExpression(parser.dart.Dart2Parser$BitwiseAndExpressionContext) -> visitBitwiseAndExpression
    java.lang.Object visitBitwiseOperator(parser.dart.Dart2Parser$BitwiseOperatorContext) -> visitBitwiseOperator
    java.lang.Object visitShiftExpression(parser.dart.Dart2Parser$ShiftExpressionContext) -> visitShiftExpression
    java.lang.Object visitShiftOperator(parser.dart.Dart2Parser$ShiftOperatorContext) -> visitShiftOperator
    java.lang.Object visitAdditiveExpression(parser.dart.Dart2Parser$AdditiveExpressionContext) -> visitAdditiveExpression
    java.lang.Object visitAdditiveOperator(parser.dart.Dart2Parser$AdditiveOperatorContext) -> visitAdditiveOperator
    java.lang.Object visitMultiplicativeExpression(parser.dart.Dart2Parser$MultiplicativeExpressionContext) -> visitMultiplicativeExpression
    java.lang.Object visitMultiplicativeOperator(parser.dart.Dart2Parser$MultiplicativeOperatorContext) -> visitMultiplicativeOperator
    java.lang.Object visitUnaryExpression(parser.dart.Dart2Parser$UnaryExpressionContext) -> visitUnaryExpression
    java.lang.Object visitPrefixOperator(parser.dart.Dart2Parser$PrefixOperatorContext) -> visitPrefixOperator
    java.lang.Object visitMinusOperator(parser.dart.Dart2Parser$MinusOperatorContext) -> visitMinusOperator
    java.lang.Object visitNegationOperator(parser.dart.Dart2Parser$NegationOperatorContext) -> visitNegationOperator
    java.lang.Object visitTildeOperator(parser.dart.Dart2Parser$TildeOperatorContext) -> visitTildeOperator
    java.lang.Object visitAwaitExpression(parser.dart.Dart2Parser$AwaitExpressionContext) -> visitAwaitExpression
    java.lang.Object visitPostfixExpression(parser.dart.Dart2Parser$PostfixExpressionContext) -> visitPostfixExpression
    java.lang.Object visitPostfixOperator(parser.dart.Dart2Parser$PostfixOperatorContext) -> visitPostfixOperator
    java.lang.Object visitSelector(parser.dart.Dart2Parser$SelectorContext) -> visitSelector
    java.lang.Object visitIncrementOperator(parser.dart.Dart2Parser$IncrementOperatorContext) -> visitIncrementOperator
    java.lang.Object visitAssignableExpression(parser.dart.Dart2Parser$AssignableExpressionContext) -> visitAssignableExpression
    java.lang.Object visitUnconditionalAssignableSelector(parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext) -> visitUnconditionalAssignableSelector
    java.lang.Object visitAssignableSelector(parser.dart.Dart2Parser$AssignableSelectorContext) -> visitAssignableSelector
    java.lang.Object visitIdentifier(parser.dart.Dart2Parser$IdentifierContext) -> visitIdentifier
    java.lang.Object visitQualified(parser.dart.Dart2Parser$QualifiedContext) -> visitQualified
    java.lang.Object visitTypeTest(parser.dart.Dart2Parser$TypeTestContext) -> visitTypeTest
    java.lang.Object visitIsOperator(parser.dart.Dart2Parser$IsOperatorContext) -> visitIsOperator
    java.lang.Object visitTypeCast(parser.dart.Dart2Parser$TypeCastContext) -> visitTypeCast
    java.lang.Object visitAsOperator(parser.dart.Dart2Parser$AsOperatorContext) -> visitAsOperator
    java.lang.Object visitStatements(parser.dart.Dart2Parser$StatementsContext) -> visitStatements
    java.lang.Object visitStatement(parser.dart.Dart2Parser$StatementContext) -> visitStatement
    java.lang.Object visitNonLabledStatment(parser.dart.Dart2Parser$NonLabledStatmentContext) -> visitNonLabledStatment
    java.lang.Object visitExpressionStatement(parser.dart.Dart2Parser$ExpressionStatementContext) -> visitExpressionStatement
    java.lang.Object visitLocalVariableDeclaration(parser.dart.Dart2Parser$LocalVariableDeclarationContext) -> visitLocalVariableDeclaration
    java.lang.Object visitLocalFunctionDeclaration(parser.dart.Dart2Parser$LocalFunctionDeclarationContext) -> visitLocalFunctionDeclaration
    java.lang.Object visitIfStatement(parser.dart.Dart2Parser$IfStatementContext) -> visitIfStatement
    java.lang.Object visitForStatement(parser.dart.Dart2Parser$ForStatementContext) -> visitForStatement
    java.lang.Object visitForLoopParts(parser.dart.Dart2Parser$ForLoopPartsContext) -> visitForLoopParts
    java.lang.Object visitForInitializerStatement(parser.dart.Dart2Parser$ForInitializerStatementContext) -> visitForInitializerStatement
    java.lang.Object visitWhileStatement(parser.dart.Dart2Parser$WhileStatementContext) -> visitWhileStatement
    java.lang.Object visitDoStatement(parser.dart.Dart2Parser$DoStatementContext) -> visitDoStatement
    java.lang.Object visitSwitchStatement(parser.dart.Dart2Parser$SwitchStatementContext) -> visitSwitchStatement
    java.lang.Object visitSwitchCase(parser.dart.Dart2Parser$SwitchCaseContext) -> visitSwitchCase
    java.lang.Object visitDefaultCase(parser.dart.Dart2Parser$DefaultCaseContext) -> visitDefaultCase
    java.lang.Object visitRethrowStatment(parser.dart.Dart2Parser$RethrowStatmentContext) -> visitRethrowStatment
    java.lang.Object visitTryStatement(parser.dart.Dart2Parser$TryStatementContext) -> visitTryStatement
    java.lang.Object visitOnPart(parser.dart.Dart2Parser$OnPartContext) -> visitOnPart
    java.lang.Object visitCatchPart(parser.dart.Dart2Parser$CatchPartContext) -> visitCatchPart
    java.lang.Object visitFinallyPart(parser.dart.Dart2Parser$FinallyPartContext) -> visitFinallyPart
    java.lang.Object visitReturnStatement(parser.dart.Dart2Parser$ReturnStatementContext) -> visitReturnStatement
    java.lang.Object visitLabel(parser.dart.Dart2Parser$LabelContext) -> visitLabel
    java.lang.Object visitBreakStatement(parser.dart.Dart2Parser$BreakStatementContext) -> visitBreakStatement
    java.lang.Object visitContinueStatement(parser.dart.Dart2Parser$ContinueStatementContext) -> visitContinueStatement
    java.lang.Object visitYieldStatement(parser.dart.Dart2Parser$YieldStatementContext) -> visitYieldStatement
    java.lang.Object visitYieldEachStatement(parser.dart.Dart2Parser$YieldEachStatementContext) -> visitYieldEachStatement
    java.lang.Object visitAssertStatement(parser.dart.Dart2Parser$AssertStatementContext) -> visitAssertStatement
    java.lang.Object visitAssertion(parser.dart.Dart2Parser$AssertionContext) -> visitAssertion
    java.lang.Object visitTopLevelDefinition(parser.dart.Dart2Parser$TopLevelDefinitionContext) -> visitTopLevelDefinition
    java.lang.Object visitGetOrSet(parser.dart.Dart2Parser$GetOrSetContext) -> visitGetOrSet
    java.lang.Object visitLibraryDefinition(parser.dart.Dart2Parser$LibraryDefinitionContext) -> visitLibraryDefinition
    java.lang.Object visitScriptTag(parser.dart.Dart2Parser$ScriptTagContext) -> visitScriptTag
    java.lang.Object visitLibraryName(parser.dart.Dart2Parser$LibraryNameContext) -> visitLibraryName
    java.lang.Object visitImportOrExport(parser.dart.Dart2Parser$ImportOrExportContext) -> visitImportOrExport
    java.lang.Object visitDottedIdentifierList(parser.dart.Dart2Parser$DottedIdentifierListContext) -> visitDottedIdentifierList
    java.lang.Object visitLibraryimport(parser.dart.Dart2Parser$LibraryimportContext) -> visitLibraryimport
    java.lang.Object visitImportSpecification(parser.dart.Dart2Parser$ImportSpecificationContext) -> visitImportSpecification
    java.lang.Object visitCombinator(parser.dart.Dart2Parser$CombinatorContext) -> visitCombinator
    java.lang.Object visitIdentifierList(parser.dart.Dart2Parser$IdentifierListContext) -> visitIdentifierList
    java.lang.Object visitLibraryExport(parser.dart.Dart2Parser$LibraryExportContext) -> visitLibraryExport
    java.lang.Object visitPartDirective(parser.dart.Dart2Parser$PartDirectiveContext) -> visitPartDirective
    java.lang.Object visitPartHeader(parser.dart.Dart2Parser$PartHeaderContext) -> visitPartHeader
    java.lang.Object visitPartDeclaration(parser.dart.Dart2Parser$PartDeclarationContext) -> visitPartDeclaration
    java.lang.Object visitUri(parser.dart.Dart2Parser$UriContext) -> visitUri
    java.lang.Object visitConfigurableUri(parser.dart.Dart2Parser$ConfigurableUriContext) -> visitConfigurableUri
    java.lang.Object visitConfigurationUri(parser.dart.Dart2Parser$ConfigurationUriContext) -> visitConfigurationUri
    java.lang.Object visitUriTest(parser.dart.Dart2Parser$UriTestContext) -> visitUriTest
    java.lang.Object visitDtype(parser.dart.Dart2Parser$DtypeContext) -> visitDtype
    java.lang.Object visitTypeName(parser.dart.Dart2Parser$TypeNameContext) -> visitTypeName
    java.lang.Object visitTypeArguments(parser.dart.Dart2Parser$TypeArgumentsContext) -> visitTypeArguments
    java.lang.Object visitTypeList(parser.dart.Dart2Parser$TypeListContext) -> visitTypeList
    java.lang.Object visitTypeAlias(parser.dart.Dart2Parser$TypeAliasContext) -> visitTypeAlias
    java.lang.Object visitTypeAliasBody(parser.dart.Dart2Parser$TypeAliasBodyContext) -> visitTypeAliasBody
    java.lang.Object visitFunctionTypeAlias(parser.dart.Dart2Parser$FunctionTypeAliasContext) -> visitFunctionTypeAlias
    java.lang.Object visitFunctionPrefix(parser.dart.Dart2Parser$FunctionPrefixContext) -> visitFunctionPrefix
parser.dart.Dart2Lexer -> parser.dart.Dart2Lexer:
    org.antlr.v4.runtime.dfa.DFA[] _decisionToDFA -> _decisionToDFA
    org.antlr.v4.runtime.atn.PredictionContextCache _sharedContextCache -> _sharedContextCache
    int T__0 -> T__0
    int T__1 -> T__1
    int T__2 -> T__2
    int T__3 -> T__3
    int T__4 -> T__4
    int T__5 -> T__5
    int T__6 -> T__6
    int T__7 -> T__7
    int T__8 -> T__8
    int T__9 -> T__9
    int T__10 -> T__10
    int T__11 -> T__11
    int T__12 -> T__12
    int T__13 -> T__13
    int T__14 -> T__14
    int T__15 -> T__15
    int T__16 -> T__16
    int T__17 -> T__17
    int T__18 -> T__18
    int T__19 -> T__19
    int T__20 -> T__20
    int T__21 -> T__21
    int T__22 -> T__22
    int T__23 -> T__23
    int T__24 -> T__24
    int T__25 -> T__25
    int T__26 -> T__26
    int T__27 -> T__27
    int T__28 -> T__28
    int T__29 -> T__29
    int T__30 -> T__30
    int T__31 -> T__31
    int T__32 -> T__32
    int T__33 -> T__33
    int T__34 -> T__34
    int T__35 -> T__35
    int T__36 -> T__36
    int T__37 -> T__37
    int T__38 -> T__38
    int T__39 -> T__39
    int T__40 -> T__40
    int T__41 -> T__41
    int T__42 -> T__42
    int T__43 -> T__43
    int T__44 -> T__44
    int T__45 -> T__45
    int T__46 -> T__46
    int T__47 -> T__47
    int T__48 -> T__48
    int T__49 -> T__49
    int T__50 -> T__50
    int T__51 -> T__51
    int T__52 -> T__52
    int T__53 -> T__53
    int T__54 -> T__54
    int T__55 -> T__55
    int T__56 -> T__56
    int T__57 -> T__57
    int T__58 -> T__58
    int T__59 -> T__59
    int T__60 -> T__60
    int T__61 -> T__61
    int T__62 -> T__62
    int T__63 -> T__63
    int T__64 -> T__64
    int T__65 -> T__65
    int T__66 -> T__66
    int T__67 -> T__67
    int T__68 -> T__68
    int T__69 -> T__69
    int T__70 -> T__70
    int T__71 -> T__71
    int T__72 -> T__72
    int T__73 -> T__73
    int T__74 -> T__74
    int T__75 -> T__75
    int T__76 -> T__76
    int T__77 -> T__77
    int T__78 -> T__78
    int T__79 -> T__79
    int T__80 -> T__80
    int T__81 -> T__81
    int T__82 -> T__82
    int T__83 -> T__83
    int T__84 -> T__84
    int T__85 -> T__85
    int T__86 -> T__86
    int T__87 -> T__87
    int T__88 -> T__88
    int T__89 -> T__89
    int T__90 -> T__90
    int T__91 -> T__91
    int T__92 -> T__92
    int T__93 -> T__93
    int T__94 -> T__94
    int T__95 -> T__95
    int T__96 -> T__96
    int T__97 -> T__97
    int T__98 -> T__98
    int T__99 -> T__99
    int T__100 -> T__100
    int T__101 -> T__101
    int T__102 -> T__102
    int T__103 -> T__103
    int T__104 -> T__104
    int T__105 -> T__105
    int T__106 -> T__106
    int T__107 -> T__107
    int T__108 -> T__108
    int T__109 -> T__109
    int T__110 -> T__110
    int T__111 -> T__111
    int STATIC -> STATIC
    int FINAL -> FINAL
    int CONST -> CONST
    int VAR -> VAR
    int VOID -> VOID
    int WHITESPACE -> WHITESPACE
    int NUMBER -> NUMBER
    int HEX_NUMBER -> HEX_NUMBER
    int SingleLineString -> SingleLineString
    int MultiLineString -> MultiLineString
    int NEWLINE -> NEWLINE
    int IDENTIFIER -> IDENTIFIER
    int SINGLE_LINE_COMMENT -> SINGLE_LINE_COMMENT
    int MULTI_LINE_COMMENT -> MULTI_LINE_COMMENT
    java.lang.String[] channelNames -> channelNames
    java.lang.String[] modeNames -> modeNames
    java.lang.String[] ruleNames -> ruleNames
    java.lang.String[] _LITERAL_NAMES -> _LITERAL_NAMES
    java.lang.String[] _SYMBOLIC_NAMES -> _SYMBOLIC_NAMES
    org.antlr.v4.runtime.Vocabulary VOCABULARY -> VOCABULARY
    java.lang.String[] tokenNames -> tokenNames
    java.lang.String _serializedATN -> _serializedATN
    org.antlr.v4.runtime.atn.ATN _ATN -> _ATN
    java.lang.String[] makeRuleNames() -> makeRuleNames
    java.lang.String[] makeLiteralNames() -> makeLiteralNames
    java.lang.String[] makeSymbolicNames() -> makeSymbolicNames
    java.lang.String[] getTokenNames() -> getTokenNames
    org.antlr.v4.runtime.Vocabulary getVocabulary() -> getVocabulary
    void <init>(org.antlr.v4.runtime.CharStream) -> <init>
    java.lang.String getGrammarFileName() -> getGrammarFileName
    java.lang.String[] getRuleNames() -> getRuleNames
    java.lang.String getSerializedATN() -> getSerializedATN
    java.lang.String[] getChannelNames() -> getChannelNames
    java.lang.String[] getModeNames() -> getModeNames
    org.antlr.v4.runtime.atn.ATN getATN() -> getATN
    void <clinit>() -> <clinit>
parser.dart.Dart2Listener -> parser.dart.Dart2Listener:
    void enterCompilationUnit(parser.dart.Dart2Parser$CompilationUnitContext) -> enterCompilationUnit
    void exitCompilationUnit(parser.dart.Dart2Parser$CompilationUnitContext) -> exitCompilationUnit
    void enterVariableDeclaration(parser.dart.Dart2Parser$VariableDeclarationContext) -> enterVariableDeclaration
    void exitVariableDeclaration(parser.dart.Dart2Parser$VariableDeclarationContext) -> exitVariableDeclaration
    void enterDeclaredIdentifier(parser.dart.Dart2Parser$DeclaredIdentifierContext) -> enterDeclaredIdentifier
    void exitDeclaredIdentifier(parser.dart.Dart2Parser$DeclaredIdentifierContext) -> exitDeclaredIdentifier
    void enterFinalConstVarOrType(parser.dart.Dart2Parser$FinalConstVarOrTypeContext) -> enterFinalConstVarOrType
    void exitFinalConstVarOrType(parser.dart.Dart2Parser$FinalConstVarOrTypeContext) -> exitFinalConstVarOrType
    void enterVarOrType(parser.dart.Dart2Parser$VarOrTypeContext) -> enterVarOrType
    void exitVarOrType(parser.dart.Dart2Parser$VarOrTypeContext) -> exitVarOrType
    void enterInitializedVariableDeclaration(parser.dart.Dart2Parser$InitializedVariableDeclarationContext) -> enterInitializedVariableDeclaration
    void exitInitializedVariableDeclaration(parser.dart.Dart2Parser$InitializedVariableDeclarationContext) -> exitInitializedVariableDeclaration
    void enterInitializedIdentifier(parser.dart.Dart2Parser$InitializedIdentifierContext) -> enterInitializedIdentifier
    void exitInitializedIdentifier(parser.dart.Dart2Parser$InitializedIdentifierContext) -> exitInitializedIdentifier
    void enterInitializedIdentifierList(parser.dart.Dart2Parser$InitializedIdentifierListContext) -> enterInitializedIdentifierList
    void exitInitializedIdentifierList(parser.dart.Dart2Parser$InitializedIdentifierListContext) -> exitInitializedIdentifierList
    void enterFunctionSignature(parser.dart.Dart2Parser$FunctionSignatureContext) -> enterFunctionSignature
    void exitFunctionSignature(parser.dart.Dart2Parser$FunctionSignatureContext) -> exitFunctionSignature
    void enterFormalParameterPart(parser.dart.Dart2Parser$FormalParameterPartContext) -> enterFormalParameterPart
    void exitFormalParameterPart(parser.dart.Dart2Parser$FormalParameterPartContext) -> exitFormalParameterPart
    void enterReturnType(parser.dart.Dart2Parser$ReturnTypeContext) -> enterReturnType
    void exitReturnType(parser.dart.Dart2Parser$ReturnTypeContext) -> exitReturnType
    void enterFunctionBody(parser.dart.Dart2Parser$FunctionBodyContext) -> enterFunctionBody
    void exitFunctionBody(parser.dart.Dart2Parser$FunctionBodyContext) -> exitFunctionBody
    void enterBlock(parser.dart.Dart2Parser$BlockContext) -> enterBlock
    void exitBlock(parser.dart.Dart2Parser$BlockContext) -> exitBlock
    void enterFormalParameterList(parser.dart.Dart2Parser$FormalParameterListContext) -> enterFormalParameterList
    void exitFormalParameterList(parser.dart.Dart2Parser$FormalParameterListContext) -> exitFormalParameterList
    void enterNormalFormalParameters(parser.dart.Dart2Parser$NormalFormalParametersContext) -> enterNormalFormalParameters
    void exitNormalFormalParameters(parser.dart.Dart2Parser$NormalFormalParametersContext) -> exitNormalFormalParameters
    void enterOptionalFormalParameters(parser.dart.Dart2Parser$OptionalFormalParametersContext) -> enterOptionalFormalParameters
    void exitOptionalFormalParameters(parser.dart.Dart2Parser$OptionalFormalParametersContext) -> exitOptionalFormalParameters
    void enterOptionalPositionalFormalParameters(parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext) -> enterOptionalPositionalFormalParameters
    void exitOptionalPositionalFormalParameters(parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext) -> exitOptionalPositionalFormalParameters
    void enterNamedFormalParameters(parser.dart.Dart2Parser$NamedFormalParametersContext) -> enterNamedFormalParameters
    void exitNamedFormalParameters(parser.dart.Dart2Parser$NamedFormalParametersContext) -> exitNamedFormalParameters
    void enterNormalFormalParameter(parser.dart.Dart2Parser$NormalFormalParameterContext) -> enterNormalFormalParameter
    void exitNormalFormalParameter(parser.dart.Dart2Parser$NormalFormalParameterContext) -> exitNormalFormalParameter
    void enterFunctionFormalParameter(parser.dart.Dart2Parser$FunctionFormalParameterContext) -> enterFunctionFormalParameter
    void exitFunctionFormalParameter(parser.dart.Dart2Parser$FunctionFormalParameterContext) -> exitFunctionFormalParameter
    void enterSimpleFormalParameter(parser.dart.Dart2Parser$SimpleFormalParameterContext) -> enterSimpleFormalParameter
    void exitSimpleFormalParameter(parser.dart.Dart2Parser$SimpleFormalParameterContext) -> exitSimpleFormalParameter
    void enterFieldFormalParameter(parser.dart.Dart2Parser$FieldFormalParameterContext) -> enterFieldFormalParameter
    void exitFieldFormalParameter(parser.dart.Dart2Parser$FieldFormalParameterContext) -> exitFieldFormalParameter
    void enterDefaultFormalParameter(parser.dart.Dart2Parser$DefaultFormalParameterContext) -> enterDefaultFormalParameter
    void exitDefaultFormalParameter(parser.dart.Dart2Parser$DefaultFormalParameterContext) -> exitDefaultFormalParameter
    void enterDefaultNamedParameter(parser.dart.Dart2Parser$DefaultNamedParameterContext) -> enterDefaultNamedParameter
    void exitDefaultNamedParameter(parser.dart.Dart2Parser$DefaultNamedParameterContext) -> exitDefaultNamedParameter
    void enterClassDefinition(parser.dart.Dart2Parser$ClassDefinitionContext) -> enterClassDefinition
    void exitClassDefinition(parser.dart.Dart2Parser$ClassDefinitionContext) -> exitClassDefinition
    void enterMixins(parser.dart.Dart2Parser$MixinsContext) -> enterMixins
    void exitMixins(parser.dart.Dart2Parser$MixinsContext) -> exitMixins
    void enterClassMemberDefinition(parser.dart.Dart2Parser$ClassMemberDefinitionContext) -> enterClassMemberDefinition
    void exitClassMemberDefinition(parser.dart.Dart2Parser$ClassMemberDefinitionContext) -> exitClassMemberDefinition
    void enterMethodSignature(parser.dart.Dart2Parser$MethodSignatureContext) -> enterMethodSignature
    void exitMethodSignature(parser.dart.Dart2Parser$MethodSignatureContext) -> exitMethodSignature
    void enterDeclaration(parser.dart.Dart2Parser$DeclarationContext) -> enterDeclaration
    void exitDeclaration(parser.dart.Dart2Parser$DeclarationContext) -> exitDeclaration
    void enterStaticFinalDeclarationList(parser.dart.Dart2Parser$StaticFinalDeclarationListContext) -> enterStaticFinalDeclarationList
    void exitStaticFinalDeclarationList(parser.dart.Dart2Parser$StaticFinalDeclarationListContext) -> exitStaticFinalDeclarationList
    void enterStaticFinalDeclaration(parser.dart.Dart2Parser$StaticFinalDeclarationContext) -> enterStaticFinalDeclaration
    void exitStaticFinalDeclaration(parser.dart.Dart2Parser$StaticFinalDeclarationContext) -> exitStaticFinalDeclaration
    void enterOperatorSignature(parser.dart.Dart2Parser$OperatorSignatureContext) -> enterOperatorSignature
    void exitOperatorSignature(parser.dart.Dart2Parser$OperatorSignatureContext) -> exitOperatorSignature
    void enterOperator(parser.dart.Dart2Parser$OperatorContext) -> enterOperator
    void exitOperator(parser.dart.Dart2Parser$OperatorContext) -> exitOperator
    void enterBinaryOperator(parser.dart.Dart2Parser$BinaryOperatorContext) -> enterBinaryOperator
    void exitBinaryOperator(parser.dart.Dart2Parser$BinaryOperatorContext) -> exitBinaryOperator
    void enterGetterSignature(parser.dart.Dart2Parser$GetterSignatureContext) -> enterGetterSignature
    void exitGetterSignature(parser.dart.Dart2Parser$GetterSignatureContext) -> exitGetterSignature
    void enterSetterSignature(parser.dart.Dart2Parser$SetterSignatureContext) -> enterSetterSignature
    void exitSetterSignature(parser.dart.Dart2Parser$SetterSignatureContext) -> exitSetterSignature
    void enterConstructorSignature(parser.dart.Dart2Parser$ConstructorSignatureContext) -> enterConstructorSignature
    void exitConstructorSignature(parser.dart.Dart2Parser$ConstructorSignatureContext) -> exitConstructorSignature
    void enterRedirection(parser.dart.Dart2Parser$RedirectionContext) -> enterRedirection
    void exitRedirection(parser.dart.Dart2Parser$RedirectionContext) -> exitRedirection
    void enterInitializers(parser.dart.Dart2Parser$InitializersContext) -> enterInitializers
    void exitInitializers(parser.dart.Dart2Parser$InitializersContext) -> exitInitializers
    void enterInitializerListEntry(parser.dart.Dart2Parser$InitializerListEntryContext) -> enterInitializerListEntry
    void exitInitializerListEntry(parser.dart.Dart2Parser$InitializerListEntryContext) -> exitInitializerListEntry
    void enterFieldInitializer(parser.dart.Dart2Parser$FieldInitializerContext) -> enterFieldInitializer
    void exitFieldInitializer(parser.dart.Dart2Parser$FieldInitializerContext) -> exitFieldInitializer
    void enterFactoryConstructorSignature(parser.dart.Dart2Parser$FactoryConstructorSignatureContext) -> enterFactoryConstructorSignature
    void exitFactoryConstructorSignature(parser.dart.Dart2Parser$FactoryConstructorSignatureContext) -> exitFactoryConstructorSignature
    void enterRedirectingFactoryConstructorSignature(parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext) -> enterRedirectingFactoryConstructorSignature
    void exitRedirectingFactoryConstructorSignature(parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext) -> exitRedirectingFactoryConstructorSignature
    void enterConstantConstructorSignature(parser.dart.Dart2Parser$ConstantConstructorSignatureContext) -> enterConstantConstructorSignature
    void exitConstantConstructorSignature(parser.dart.Dart2Parser$ConstantConstructorSignatureContext) -> exitConstantConstructorSignature
    void enterSuperclass(parser.dart.Dart2Parser$SuperclassContext) -> enterSuperclass
    void exitSuperclass(parser.dart.Dart2Parser$SuperclassContext) -> exitSuperclass
    void enterInterfaces(parser.dart.Dart2Parser$InterfacesContext) -> enterInterfaces
    void exitInterfaces(parser.dart.Dart2Parser$InterfacesContext) -> exitInterfaces
    void enterMixinApplicationClass(parser.dart.Dart2Parser$MixinApplicationClassContext) -> enterMixinApplicationClass
    void exitMixinApplicationClass(parser.dart.Dart2Parser$MixinApplicationClassContext) -> exitMixinApplicationClass
    void enterMixinApplication(parser.dart.Dart2Parser$MixinApplicationContext) -> enterMixinApplication
    void exitMixinApplication(parser.dart.Dart2Parser$MixinApplicationContext) -> exitMixinApplication
    void enterEnumType(parser.dart.Dart2Parser$EnumTypeContext) -> enterEnumType
    void exitEnumType(parser.dart.Dart2Parser$EnumTypeContext) -> exitEnumType
    void enterEnumEntry(parser.dart.Dart2Parser$EnumEntryContext) -> enterEnumEntry
    void exitEnumEntry(parser.dart.Dart2Parser$EnumEntryContext) -> exitEnumEntry
    void enterTypeParameter(parser.dart.Dart2Parser$TypeParameterContext) -> enterTypeParameter
    void exitTypeParameter(parser.dart.Dart2Parser$TypeParameterContext) -> exitTypeParameter
    void enterTypeParameters(parser.dart.Dart2Parser$TypeParametersContext) -> enterTypeParameters
    void exitTypeParameters(parser.dart.Dart2Parser$TypeParametersContext) -> exitTypeParameters
    void enterMetadata(parser.dart.Dart2Parser$MetadataContext) -> enterMetadata
    void exitMetadata(parser.dart.Dart2Parser$MetadataContext) -> exitMetadata
    void enterExpression(parser.dart.Dart2Parser$ExpressionContext) -> enterExpression
    void exitExpression(parser.dart.Dart2Parser$ExpressionContext) -> exitExpression
    void enterExpressionWithoutCascade(parser.dart.Dart2Parser$ExpressionWithoutCascadeContext) -> enterExpressionWithoutCascade
    void exitExpressionWithoutCascade(parser.dart.Dart2Parser$ExpressionWithoutCascadeContext) -> exitExpressionWithoutCascade
    void enterExpressionList(parser.dart.Dart2Parser$ExpressionListContext) -> enterExpressionList
    void exitExpressionList(parser.dart.Dart2Parser$ExpressionListContext) -> exitExpressionList
    void enterPrimary(parser.dart.Dart2Parser$PrimaryContext) -> enterPrimary
    void exitPrimary(parser.dart.Dart2Parser$PrimaryContext) -> exitPrimary
    void enterLiteral(parser.dart.Dart2Parser$LiteralContext) -> enterLiteral
    void exitLiteral(parser.dart.Dart2Parser$LiteralContext) -> exitLiteral
    void enterNullLiteral(parser.dart.Dart2Parser$NullLiteralContext) -> enterNullLiteral
    void exitNullLiteral(parser.dart.Dart2Parser$NullLiteralContext) -> exitNullLiteral
    void enterNumericLiteral(parser.dart.Dart2Parser$NumericLiteralContext) -> enterNumericLiteral
    void exitNumericLiteral(parser.dart.Dart2Parser$NumericLiteralContext) -> exitNumericLiteral
    void enterBooleanLiteral(parser.dart.Dart2Parser$BooleanLiteralContext) -> enterBooleanLiteral
    void exitBooleanLiteral(parser.dart.Dart2Parser$BooleanLiteralContext) -> exitBooleanLiteral
    void enterStringLiteral(parser.dart.Dart2Parser$StringLiteralContext) -> enterStringLiteral
    void exitStringLiteral(parser.dart.Dart2Parser$StringLiteralContext) -> exitStringLiteral
    void enterStringInterpolation(parser.dart.Dart2Parser$StringInterpolationContext) -> enterStringInterpolation
    void exitStringInterpolation(parser.dart.Dart2Parser$StringInterpolationContext) -> exitStringInterpolation
    void enterSymbolLiteral(parser.dart.Dart2Parser$SymbolLiteralContext) -> enterSymbolLiteral
    void exitSymbolLiteral(parser.dart.Dart2Parser$SymbolLiteralContext) -> exitSymbolLiteral
    void enterListLiteral(parser.dart.Dart2Parser$ListLiteralContext) -> enterListLiteral
    void exitListLiteral(parser.dart.Dart2Parser$ListLiteralContext) -> exitListLiteral
    void enterMapLiteral(parser.dart.Dart2Parser$MapLiteralContext) -> enterMapLiteral
    void exitMapLiteral(parser.dart.Dart2Parser$MapLiteralContext) -> exitMapLiteral
    void enterMapLiteralEntry(parser.dart.Dart2Parser$MapLiteralEntryContext) -> enterMapLiteralEntry
    void exitMapLiteralEntry(parser.dart.Dart2Parser$MapLiteralEntryContext) -> exitMapLiteralEntry
    void enterThrowExpression(parser.dart.Dart2Parser$ThrowExpressionContext) -> enterThrowExpression
    void exitThrowExpression(parser.dart.Dart2Parser$ThrowExpressionContext) -> exitThrowExpression
    void enterThrowExpressionWithoutCascade(parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext) -> enterThrowExpressionWithoutCascade
    void exitThrowExpressionWithoutCascade(parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext) -> exitThrowExpressionWithoutCascade
    void enterFunctionExpression(parser.dart.Dart2Parser$FunctionExpressionContext) -> enterFunctionExpression
    void exitFunctionExpression(parser.dart.Dart2Parser$FunctionExpressionContext) -> exitFunctionExpression
    void enterThisExpression(parser.dart.Dart2Parser$ThisExpressionContext) -> enterThisExpression
    void exitThisExpression(parser.dart.Dart2Parser$ThisExpressionContext) -> exitThisExpression
    void enterNayaExpression(parser.dart.Dart2Parser$NayaExpressionContext) -> enterNayaExpression
    void exitNayaExpression(parser.dart.Dart2Parser$NayaExpressionContext) -> exitNayaExpression
    void enterConstObjectExpression(parser.dart.Dart2Parser$ConstObjectExpressionContext) -> enterConstObjectExpression
    void exitConstObjectExpression(parser.dart.Dart2Parser$ConstObjectExpressionContext) -> exitConstObjectExpression
    void enterArguments(parser.dart.Dart2Parser$ArgumentsContext) -> enterArguments
    void exitArguments(parser.dart.Dart2Parser$ArgumentsContext) -> exitArguments
    void enterArgumentList(parser.dart.Dart2Parser$ArgumentListContext) -> enterArgumentList
    void exitArgumentList(parser.dart.Dart2Parser$ArgumentListContext) -> exitArgumentList
    void enterNamedArgument(parser.dart.Dart2Parser$NamedArgumentContext) -> enterNamedArgument
    void exitNamedArgument(parser.dart.Dart2Parser$NamedArgumentContext) -> exitNamedArgument
    void enterCascadeSection(parser.dart.Dart2Parser$CascadeSectionContext) -> enterCascadeSection
    void exitCascadeSection(parser.dart.Dart2Parser$CascadeSectionContext) -> exitCascadeSection
    void enterCascadeSelector(parser.dart.Dart2Parser$CascadeSelectorContext) -> enterCascadeSelector
    void exitCascadeSelector(parser.dart.Dart2Parser$CascadeSelectorContext) -> exitCascadeSelector
    void enterArgumentPart(parser.dart.Dart2Parser$ArgumentPartContext) -> enterArgumentPart
    void exitArgumentPart(parser.dart.Dart2Parser$ArgumentPartContext) -> exitArgumentPart
    void enterAssignmentOperator(parser.dart.Dart2Parser$AssignmentOperatorContext) -> enterAssignmentOperator
    void exitAssignmentOperator(parser.dart.Dart2Parser$AssignmentOperatorContext) -> exitAssignmentOperator
    void enterCompoundAssignmentOperator(parser.dart.Dart2Parser$CompoundAssignmentOperatorContext) -> enterCompoundAssignmentOperator
    void exitCompoundAssignmentOperator(parser.dart.Dart2Parser$CompoundAssignmentOperatorContext) -> exitCompoundAssignmentOperator
    void enterConditionalExpression(parser.dart.Dart2Parser$ConditionalExpressionContext) -> enterConditionalExpression
    void exitConditionalExpression(parser.dart.Dart2Parser$ConditionalExpressionContext) -> exitConditionalExpression
    void enterIfNullExpression(parser.dart.Dart2Parser$IfNullExpressionContext) -> enterIfNullExpression
    void exitIfNullExpression(parser.dart.Dart2Parser$IfNullExpressionContext) -> exitIfNullExpression
    void enterLogicalOrExpression(parser.dart.Dart2Parser$LogicalOrExpressionContext) -> enterLogicalOrExpression
    void exitLogicalOrExpression(parser.dart.Dart2Parser$LogicalOrExpressionContext) -> exitLogicalOrExpression
    void enterLogicalAndExpression(parser.dart.Dart2Parser$LogicalAndExpressionContext) -> enterLogicalAndExpression
    void exitLogicalAndExpression(parser.dart.Dart2Parser$LogicalAndExpressionContext) -> exitLogicalAndExpression
    void enterEqualityExpression(parser.dart.Dart2Parser$EqualityExpressionContext) -> enterEqualityExpression
    void exitEqualityExpression(parser.dart.Dart2Parser$EqualityExpressionContext) -> exitEqualityExpression
    void enterEqualityOperator(parser.dart.Dart2Parser$EqualityOperatorContext) -> enterEqualityOperator
    void exitEqualityOperator(parser.dart.Dart2Parser$EqualityOperatorContext) -> exitEqualityOperator
    void enterRelationalExpression(parser.dart.Dart2Parser$RelationalExpressionContext) -> enterRelationalExpression
    void exitRelationalExpression(parser.dart.Dart2Parser$RelationalExpressionContext) -> exitRelationalExpression
    void enterRelationalOperator(parser.dart.Dart2Parser$RelationalOperatorContext) -> enterRelationalOperator
    void exitRelationalOperator(parser.dart.Dart2Parser$RelationalOperatorContext) -> exitRelationalOperator
    void enterBitwiseOrExpression(parser.dart.Dart2Parser$BitwiseOrExpressionContext) -> enterBitwiseOrExpression
    void exitBitwiseOrExpression(parser.dart.Dart2Parser$BitwiseOrExpressionContext) -> exitBitwiseOrExpression
    void enterBitwiseXorExpression(parser.dart.Dart2Parser$BitwiseXorExpressionContext) -> enterBitwiseXorExpression
    void exitBitwiseXorExpression(parser.dart.Dart2Parser$BitwiseXorExpressionContext) -> exitBitwiseXorExpression
    void enterBitwiseAndExpression(parser.dart.Dart2Parser$BitwiseAndExpressionContext) -> enterBitwiseAndExpression
    void exitBitwiseAndExpression(parser.dart.Dart2Parser$BitwiseAndExpressionContext) -> exitBitwiseAndExpression
    void enterBitwiseOperator(parser.dart.Dart2Parser$BitwiseOperatorContext) -> enterBitwiseOperator
    void exitBitwiseOperator(parser.dart.Dart2Parser$BitwiseOperatorContext) -> exitBitwiseOperator
    void enterShiftExpression(parser.dart.Dart2Parser$ShiftExpressionContext) -> enterShiftExpression
    void exitShiftExpression(parser.dart.Dart2Parser$ShiftExpressionContext) -> exitShiftExpression
    void enterShiftOperator(parser.dart.Dart2Parser$ShiftOperatorContext) -> enterShiftOperator
    void exitShiftOperator(parser.dart.Dart2Parser$ShiftOperatorContext) -> exitShiftOperator
    void enterAdditiveExpression(parser.dart.Dart2Parser$AdditiveExpressionContext) -> enterAdditiveExpression
    void exitAdditiveExpression(parser.dart.Dart2Parser$AdditiveExpressionContext) -> exitAdditiveExpression
    void enterAdditiveOperator(parser.dart.Dart2Parser$AdditiveOperatorContext) -> enterAdditiveOperator
    void exitAdditiveOperator(parser.dart.Dart2Parser$AdditiveOperatorContext) -> exitAdditiveOperator
    void enterMultiplicativeExpression(parser.dart.Dart2Parser$MultiplicativeExpressionContext) -> enterMultiplicativeExpression
    void exitMultiplicativeExpression(parser.dart.Dart2Parser$MultiplicativeExpressionContext) -> exitMultiplicativeExpression
    void enterMultiplicativeOperator(parser.dart.Dart2Parser$MultiplicativeOperatorContext) -> enterMultiplicativeOperator
    void exitMultiplicativeOperator(parser.dart.Dart2Parser$MultiplicativeOperatorContext) -> exitMultiplicativeOperator
    void enterUnaryExpression(parser.dart.Dart2Parser$UnaryExpressionContext) -> enterUnaryExpression
    void exitUnaryExpression(parser.dart.Dart2Parser$UnaryExpressionContext) -> exitUnaryExpression
    void enterPrefixOperator(parser.dart.Dart2Parser$PrefixOperatorContext) -> enterPrefixOperator
    void exitPrefixOperator(parser.dart.Dart2Parser$PrefixOperatorContext) -> exitPrefixOperator
    void enterMinusOperator(parser.dart.Dart2Parser$MinusOperatorContext) -> enterMinusOperator
    void exitMinusOperator(parser.dart.Dart2Parser$MinusOperatorContext) -> exitMinusOperator
    void enterNegationOperator(parser.dart.Dart2Parser$NegationOperatorContext) -> enterNegationOperator
    void exitNegationOperator(parser.dart.Dart2Parser$NegationOperatorContext) -> exitNegationOperator
    void enterTildeOperator(parser.dart.Dart2Parser$TildeOperatorContext) -> enterTildeOperator
    void exitTildeOperator(parser.dart.Dart2Parser$TildeOperatorContext) -> exitTildeOperator
    void enterAwaitExpression(parser.dart.Dart2Parser$AwaitExpressionContext) -> enterAwaitExpression
    void exitAwaitExpression(parser.dart.Dart2Parser$AwaitExpressionContext) -> exitAwaitExpression
    void enterPostfixExpression(parser.dart.Dart2Parser$PostfixExpressionContext) -> enterPostfixExpression
    void exitPostfixExpression(parser.dart.Dart2Parser$PostfixExpressionContext) -> exitPostfixExpression
    void enterPostfixOperator(parser.dart.Dart2Parser$PostfixOperatorContext) -> enterPostfixOperator
    void exitPostfixOperator(parser.dart.Dart2Parser$PostfixOperatorContext) -> exitPostfixOperator
    void enterSelector(parser.dart.Dart2Parser$SelectorContext) -> enterSelector
    void exitSelector(parser.dart.Dart2Parser$SelectorContext) -> exitSelector
    void enterIncrementOperator(parser.dart.Dart2Parser$IncrementOperatorContext) -> enterIncrementOperator
    void exitIncrementOperator(parser.dart.Dart2Parser$IncrementOperatorContext) -> exitIncrementOperator
    void enterAssignableExpression(parser.dart.Dart2Parser$AssignableExpressionContext) -> enterAssignableExpression
    void exitAssignableExpression(parser.dart.Dart2Parser$AssignableExpressionContext) -> exitAssignableExpression
    void enterUnconditionalAssignableSelector(parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext) -> enterUnconditionalAssignableSelector
    void exitUnconditionalAssignableSelector(parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext) -> exitUnconditionalAssignableSelector
    void enterAssignableSelector(parser.dart.Dart2Parser$AssignableSelectorContext) -> enterAssignableSelector
    void exitAssignableSelector(parser.dart.Dart2Parser$AssignableSelectorContext) -> exitAssignableSelector
    void enterIdentifier(parser.dart.Dart2Parser$IdentifierContext) -> enterIdentifier
    void exitIdentifier(parser.dart.Dart2Parser$IdentifierContext) -> exitIdentifier
    void enterQualified(parser.dart.Dart2Parser$QualifiedContext) -> enterQualified
    void exitQualified(parser.dart.Dart2Parser$QualifiedContext) -> exitQualified
    void enterTypeTest(parser.dart.Dart2Parser$TypeTestContext) -> enterTypeTest
    void exitTypeTest(parser.dart.Dart2Parser$TypeTestContext) -> exitTypeTest
    void enterIsOperator(parser.dart.Dart2Parser$IsOperatorContext) -> enterIsOperator
    void exitIsOperator(parser.dart.Dart2Parser$IsOperatorContext) -> exitIsOperator
    void enterTypeCast(parser.dart.Dart2Parser$TypeCastContext) -> enterTypeCast
    void exitTypeCast(parser.dart.Dart2Parser$TypeCastContext) -> exitTypeCast
    void enterAsOperator(parser.dart.Dart2Parser$AsOperatorContext) -> enterAsOperator
    void exitAsOperator(parser.dart.Dart2Parser$AsOperatorContext) -> exitAsOperator
    void enterStatements(parser.dart.Dart2Parser$StatementsContext) -> enterStatements
    void exitStatements(parser.dart.Dart2Parser$StatementsContext) -> exitStatements
    void enterStatement(parser.dart.Dart2Parser$StatementContext) -> enterStatement
    void exitStatement(parser.dart.Dart2Parser$StatementContext) -> exitStatement
    void enterNonLabledStatment(parser.dart.Dart2Parser$NonLabledStatmentContext) -> enterNonLabledStatment
    void exitNonLabledStatment(parser.dart.Dart2Parser$NonLabledStatmentContext) -> exitNonLabledStatment
    void enterExpressionStatement(parser.dart.Dart2Parser$ExpressionStatementContext) -> enterExpressionStatement
    void exitExpressionStatement(parser.dart.Dart2Parser$ExpressionStatementContext) -> exitExpressionStatement
    void enterLocalVariableDeclaration(parser.dart.Dart2Parser$LocalVariableDeclarationContext) -> enterLocalVariableDeclaration
    void exitLocalVariableDeclaration(parser.dart.Dart2Parser$LocalVariableDeclarationContext) -> exitLocalVariableDeclaration
    void enterLocalFunctionDeclaration(parser.dart.Dart2Parser$LocalFunctionDeclarationContext) -> enterLocalFunctionDeclaration
    void exitLocalFunctionDeclaration(parser.dart.Dart2Parser$LocalFunctionDeclarationContext) -> exitLocalFunctionDeclaration
    void enterIfStatement(parser.dart.Dart2Parser$IfStatementContext) -> enterIfStatement
    void exitIfStatement(parser.dart.Dart2Parser$IfStatementContext) -> exitIfStatement
    void enterForStatement(parser.dart.Dart2Parser$ForStatementContext) -> enterForStatement
    void exitForStatement(parser.dart.Dart2Parser$ForStatementContext) -> exitForStatement
    void enterForLoopParts(parser.dart.Dart2Parser$ForLoopPartsContext) -> enterForLoopParts
    void exitForLoopParts(parser.dart.Dart2Parser$ForLoopPartsContext) -> exitForLoopParts
    void enterForInitializerStatement(parser.dart.Dart2Parser$ForInitializerStatementContext) -> enterForInitializerStatement
    void exitForInitializerStatement(parser.dart.Dart2Parser$ForInitializerStatementContext) -> exitForInitializerStatement
    void enterWhileStatement(parser.dart.Dart2Parser$WhileStatementContext) -> enterWhileStatement
    void exitWhileStatement(parser.dart.Dart2Parser$WhileStatementContext) -> exitWhileStatement
    void enterDoStatement(parser.dart.Dart2Parser$DoStatementContext) -> enterDoStatement
    void exitDoStatement(parser.dart.Dart2Parser$DoStatementContext) -> exitDoStatement
    void enterSwitchStatement(parser.dart.Dart2Parser$SwitchStatementContext) -> enterSwitchStatement
    void exitSwitchStatement(parser.dart.Dart2Parser$SwitchStatementContext) -> exitSwitchStatement
    void enterSwitchCase(parser.dart.Dart2Parser$SwitchCaseContext) -> enterSwitchCase
    void exitSwitchCase(parser.dart.Dart2Parser$SwitchCaseContext) -> exitSwitchCase
    void enterDefaultCase(parser.dart.Dart2Parser$DefaultCaseContext) -> enterDefaultCase
    void exitDefaultCase(parser.dart.Dart2Parser$DefaultCaseContext) -> exitDefaultCase
    void enterRethrowStatment(parser.dart.Dart2Parser$RethrowStatmentContext) -> enterRethrowStatment
    void exitRethrowStatment(parser.dart.Dart2Parser$RethrowStatmentContext) -> exitRethrowStatment
    void enterTryStatement(parser.dart.Dart2Parser$TryStatementContext) -> enterTryStatement
    void exitTryStatement(parser.dart.Dart2Parser$TryStatementContext) -> exitTryStatement
    void enterOnPart(parser.dart.Dart2Parser$OnPartContext) -> enterOnPart
    void exitOnPart(parser.dart.Dart2Parser$OnPartContext) -> exitOnPart
    void enterCatchPart(parser.dart.Dart2Parser$CatchPartContext) -> enterCatchPart
    void exitCatchPart(parser.dart.Dart2Parser$CatchPartContext) -> exitCatchPart
    void enterFinallyPart(parser.dart.Dart2Parser$FinallyPartContext) -> enterFinallyPart
    void exitFinallyPart(parser.dart.Dart2Parser$FinallyPartContext) -> exitFinallyPart
    void enterReturnStatement(parser.dart.Dart2Parser$ReturnStatementContext) -> enterReturnStatement
    void exitReturnStatement(parser.dart.Dart2Parser$ReturnStatementContext) -> exitReturnStatement
    void enterLabel(parser.dart.Dart2Parser$LabelContext) -> enterLabel
    void exitLabel(parser.dart.Dart2Parser$LabelContext) -> exitLabel
    void enterBreakStatement(parser.dart.Dart2Parser$BreakStatementContext) -> enterBreakStatement
    void exitBreakStatement(parser.dart.Dart2Parser$BreakStatementContext) -> exitBreakStatement
    void enterContinueStatement(parser.dart.Dart2Parser$ContinueStatementContext) -> enterContinueStatement
    void exitContinueStatement(parser.dart.Dart2Parser$ContinueStatementContext) -> exitContinueStatement
    void enterYieldStatement(parser.dart.Dart2Parser$YieldStatementContext) -> enterYieldStatement
    void exitYieldStatement(parser.dart.Dart2Parser$YieldStatementContext) -> exitYieldStatement
    void enterYieldEachStatement(parser.dart.Dart2Parser$YieldEachStatementContext) -> enterYieldEachStatement
    void exitYieldEachStatement(parser.dart.Dart2Parser$YieldEachStatementContext) -> exitYieldEachStatement
    void enterAssertStatement(parser.dart.Dart2Parser$AssertStatementContext) -> enterAssertStatement
    void exitAssertStatement(parser.dart.Dart2Parser$AssertStatementContext) -> exitAssertStatement
    void enterAssertion(parser.dart.Dart2Parser$AssertionContext) -> enterAssertion
    void exitAssertion(parser.dart.Dart2Parser$AssertionContext) -> exitAssertion
    void enterTopLevelDefinition(parser.dart.Dart2Parser$TopLevelDefinitionContext) -> enterTopLevelDefinition
    void exitTopLevelDefinition(parser.dart.Dart2Parser$TopLevelDefinitionContext) -> exitTopLevelDefinition
    void enterGetOrSet(parser.dart.Dart2Parser$GetOrSetContext) -> enterGetOrSet
    void exitGetOrSet(parser.dart.Dart2Parser$GetOrSetContext) -> exitGetOrSet
    void enterLibraryDefinition(parser.dart.Dart2Parser$LibraryDefinitionContext) -> enterLibraryDefinition
    void exitLibraryDefinition(parser.dart.Dart2Parser$LibraryDefinitionContext) -> exitLibraryDefinition
    void enterScriptTag(parser.dart.Dart2Parser$ScriptTagContext) -> enterScriptTag
    void exitScriptTag(parser.dart.Dart2Parser$ScriptTagContext) -> exitScriptTag
    void enterLibraryName(parser.dart.Dart2Parser$LibraryNameContext) -> enterLibraryName
    void exitLibraryName(parser.dart.Dart2Parser$LibraryNameContext) -> exitLibraryName
    void enterImportOrExport(parser.dart.Dart2Parser$ImportOrExportContext) -> enterImportOrExport
    void exitImportOrExport(parser.dart.Dart2Parser$ImportOrExportContext) -> exitImportOrExport
    void enterDottedIdentifierList(parser.dart.Dart2Parser$DottedIdentifierListContext) -> enterDottedIdentifierList
    void exitDottedIdentifierList(parser.dart.Dart2Parser$DottedIdentifierListContext) -> exitDottedIdentifierList
    void enterLibraryimport(parser.dart.Dart2Parser$LibraryimportContext) -> enterLibraryimport
    void exitLibraryimport(parser.dart.Dart2Parser$LibraryimportContext) -> exitLibraryimport
    void enterImportSpecification(parser.dart.Dart2Parser$ImportSpecificationContext) -> enterImportSpecification
    void exitImportSpecification(parser.dart.Dart2Parser$ImportSpecificationContext) -> exitImportSpecification
    void enterCombinator(parser.dart.Dart2Parser$CombinatorContext) -> enterCombinator
    void exitCombinator(parser.dart.Dart2Parser$CombinatorContext) -> exitCombinator
    void enterIdentifierList(parser.dart.Dart2Parser$IdentifierListContext) -> enterIdentifierList
    void exitIdentifierList(parser.dart.Dart2Parser$IdentifierListContext) -> exitIdentifierList
    void enterLibraryExport(parser.dart.Dart2Parser$LibraryExportContext) -> enterLibraryExport
    void exitLibraryExport(parser.dart.Dart2Parser$LibraryExportContext) -> exitLibraryExport
    void enterPartDirective(parser.dart.Dart2Parser$PartDirectiveContext) -> enterPartDirective
    void exitPartDirective(parser.dart.Dart2Parser$PartDirectiveContext) -> exitPartDirective
    void enterPartHeader(parser.dart.Dart2Parser$PartHeaderContext) -> enterPartHeader
    void exitPartHeader(parser.dart.Dart2Parser$PartHeaderContext) -> exitPartHeader
    void enterPartDeclaration(parser.dart.Dart2Parser$PartDeclarationContext) -> enterPartDeclaration
    void exitPartDeclaration(parser.dart.Dart2Parser$PartDeclarationContext) -> exitPartDeclaration
    void enterUri(parser.dart.Dart2Parser$UriContext) -> enterUri
    void exitUri(parser.dart.Dart2Parser$UriContext) -> exitUri
    void enterConfigurableUri(parser.dart.Dart2Parser$ConfigurableUriContext) -> enterConfigurableUri
    void exitConfigurableUri(parser.dart.Dart2Parser$ConfigurableUriContext) -> exitConfigurableUri
    void enterConfigurationUri(parser.dart.Dart2Parser$ConfigurationUriContext) -> enterConfigurationUri
    void exitConfigurationUri(parser.dart.Dart2Parser$ConfigurationUriContext) -> exitConfigurationUri
    void enterUriTest(parser.dart.Dart2Parser$UriTestContext) -> enterUriTest
    void exitUriTest(parser.dart.Dart2Parser$UriTestContext) -> exitUriTest
    void enterDtype(parser.dart.Dart2Parser$DtypeContext) -> enterDtype
    void exitDtype(parser.dart.Dart2Parser$DtypeContext) -> exitDtype
    void enterTypeName(parser.dart.Dart2Parser$TypeNameContext) -> enterTypeName
    void exitTypeName(parser.dart.Dart2Parser$TypeNameContext) -> exitTypeName
    void enterTypeArguments(parser.dart.Dart2Parser$TypeArgumentsContext) -> enterTypeArguments
    void exitTypeArguments(parser.dart.Dart2Parser$TypeArgumentsContext) -> exitTypeArguments
    void enterTypeList(parser.dart.Dart2Parser$TypeListContext) -> enterTypeList
    void exitTypeList(parser.dart.Dart2Parser$TypeListContext) -> exitTypeList
    void enterTypeAlias(parser.dart.Dart2Parser$TypeAliasContext) -> enterTypeAlias
    void exitTypeAlias(parser.dart.Dart2Parser$TypeAliasContext) -> exitTypeAlias
    void enterTypeAliasBody(parser.dart.Dart2Parser$TypeAliasBodyContext) -> enterTypeAliasBody
    void exitTypeAliasBody(parser.dart.Dart2Parser$TypeAliasBodyContext) -> exitTypeAliasBody
    void enterFunctionTypeAlias(parser.dart.Dart2Parser$FunctionTypeAliasContext) -> enterFunctionTypeAlias
    void exitFunctionTypeAlias(parser.dart.Dart2Parser$FunctionTypeAliasContext) -> exitFunctionTypeAlias
    void enterFunctionPrefix(parser.dart.Dart2Parser$FunctionPrefixContext) -> enterFunctionPrefix
    void exitFunctionPrefix(parser.dart.Dart2Parser$FunctionPrefixContext) -> exitFunctionPrefix
parser.dart.Dart2Parser -> parser.dart.Dart2Parser:
    org.antlr.v4.runtime.dfa.DFA[] _decisionToDFA -> _decisionToDFA
    org.antlr.v4.runtime.atn.PredictionContextCache _sharedContextCache -> _sharedContextCache
    int T__0 -> T__0
    int T__1 -> T__1
    int T__2 -> T__2
    int T__3 -> T__3
    int T__4 -> T__4
    int T__5 -> T__5
    int T__6 -> T__6
    int T__7 -> T__7
    int T__8 -> T__8
    int T__9 -> T__9
    int T__10 -> T__10
    int T__11 -> T__11
    int T__12 -> T__12
    int T__13 -> T__13
    int T__14 -> T__14
    int T__15 -> T__15
    int T__16 -> T__16
    int T__17 -> T__17
    int T__18 -> T__18
    int T__19 -> T__19
    int T__20 -> T__20
    int T__21 -> T__21
    int T__22 -> T__22
    int T__23 -> T__23
    int T__24 -> T__24
    int T__25 -> T__25
    int T__26 -> T__26
    int T__27 -> T__27
    int T__28 -> T__28
    int T__29 -> T__29
    int T__30 -> T__30
    int T__31 -> T__31
    int T__32 -> T__32
    int T__33 -> T__33
    int T__34 -> T__34
    int T__35 -> T__35
    int T__36 -> T__36
    int T__37 -> T__37
    int T__38 -> T__38
    int T__39 -> T__39
    int T__40 -> T__40
    int T__41 -> T__41
    int T__42 -> T__42
    int T__43 -> T__43
    int T__44 -> T__44
    int T__45 -> T__45
    int T__46 -> T__46
    int T__47 -> T__47
    int T__48 -> T__48
    int T__49 -> T__49
    int T__50 -> T__50
    int T__51 -> T__51
    int T__52 -> T__52
    int T__53 -> T__53
    int T__54 -> T__54
    int T__55 -> T__55
    int T__56 -> T__56
    int T__57 -> T__57
    int T__58 -> T__58
    int T__59 -> T__59
    int T__60 -> T__60
    int T__61 -> T__61
    int T__62 -> T__62
    int T__63 -> T__63
    int T__64 -> T__64
    int T__65 -> T__65
    int T__66 -> T__66
    int T__67 -> T__67
    int T__68 -> T__68
    int T__69 -> T__69
    int T__70 -> T__70
    int T__71 -> T__71
    int T__72 -> T__72
    int T__73 -> T__73
    int T__74 -> T__74
    int T__75 -> T__75
    int T__76 -> T__76
    int T__77 -> T__77
    int T__78 -> T__78
    int T__79 -> T__79
    int T__80 -> T__80
    int T__81 -> T__81
    int T__82 -> T__82
    int T__83 -> T__83
    int T__84 -> T__84
    int T__85 -> T__85
    int T__86 -> T__86
    int T__87 -> T__87
    int T__88 -> T__88
    int T__89 -> T__89
    int T__90 -> T__90
    int T__91 -> T__91
    int T__92 -> T__92
    int T__93 -> T__93
    int T__94 -> T__94
    int T__95 -> T__95
    int T__96 -> T__96
    int T__97 -> T__97
    int T__98 -> T__98
    int T__99 -> T__99
    int T__100 -> T__100
    int T__101 -> T__101
    int T__102 -> T__102
    int T__103 -> T__103
    int T__104 -> T__104
    int T__105 -> T__105
    int T__106 -> T__106
    int T__107 -> T__107
    int T__108 -> T__108
    int T__109 -> T__109
    int T__110 -> T__110
    int T__111 -> T__111
    int STATIC -> STATIC
    int FINAL -> FINAL
    int CONST -> CONST
    int VAR -> VAR
    int VOID -> VOID
    int WHITESPACE -> WHITESPACE
    int NUMBER -> NUMBER
    int HEX_NUMBER -> HEX_NUMBER
    int SingleLineString -> SingleLineString
    int MultiLineString -> MultiLineString
    int NEWLINE -> NEWLINE
    int IDENTIFIER -> IDENTIFIER
    int SINGLE_LINE_COMMENT -> SINGLE_LINE_COMMENT
    int MULTI_LINE_COMMENT -> MULTI_LINE_COMMENT
    int RULE_compilationUnit -> RULE_compilationUnit
    int RULE_variableDeclaration -> RULE_variableDeclaration
    int RULE_declaredIdentifier -> RULE_declaredIdentifier
    int RULE_finalConstVarOrType -> RULE_finalConstVarOrType
    int RULE_varOrType -> RULE_varOrType
    int RULE_initializedVariableDeclaration -> RULE_initializedVariableDeclaration
    int RULE_initializedIdentifier -> RULE_initializedIdentifier
    int RULE_initializedIdentifierList -> RULE_initializedIdentifierList
    int RULE_functionSignature -> RULE_functionSignature
    int RULE_formalParameterPart -> RULE_formalParameterPart
    int RULE_returnType -> RULE_returnType
    int RULE_functionBody -> RULE_functionBody
    int RULE_block -> RULE_block
    int RULE_formalParameterList -> RULE_formalParameterList
    int RULE_normalFormalParameters -> RULE_normalFormalParameters
    int RULE_optionalFormalParameters -> RULE_optionalFormalParameters
    int RULE_optionalPositionalFormalParameters -> RULE_optionalPositionalFormalParameters
    int RULE_namedFormalParameters -> RULE_namedFormalParameters
    int RULE_normalFormalParameter -> RULE_normalFormalParameter
    int RULE_functionFormalParameter -> RULE_functionFormalParameter
    int RULE_simpleFormalParameter -> RULE_simpleFormalParameter
    int RULE_fieldFormalParameter -> RULE_fieldFormalParameter
    int RULE_defaultFormalParameter -> RULE_defaultFormalParameter
    int RULE_defaultNamedParameter -> RULE_defaultNamedParameter
    int RULE_classDefinition -> RULE_classDefinition
    int RULE_mixins -> RULE_mixins
    int RULE_classMemberDefinition -> RULE_classMemberDefinition
    int RULE_methodSignature -> RULE_methodSignature
    int RULE_declaration -> RULE_declaration
    int RULE_staticFinalDeclarationList -> RULE_staticFinalDeclarationList
    int RULE_staticFinalDeclaration -> RULE_staticFinalDeclaration
    int RULE_operatorSignature -> RULE_operatorSignature
    int RULE_operator -> RULE_operator
    int RULE_binaryOperator -> RULE_binaryOperator
    int RULE_getterSignature -> RULE_getterSignature
    int RULE_setterSignature -> RULE_setterSignature
    int RULE_constructorSignature -> RULE_constructorSignature
    int RULE_redirection -> RULE_redirection
    int RULE_initializers -> RULE_initializers
    int RULE_initializerListEntry -> RULE_initializerListEntry
    int RULE_fieldInitializer -> RULE_fieldInitializer
    int RULE_factoryConstructorSignature -> RULE_factoryConstructorSignature
    int RULE_redirectingFactoryConstructorSignature -> RULE_redirectingFactoryConstructorSignature
    int RULE_constantConstructorSignature -> RULE_constantConstructorSignature
    int RULE_superclass -> RULE_superclass
    int RULE_interfaces -> RULE_interfaces
    int RULE_mixinApplicationClass -> RULE_mixinApplicationClass
    int RULE_mixinApplication -> RULE_mixinApplication
    int RULE_enumType -> RULE_enumType
    int RULE_enumEntry -> RULE_enumEntry
    int RULE_typeParameter -> RULE_typeParameter
    int RULE_typeParameters -> RULE_typeParameters
    int RULE_metadata -> RULE_metadata
    int RULE_expression -> RULE_expression
    int RULE_expressionWithoutCascade -> RULE_expressionWithoutCascade
    int RULE_expressionList -> RULE_expressionList
    int RULE_primary -> RULE_primary
    int RULE_literal -> RULE_literal
    int RULE_nullLiteral -> RULE_nullLiteral
    int RULE_numericLiteral -> RULE_numericLiteral
    int RULE_booleanLiteral -> RULE_booleanLiteral
    int RULE_stringLiteral -> RULE_stringLiteral
    int RULE_stringInterpolation -> RULE_stringInterpolation
    int RULE_symbolLiteral -> RULE_symbolLiteral
    int RULE_listLiteral -> RULE_listLiteral
    int RULE_mapLiteral -> RULE_mapLiteral
    int RULE_mapLiteralEntry -> RULE_mapLiteralEntry
    int RULE_throwExpression -> RULE_throwExpression
    int RULE_throwExpressionWithoutCascade -> RULE_throwExpressionWithoutCascade
    int RULE_functionExpression -> RULE_functionExpression
    int RULE_thisExpression -> RULE_thisExpression
    int RULE_nayaExpression -> RULE_nayaExpression
    int RULE_constObjectExpression -> RULE_constObjectExpression
    int RULE_arguments -> RULE_arguments
    int RULE_argumentList -> RULE_argumentList
    int RULE_namedArgument -> RULE_namedArgument
    int RULE_cascadeSection -> RULE_cascadeSection
    int RULE_cascadeSelector -> RULE_cascadeSelector
    int RULE_argumentPart -> RULE_argumentPart
    int RULE_assignmentOperator -> RULE_assignmentOperator
    int RULE_compoundAssignmentOperator -> RULE_compoundAssignmentOperator
    int RULE_conditionalExpression -> RULE_conditionalExpression
    int RULE_ifNullExpression -> RULE_ifNullExpression
    int RULE_logicalOrExpression -> RULE_logicalOrExpression
    int RULE_logicalAndExpression -> RULE_logicalAndExpression
    int RULE_equalityExpression -> RULE_equalityExpression
    int RULE_equalityOperator -> RULE_equalityOperator
    int RULE_relationalExpression -> RULE_relationalExpression
    int RULE_relationalOperator -> RULE_relationalOperator
    int RULE_bitwiseOrExpression -> RULE_bitwiseOrExpression
    int RULE_bitwiseXorExpression -> RULE_bitwiseXorExpression
    int RULE_bitwiseAndExpression -> RULE_bitwiseAndExpression
    int RULE_bitwiseOperator -> RULE_bitwiseOperator
    int RULE_shiftExpression -> RULE_shiftExpression
    int RULE_shiftOperator -> RULE_shiftOperator
    int RULE_additiveExpression -> RULE_additiveExpression
    int RULE_additiveOperator -> RULE_additiveOperator
    int RULE_multiplicativeExpression -> RULE_multiplicativeExpression
    int RULE_multiplicativeOperator -> RULE_multiplicativeOperator
    int RULE_unaryExpression -> RULE_unaryExpression
    int RULE_prefixOperator -> RULE_prefixOperator
    int RULE_minusOperator -> RULE_minusOperator
    int RULE_negationOperator -> RULE_negationOperator
    int RULE_tildeOperator -> RULE_tildeOperator
    int RULE_awaitExpression -> RULE_awaitExpression
    int RULE_postfixExpression -> RULE_postfixExpression
    int RULE_postfixOperator -> RULE_postfixOperator
    int RULE_selector -> RULE_selector
    int RULE_incrementOperator -> RULE_incrementOperator
    int RULE_assignableExpression -> RULE_assignableExpression
    int RULE_unconditionalAssignableSelector -> RULE_unconditionalAssignableSelector
    int RULE_assignableSelector -> RULE_assignableSelector
    int RULE_identifier -> RULE_identifier
    int RULE_qualified -> RULE_qualified
    int RULE_typeTest -> RULE_typeTest
    int RULE_isOperator -> RULE_isOperator
    int RULE_typeCast -> RULE_typeCast
    int RULE_asOperator -> RULE_asOperator
    int RULE_statements -> RULE_statements
    int RULE_statement -> RULE_statement
    int RULE_nonLabledStatment -> RULE_nonLabledStatment
    int RULE_expressionStatement -> RULE_expressionStatement
    int RULE_localVariableDeclaration -> RULE_localVariableDeclaration
    int RULE_localFunctionDeclaration -> RULE_localFunctionDeclaration
    int RULE_ifStatement -> RULE_ifStatement
    int RULE_forStatement -> RULE_forStatement
    int RULE_forLoopParts -> RULE_forLoopParts
    int RULE_forInitializerStatement -> RULE_forInitializerStatement
    int RULE_whileStatement -> RULE_whileStatement
    int RULE_doStatement -> RULE_doStatement
    int RULE_switchStatement -> RULE_switchStatement
    int RULE_switchCase -> RULE_switchCase
    int RULE_defaultCase -> RULE_defaultCase
    int RULE_rethrowStatment -> RULE_rethrowStatment
    int RULE_tryStatement -> RULE_tryStatement
    int RULE_onPart -> RULE_onPart
    int RULE_catchPart -> RULE_catchPart
    int RULE_finallyPart -> RULE_finallyPart
    int RULE_returnStatement -> RULE_returnStatement
    int RULE_label -> RULE_label
    int RULE_breakStatement -> RULE_breakStatement
    int RULE_continueStatement -> RULE_continueStatement
    int RULE_yieldStatement -> RULE_yieldStatement
    int RULE_yieldEachStatement -> RULE_yieldEachStatement
    int RULE_assertStatement -> RULE_assertStatement
    int RULE_assertion -> RULE_assertion
    int RULE_topLevelDefinition -> RULE_topLevelDefinition
    int RULE_getOrSet -> RULE_getOrSet
    int RULE_libraryDefinition -> RULE_libraryDefinition
    int RULE_scriptTag -> RULE_scriptTag
    int RULE_libraryName -> RULE_libraryName
    int RULE_importOrExport -> RULE_importOrExport
    int RULE_dottedIdentifierList -> RULE_dottedIdentifierList
    int RULE_libraryimport -> RULE_libraryimport
    int RULE_importSpecification -> RULE_importSpecification
    int RULE_combinator -> RULE_combinator
    int RULE_identifierList -> RULE_identifierList
    int RULE_libraryExport -> RULE_libraryExport
    int RULE_partDirective -> RULE_partDirective
    int RULE_partHeader -> RULE_partHeader
    int RULE_partDeclaration -> RULE_partDeclaration
    int RULE_uri -> RULE_uri
    int RULE_configurableUri -> RULE_configurableUri
    int RULE_configurationUri -> RULE_configurationUri
    int RULE_uriTest -> RULE_uriTest
    int RULE_dtype -> RULE_dtype
    int RULE_typeName -> RULE_typeName
    int RULE_typeArguments -> RULE_typeArguments
    int RULE_typeList -> RULE_typeList
    int RULE_typeAlias -> RULE_typeAlias
    int RULE_typeAliasBody -> RULE_typeAliasBody
    int RULE_functionTypeAlias -> RULE_functionTypeAlias
    int RULE_functionPrefix -> RULE_functionPrefix
    java.lang.String[] ruleNames -> ruleNames
    java.lang.String[] _LITERAL_NAMES -> _LITERAL_NAMES
    java.lang.String[] _SYMBOLIC_NAMES -> _SYMBOLIC_NAMES
    org.antlr.v4.runtime.Vocabulary VOCABULARY -> VOCABULARY
    java.lang.String[] tokenNames -> tokenNames
    java.lang.String _serializedATN -> _serializedATN
    org.antlr.v4.runtime.atn.ATN _ATN -> _ATN
    java.lang.String[] makeRuleNames() -> makeRuleNames
    java.lang.String[] makeLiteralNames() -> makeLiteralNames
    java.lang.String[] makeSymbolicNames() -> makeSymbolicNames
    java.lang.String[] getTokenNames() -> getTokenNames
    org.antlr.v4.runtime.Vocabulary getVocabulary() -> getVocabulary
    java.lang.String getGrammarFileName() -> getGrammarFileName
    java.lang.String[] getRuleNames() -> getRuleNames
    java.lang.String getSerializedATN() -> getSerializedATN
    org.antlr.v4.runtime.atn.ATN getATN() -> getATN
    void <init>(org.antlr.v4.runtime.TokenStream) -> <init>
    parser.dart.Dart2Parser$CompilationUnitContext compilationUnit() -> compilationUnit
    parser.dart.Dart2Parser$VariableDeclarationContext variableDeclaration() -> variableDeclaration
    parser.dart.Dart2Parser$DeclaredIdentifierContext declaredIdentifier() -> declaredIdentifier
    parser.dart.Dart2Parser$FinalConstVarOrTypeContext finalConstVarOrType() -> finalConstVarOrType
    parser.dart.Dart2Parser$VarOrTypeContext varOrType() -> varOrType
    parser.dart.Dart2Parser$InitializedVariableDeclarationContext initializedVariableDeclaration() -> initializedVariableDeclaration
    parser.dart.Dart2Parser$InitializedIdentifierContext initializedIdentifier() -> initializedIdentifier
    parser.dart.Dart2Parser$InitializedIdentifierListContext initializedIdentifierList() -> initializedIdentifierList
    parser.dart.Dart2Parser$FunctionSignatureContext functionSignature() -> functionSignature
    parser.dart.Dart2Parser$FormalParameterPartContext formalParameterPart() -> formalParameterPart
    parser.dart.Dart2Parser$ReturnTypeContext returnType() -> returnType
    parser.dart.Dart2Parser$FunctionBodyContext functionBody() -> functionBody
    parser.dart.Dart2Parser$BlockContext block() -> block
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    parser.dart.Dart2Parser$NormalFormalParametersContext normalFormalParameters() -> normalFormalParameters
    parser.dart.Dart2Parser$OptionalFormalParametersContext optionalFormalParameters() -> optionalFormalParameters
    parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext optionalPositionalFormalParameters() -> optionalPositionalFormalParameters
    parser.dart.Dart2Parser$NamedFormalParametersContext namedFormalParameters() -> namedFormalParameters
    parser.dart.Dart2Parser$NormalFormalParameterContext normalFormalParameter() -> normalFormalParameter
    parser.dart.Dart2Parser$FunctionFormalParameterContext functionFormalParameter() -> functionFormalParameter
    parser.dart.Dart2Parser$SimpleFormalParameterContext simpleFormalParameter() -> simpleFormalParameter
    parser.dart.Dart2Parser$FieldFormalParameterContext fieldFormalParameter() -> fieldFormalParameter
    parser.dart.Dart2Parser$DefaultFormalParameterContext defaultFormalParameter() -> defaultFormalParameter
    parser.dart.Dart2Parser$DefaultNamedParameterContext defaultNamedParameter() -> defaultNamedParameter
    parser.dart.Dart2Parser$ClassDefinitionContext classDefinition() -> classDefinition
    parser.dart.Dart2Parser$MixinsContext mixins() -> mixins
    parser.dart.Dart2Parser$ClassMemberDefinitionContext classMemberDefinition() -> classMemberDefinition
    parser.dart.Dart2Parser$MethodSignatureContext methodSignature() -> methodSignature
    parser.dart.Dart2Parser$DeclarationContext declaration() -> declaration
    parser.dart.Dart2Parser$StaticFinalDeclarationListContext staticFinalDeclarationList() -> staticFinalDeclarationList
    parser.dart.Dart2Parser$StaticFinalDeclarationContext staticFinalDeclaration() -> staticFinalDeclaration
    parser.dart.Dart2Parser$OperatorSignatureContext operatorSignature() -> operatorSignature
    parser.dart.Dart2Parser$OperatorContext operator() -> operator
    parser.dart.Dart2Parser$BinaryOperatorContext binaryOperator() -> binaryOperator
    parser.dart.Dart2Parser$GetterSignatureContext getterSignature() -> getterSignature
    parser.dart.Dart2Parser$SetterSignatureContext setterSignature() -> setterSignature
    parser.dart.Dart2Parser$ConstructorSignatureContext constructorSignature() -> constructorSignature
    parser.dart.Dart2Parser$RedirectionContext redirection() -> redirection
    parser.dart.Dart2Parser$InitializersContext initializers() -> initializers
    parser.dart.Dart2Parser$InitializerListEntryContext initializerListEntry() -> initializerListEntry
    parser.dart.Dart2Parser$FieldInitializerContext fieldInitializer() -> fieldInitializer
    parser.dart.Dart2Parser$FactoryConstructorSignatureContext factoryConstructorSignature() -> factoryConstructorSignature
    parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext redirectingFactoryConstructorSignature() -> redirectingFactoryConstructorSignature
    parser.dart.Dart2Parser$ConstantConstructorSignatureContext constantConstructorSignature() -> constantConstructorSignature
    parser.dart.Dart2Parser$SuperclassContext superclass() -> superclass
    parser.dart.Dart2Parser$InterfacesContext interfaces() -> interfaces
    parser.dart.Dart2Parser$MixinApplicationClassContext mixinApplicationClass() -> mixinApplicationClass
    parser.dart.Dart2Parser$MixinApplicationContext mixinApplication() -> mixinApplication
    parser.dart.Dart2Parser$EnumTypeContext enumType() -> enumType
    parser.dart.Dart2Parser$EnumEntryContext enumEntry() -> enumEntry
    parser.dart.Dart2Parser$TypeParameterContext typeParameter() -> typeParameter
    parser.dart.Dart2Parser$TypeParametersContext typeParameters() -> typeParameters
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    parser.dart.Dart2Parser$ExpressionWithoutCascadeContext expressionWithoutCascade() -> expressionWithoutCascade
    parser.dart.Dart2Parser$ExpressionListContext expressionList() -> expressionList
    parser.dart.Dart2Parser$PrimaryContext primary() -> primary
    parser.dart.Dart2Parser$LiteralContext literal() -> literal
    parser.dart.Dart2Parser$NullLiteralContext nullLiteral() -> nullLiteral
    parser.dart.Dart2Parser$NumericLiteralContext numericLiteral() -> numericLiteral
    parser.dart.Dart2Parser$BooleanLiteralContext booleanLiteral() -> booleanLiteral
    parser.dart.Dart2Parser$StringLiteralContext stringLiteral() -> stringLiteral
    parser.dart.Dart2Parser$StringInterpolationContext stringInterpolation() -> stringInterpolation
    parser.dart.Dart2Parser$SymbolLiteralContext symbolLiteral() -> symbolLiteral
    parser.dart.Dart2Parser$ListLiteralContext listLiteral() -> listLiteral
    parser.dart.Dart2Parser$MapLiteralContext mapLiteral() -> mapLiteral
    parser.dart.Dart2Parser$MapLiteralEntryContext mapLiteralEntry() -> mapLiteralEntry
    parser.dart.Dart2Parser$ThrowExpressionContext throwExpression() -> throwExpression
    parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext throwExpressionWithoutCascade() -> throwExpressionWithoutCascade
    parser.dart.Dart2Parser$FunctionExpressionContext functionExpression() -> functionExpression
    parser.dart.Dart2Parser$ThisExpressionContext thisExpression() -> thisExpression
    parser.dart.Dart2Parser$NayaExpressionContext nayaExpression() -> nayaExpression
    parser.dart.Dart2Parser$ConstObjectExpressionContext constObjectExpression() -> constObjectExpression
    parser.dart.Dart2Parser$ArgumentsContext arguments() -> arguments
    parser.dart.Dart2Parser$ArgumentListContext argumentList() -> argumentList
    parser.dart.Dart2Parser$NamedArgumentContext namedArgument() -> namedArgument
    parser.dart.Dart2Parser$CascadeSectionContext cascadeSection() -> cascadeSection
    parser.dart.Dart2Parser$CascadeSelectorContext cascadeSelector() -> cascadeSelector
    parser.dart.Dart2Parser$ArgumentPartContext argumentPart() -> argumentPart
    parser.dart.Dart2Parser$AssignmentOperatorContext assignmentOperator() -> assignmentOperator
    parser.dart.Dart2Parser$CompoundAssignmentOperatorContext compoundAssignmentOperator() -> compoundAssignmentOperator
    parser.dart.Dart2Parser$ConditionalExpressionContext conditionalExpression() -> conditionalExpression
    parser.dart.Dart2Parser$IfNullExpressionContext ifNullExpression() -> ifNullExpression
    parser.dart.Dart2Parser$LogicalOrExpressionContext logicalOrExpression() -> logicalOrExpression
    parser.dart.Dart2Parser$LogicalAndExpressionContext logicalAndExpression() -> logicalAndExpression
    parser.dart.Dart2Parser$EqualityExpressionContext equalityExpression() -> equalityExpression
    parser.dart.Dart2Parser$EqualityOperatorContext equalityOperator() -> equalityOperator
    parser.dart.Dart2Parser$RelationalExpressionContext relationalExpression() -> relationalExpression
    parser.dart.Dart2Parser$RelationalOperatorContext relationalOperator() -> relationalOperator
    parser.dart.Dart2Parser$BitwiseOrExpressionContext bitwiseOrExpression() -> bitwiseOrExpression
    parser.dart.Dart2Parser$BitwiseXorExpressionContext bitwiseXorExpression() -> bitwiseXorExpression
    parser.dart.Dart2Parser$BitwiseAndExpressionContext bitwiseAndExpression() -> bitwiseAndExpression
    parser.dart.Dart2Parser$BitwiseOperatorContext bitwiseOperator() -> bitwiseOperator
    parser.dart.Dart2Parser$ShiftExpressionContext shiftExpression() -> shiftExpression
    parser.dart.Dart2Parser$ShiftOperatorContext shiftOperator() -> shiftOperator
    parser.dart.Dart2Parser$AdditiveExpressionContext additiveExpression() -> additiveExpression
    parser.dart.Dart2Parser$AdditiveOperatorContext additiveOperator() -> additiveOperator
    parser.dart.Dart2Parser$MultiplicativeExpressionContext multiplicativeExpression() -> multiplicativeExpression
    parser.dart.Dart2Parser$MultiplicativeOperatorContext multiplicativeOperator() -> multiplicativeOperator
    parser.dart.Dart2Parser$UnaryExpressionContext unaryExpression() -> unaryExpression
    parser.dart.Dart2Parser$PrefixOperatorContext prefixOperator() -> prefixOperator
    parser.dart.Dart2Parser$MinusOperatorContext minusOperator() -> minusOperator
    parser.dart.Dart2Parser$NegationOperatorContext negationOperator() -> negationOperator
    parser.dart.Dart2Parser$TildeOperatorContext tildeOperator() -> tildeOperator
    parser.dart.Dart2Parser$AwaitExpressionContext awaitExpression() -> awaitExpression
    parser.dart.Dart2Parser$PostfixExpressionContext postfixExpression() -> postfixExpression
    parser.dart.Dart2Parser$PostfixOperatorContext postfixOperator() -> postfixOperator
    parser.dart.Dart2Parser$SelectorContext selector() -> selector
    parser.dart.Dart2Parser$IncrementOperatorContext incrementOperator() -> incrementOperator
    parser.dart.Dart2Parser$AssignableExpressionContext assignableExpression() -> assignableExpression
    parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext unconditionalAssignableSelector() -> unconditionalAssignableSelector
    parser.dart.Dart2Parser$AssignableSelectorContext assignableSelector() -> assignableSelector
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$QualifiedContext qualified() -> qualified
    parser.dart.Dart2Parser$TypeTestContext typeTest() -> typeTest
    parser.dart.Dart2Parser$IsOperatorContext isOperator() -> isOperator
    parser.dart.Dart2Parser$TypeCastContext typeCast() -> typeCast
    parser.dart.Dart2Parser$AsOperatorContext asOperator() -> asOperator
    parser.dart.Dart2Parser$StatementsContext statements() -> statements
    parser.dart.Dart2Parser$StatementContext statement() -> statement
    parser.dart.Dart2Parser$NonLabledStatmentContext nonLabledStatment() -> nonLabledStatment
    parser.dart.Dart2Parser$ExpressionStatementContext expressionStatement() -> expressionStatement
    parser.dart.Dart2Parser$LocalVariableDeclarationContext localVariableDeclaration() -> localVariableDeclaration
    parser.dart.Dart2Parser$LocalFunctionDeclarationContext localFunctionDeclaration() -> localFunctionDeclaration
    parser.dart.Dart2Parser$IfStatementContext ifStatement() -> ifStatement
    parser.dart.Dart2Parser$ForStatementContext forStatement() -> forStatement
    parser.dart.Dart2Parser$ForLoopPartsContext forLoopParts() -> forLoopParts
    parser.dart.Dart2Parser$ForInitializerStatementContext forInitializerStatement() -> forInitializerStatement
    parser.dart.Dart2Parser$WhileStatementContext whileStatement() -> whileStatement
    parser.dart.Dart2Parser$DoStatementContext doStatement() -> doStatement
    parser.dart.Dart2Parser$SwitchStatementContext switchStatement() -> switchStatement
    parser.dart.Dart2Parser$SwitchCaseContext switchCase() -> switchCase
    parser.dart.Dart2Parser$DefaultCaseContext defaultCase() -> defaultCase
    parser.dart.Dart2Parser$RethrowStatmentContext rethrowStatment() -> rethrowStatment
    parser.dart.Dart2Parser$TryStatementContext tryStatement() -> tryStatement
    parser.dart.Dart2Parser$OnPartContext onPart() -> onPart
    parser.dart.Dart2Parser$CatchPartContext catchPart() -> catchPart
    parser.dart.Dart2Parser$FinallyPartContext finallyPart() -> finallyPart
    parser.dart.Dart2Parser$ReturnStatementContext returnStatement() -> returnStatement
    parser.dart.Dart2Parser$LabelContext label() -> label
    parser.dart.Dart2Parser$BreakStatementContext breakStatement() -> breakStatement
    parser.dart.Dart2Parser$ContinueStatementContext continueStatement() -> continueStatement
    parser.dart.Dart2Parser$YieldStatementContext yieldStatement() -> yieldStatement
    parser.dart.Dart2Parser$YieldEachStatementContext yieldEachStatement() -> yieldEachStatement
    parser.dart.Dart2Parser$AssertStatementContext assertStatement() -> assertStatement
    parser.dart.Dart2Parser$AssertionContext assertion() -> assertion
    parser.dart.Dart2Parser$TopLevelDefinitionContext topLevelDefinition() -> topLevelDefinition
    parser.dart.Dart2Parser$GetOrSetContext getOrSet() -> getOrSet
    parser.dart.Dart2Parser$LibraryDefinitionContext libraryDefinition() -> libraryDefinition
    parser.dart.Dart2Parser$ScriptTagContext scriptTag() -> scriptTag
    parser.dart.Dart2Parser$LibraryNameContext libraryName() -> libraryName
    parser.dart.Dart2Parser$ImportOrExportContext importOrExport() -> importOrExport
    parser.dart.Dart2Parser$DottedIdentifierListContext dottedIdentifierList() -> dottedIdentifierList
    parser.dart.Dart2Parser$LibraryimportContext libraryimport() -> libraryimport
    parser.dart.Dart2Parser$ImportSpecificationContext importSpecification() -> importSpecification
    parser.dart.Dart2Parser$CombinatorContext combinator() -> combinator
    parser.dart.Dart2Parser$IdentifierListContext identifierList() -> identifierList
    parser.dart.Dart2Parser$LibraryExportContext libraryExport() -> libraryExport
    parser.dart.Dart2Parser$PartDirectiveContext partDirective() -> partDirective
    parser.dart.Dart2Parser$PartHeaderContext partHeader() -> partHeader
    parser.dart.Dart2Parser$PartDeclarationContext partDeclaration() -> partDeclaration
    parser.dart.Dart2Parser$UriContext uri() -> uri
    parser.dart.Dart2Parser$ConfigurableUriContext configurableUri() -> configurableUri
    parser.dart.Dart2Parser$ConfigurationUriContext configurationUri() -> configurationUri
    parser.dart.Dart2Parser$UriTestContext uriTest() -> uriTest
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    parser.dart.Dart2Parser$TypeNameContext typeName() -> typeName
    parser.dart.Dart2Parser$TypeArgumentsContext typeArguments() -> typeArguments
    parser.dart.Dart2Parser$TypeListContext typeList() -> typeList
    parser.dart.Dart2Parser$TypeAliasContext typeAlias() -> typeAlias
    parser.dart.Dart2Parser$TypeAliasBodyContext typeAliasBody() -> typeAliasBody
    parser.dart.Dart2Parser$FunctionTypeAliasContext functionTypeAlias() -> functionTypeAlias
    parser.dart.Dart2Parser$FunctionPrefixContext functionPrefix() -> functionPrefix
    void <clinit>() -> <clinit>
parser.dart.Dart2Parser$AdditiveExpressionContext -> parser.dart.Dart2Parser$AdditiveExpressionContext:
    java.util.List multiplicativeExpression() -> multiplicativeExpression
    parser.dart.Dart2Parser$MultiplicativeExpressionContext multiplicativeExpression(int) -> multiplicativeExpression
    java.util.List additiveOperator() -> additiveOperator
    parser.dart.Dart2Parser$AdditiveOperatorContext additiveOperator(int) -> additiveOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$AdditiveOperatorContext -> parser.dart.Dart2Parser$AdditiveOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ArgumentListContext -> parser.dart.Dart2Parser$ArgumentListContext:
    java.util.List namedArgument() -> namedArgument
    parser.dart.Dart2Parser$NamedArgumentContext namedArgument(int) -> namedArgument
    parser.dart.Dart2Parser$ExpressionListContext expressionList() -> expressionList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ArgumentPartContext -> parser.dart.Dart2Parser$ArgumentPartContext:
    parser.dart.Dart2Parser$ArgumentsContext arguments() -> arguments
    parser.dart.Dart2Parser$TypeArgumentsContext typeArguments() -> typeArguments
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ArgumentsContext -> parser.dart.Dart2Parser$ArgumentsContext:
    parser.dart.Dart2Parser$ArgumentListContext argumentList() -> argumentList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$AsOperatorContext -> parser.dart.Dart2Parser$AsOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$AssertStatementContext -> parser.dart.Dart2Parser$AssertStatementContext:
    parser.dart.Dart2Parser$AssertionContext assertion() -> assertion
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$AssertionContext -> parser.dart.Dart2Parser$AssertionContext:
    java.util.List expression() -> expression
    parser.dart.Dart2Parser$ExpressionContext expression(int) -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$AssignableExpressionContext -> parser.dart.Dart2Parser$AssignableExpressionContext:
    parser.dart.Dart2Parser$PrimaryContext primary() -> primary
    parser.dart.Dart2Parser$AssignableSelectorContext assignableSelector() -> assignableSelector
    java.util.List argumentPart() -> argumentPart
    parser.dart.Dart2Parser$ArgumentPartContext argumentPart(int) -> argumentPart
    parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext unconditionalAssignableSelector() -> unconditionalAssignableSelector
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$AssignableSelectorContext -> parser.dart.Dart2Parser$AssignableSelectorContext:
    parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext unconditionalAssignableSelector() -> unconditionalAssignableSelector
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$AssignmentOperatorContext -> parser.dart.Dart2Parser$AssignmentOperatorContext:
    parser.dart.Dart2Parser$CompoundAssignmentOperatorContext compoundAssignmentOperator() -> compoundAssignmentOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$AwaitExpressionContext -> parser.dart.Dart2Parser$AwaitExpressionContext:
    parser.dart.Dart2Parser$UnaryExpressionContext unaryExpression() -> unaryExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$BinaryOperatorContext -> parser.dart.Dart2Parser$BinaryOperatorContext:
    parser.dart.Dart2Parser$MultiplicativeOperatorContext multiplicativeOperator() -> multiplicativeOperator
    parser.dart.Dart2Parser$AdditiveOperatorContext additiveOperator() -> additiveOperator
    parser.dart.Dart2Parser$ShiftOperatorContext shiftOperator() -> shiftOperator
    parser.dart.Dart2Parser$RelationalOperatorContext relationalOperator() -> relationalOperator
    parser.dart.Dart2Parser$BitwiseOperatorContext bitwiseOperator() -> bitwiseOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$BitwiseAndExpressionContext -> parser.dart.Dart2Parser$BitwiseAndExpressionContext:
    java.util.List shiftExpression() -> shiftExpression
    parser.dart.Dart2Parser$ShiftExpressionContext shiftExpression(int) -> shiftExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$BitwiseOperatorContext -> parser.dart.Dart2Parser$BitwiseOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$BitwiseOrExpressionContext -> parser.dart.Dart2Parser$BitwiseOrExpressionContext:
    java.util.List bitwiseXorExpression() -> bitwiseXorExpression
    parser.dart.Dart2Parser$BitwiseXorExpressionContext bitwiseXorExpression(int) -> bitwiseXorExpression
    java.util.List bitwiseOrExpression() -> bitwiseOrExpression
    parser.dart.Dart2Parser$BitwiseOrExpressionContext bitwiseOrExpression(int) -> bitwiseOrExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$BitwiseXorExpressionContext -> parser.dart.Dart2Parser$BitwiseXorExpressionContext:
    java.util.List bitwiseAndExpression() -> bitwiseAndExpression
    parser.dart.Dart2Parser$BitwiseAndExpressionContext bitwiseAndExpression(int) -> bitwiseAndExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$BlockContext -> parser.dart.Dart2Parser$BlockContext:
    parser.dart.Dart2Parser$StatementsContext statements() -> statements
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$BooleanLiteralContext -> parser.dart.Dart2Parser$BooleanLiteralContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$BreakStatementContext -> parser.dart.Dart2Parser$BreakStatementContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$CascadeSectionContext -> parser.dart.Dart2Parser$CascadeSectionContext:
    parser.dart.Dart2Parser$CascadeSelectorContext cascadeSelector() -> cascadeSelector
    java.util.List assignableSelector() -> assignableSelector
    parser.dart.Dart2Parser$AssignableSelectorContext assignableSelector(int) -> assignableSelector
    parser.dart.Dart2Parser$AssignmentOperatorContext assignmentOperator() -> assignmentOperator
    parser.dart.Dart2Parser$ExpressionWithoutCascadeContext expressionWithoutCascade() -> expressionWithoutCascade
    java.util.List argumentPart() -> argumentPart
    parser.dart.Dart2Parser$ArgumentPartContext argumentPart(int) -> argumentPart
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$CascadeSelectorContext -> parser.dart.Dart2Parser$CascadeSelectorContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$CatchPartContext -> parser.dart.Dart2Parser$CatchPartContext:
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ClassDefinitionContext -> parser.dart.Dart2Parser$ClassDefinitionContext:
    java.util.List metadata() -> metadata
    parser.dart.Dart2Parser$MetadataContext metadata(int) -> metadata
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$TypeParametersContext typeParameters() -> typeParameters
    parser.dart.Dart2Parser$SuperclassContext superclass() -> superclass
    parser.dart.Dart2Parser$MixinsContext mixins() -> mixins
    parser.dart.Dart2Parser$InterfacesContext interfaces() -> interfaces
    java.util.List classMemberDefinition() -> classMemberDefinition
    parser.dart.Dart2Parser$ClassMemberDefinitionContext classMemberDefinition(int) -> classMemberDefinition
    parser.dart.Dart2Parser$MixinApplicationClassContext mixinApplicationClass() -> mixinApplicationClass
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ClassMemberDefinitionContext -> parser.dart.Dart2Parser$ClassMemberDefinitionContext:
    parser.dart.Dart2Parser$DeclarationContext declaration() -> declaration
    parser.dart.Dart2Parser$MethodSignatureContext methodSignature() -> methodSignature
    parser.dart.Dart2Parser$FunctionBodyContext functionBody() -> functionBody
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$CombinatorContext -> parser.dart.Dart2Parser$CombinatorContext:
    parser.dart.Dart2Parser$IdentifierListContext identifierList() -> identifierList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$CompilationUnitContext -> parser.dart.Dart2Parser$CompilationUnitContext:
    parser.dart.Dart2Parser$LibraryDefinitionContext libraryDefinition() -> libraryDefinition
    parser.dart.Dart2Parser$PartDeclarationContext partDeclaration() -> partDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$CompoundAssignmentOperatorContext -> parser.dart.Dart2Parser$CompoundAssignmentOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ConditionalExpressionContext -> parser.dart.Dart2Parser$ConditionalExpressionContext:
    parser.dart.Dart2Parser$IfNullExpressionContext ifNullExpression() -> ifNullExpression
    java.util.List expressionWithoutCascade() -> expressionWithoutCascade
    parser.dart.Dart2Parser$ExpressionWithoutCascadeContext expressionWithoutCascade(int) -> expressionWithoutCascade
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ConfigurableUriContext -> parser.dart.Dart2Parser$ConfigurableUriContext:
    parser.dart.Dart2Parser$UriContext uri() -> uri
    java.util.List configurationUri() -> configurationUri
    parser.dart.Dart2Parser$ConfigurationUriContext configurationUri(int) -> configurationUri
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ConfigurationUriContext -> parser.dart.Dart2Parser$ConfigurationUriContext:
    parser.dart.Dart2Parser$UriTestContext uriTest() -> uriTest
    parser.dart.Dart2Parser$UriContext uri() -> uri
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ConstObjectExpressionContext -> parser.dart.Dart2Parser$ConstObjectExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    parser.dart.Dart2Parser$ArgumentsContext arguments() -> arguments
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ConstantConstructorSignatureContext -> parser.dart.Dart2Parser$ConstantConstructorSignatureContext:
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    parser.dart.Dart2Parser$QualifiedContext qualified() -> qualified
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ConstructorSignatureContext -> parser.dart.Dart2Parser$ConstructorSignatureContext:
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ContinueStatementContext -> parser.dart.Dart2Parser$ContinueStatementContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$DeclarationContext -> parser.dart.Dart2Parser$DeclarationContext:
    parser.dart.Dart2Parser$ConstantConstructorSignatureContext constantConstructorSignature() -> constantConstructorSignature
    parser.dart.Dart2Parser$RedirectionContext redirection() -> redirection
    parser.dart.Dart2Parser$InitializersContext initializers() -> initializers
    parser.dart.Dart2Parser$ConstructorSignatureContext constructorSignature() -> constructorSignature
    parser.dart.Dart2Parser$GetterSignatureContext getterSignature() -> getterSignature
    org.antlr.v4.runtime.tree.TerminalNode STATIC() -> STATIC
    parser.dart.Dart2Parser$SetterSignatureContext setterSignature() -> setterSignature
    parser.dart.Dart2Parser$OperatorSignatureContext operatorSignature() -> operatorSignature
    parser.dart.Dart2Parser$FunctionSignatureContext functionSignature() -> functionSignature
    parser.dart.Dart2Parser$StaticFinalDeclarationListContext staticFinalDeclarationList() -> staticFinalDeclarationList
    org.antlr.v4.runtime.tree.TerminalNode FINAL() -> FINAL
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    parser.dart.Dart2Parser$InitializedIdentifierListContext initializedIdentifierList() -> initializedIdentifierList
    org.antlr.v4.runtime.tree.TerminalNode VAR() -> VAR
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$DeclaredIdentifierContext -> parser.dart.Dart2Parser$DeclaredIdentifierContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$FinalConstVarOrTypeContext finalConstVarOrType() -> finalConstVarOrType
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$DefaultCaseContext -> parser.dart.Dart2Parser$DefaultCaseContext:
    parser.dart.Dart2Parser$StatementsContext statements() -> statements
    java.util.List label() -> label
    parser.dart.Dart2Parser$LabelContext label(int) -> label
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$DefaultFormalParameterContext -> parser.dart.Dart2Parser$DefaultFormalParameterContext:
    parser.dart.Dart2Parser$NormalFormalParameterContext normalFormalParameter() -> normalFormalParameter
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$DefaultNamedParameterContext -> parser.dart.Dart2Parser$DefaultNamedParameterContext:
    parser.dart.Dart2Parser$NormalFormalParameterContext normalFormalParameter() -> normalFormalParameter
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$DoStatementContext -> parser.dart.Dart2Parser$DoStatementContext:
    parser.dart.Dart2Parser$StatementContext statement() -> statement
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$DottedIdentifierListContext -> parser.dart.Dart2Parser$DottedIdentifierListContext:
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$DtypeContext -> parser.dart.Dart2Parser$DtypeContext:
    parser.dart.Dart2Parser$TypeNameContext typeName() -> typeName
    parser.dart.Dart2Parser$TypeArgumentsContext typeArguments() -> typeArguments
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$EnumEntryContext -> parser.dart.Dart2Parser$EnumEntryContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$EnumTypeContext -> parser.dart.Dart2Parser$EnumTypeContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    java.util.List enumEntry() -> enumEntry
    parser.dart.Dart2Parser$EnumEntryContext enumEntry(int) -> enumEntry
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$EqualityExpressionContext -> parser.dart.Dart2Parser$EqualityExpressionContext:
    java.util.List relationalExpression() -> relationalExpression
    parser.dart.Dart2Parser$RelationalExpressionContext relationalExpression(int) -> relationalExpression
    parser.dart.Dart2Parser$EqualityOperatorContext equalityOperator() -> equalityOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$EqualityOperatorContext -> parser.dart.Dart2Parser$EqualityOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ExpressionContext -> parser.dart.Dart2Parser$ExpressionContext:
    parser.dart.Dart2Parser$AssignableExpressionContext assignableExpression() -> assignableExpression
    parser.dart.Dart2Parser$AssignmentOperatorContext assignmentOperator() -> assignmentOperator
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    parser.dart.Dart2Parser$ConditionalExpressionContext conditionalExpression() -> conditionalExpression
    java.util.List cascadeSection() -> cascadeSection
    parser.dart.Dart2Parser$CascadeSectionContext cascadeSection(int) -> cascadeSection
    parser.dart.Dart2Parser$ThrowExpressionContext throwExpression() -> throwExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ExpressionListContext -> parser.dart.Dart2Parser$ExpressionListContext:
    java.util.List expression() -> expression
    parser.dart.Dart2Parser$ExpressionContext expression(int) -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ExpressionStatementContext -> parser.dart.Dart2Parser$ExpressionStatementContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ExpressionWithoutCascadeContext -> parser.dart.Dart2Parser$ExpressionWithoutCascadeContext:
    parser.dart.Dart2Parser$AssignableExpressionContext assignableExpression() -> assignableExpression
    parser.dart.Dart2Parser$AssignmentOperatorContext assignmentOperator() -> assignmentOperator
    parser.dart.Dart2Parser$ExpressionWithoutCascadeContext expressionWithoutCascade() -> expressionWithoutCascade
    parser.dart.Dart2Parser$ConditionalExpressionContext conditionalExpression() -> conditionalExpression
    parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext throwExpressionWithoutCascade() -> throwExpressionWithoutCascade
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FactoryConstructorSignatureContext -> parser.dart.Dart2Parser$FactoryConstructorSignatureContext:
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FieldFormalParameterContext -> parser.dart.Dart2Parser$FieldFormalParameterContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$FinalConstVarOrTypeContext finalConstVarOrType() -> finalConstVarOrType
    parser.dart.Dart2Parser$FormalParameterPartContext formalParameterPart() -> formalParameterPart
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FieldInitializerContext -> parser.dart.Dart2Parser$FieldInitializerContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$ConditionalExpressionContext conditionalExpression() -> conditionalExpression
    java.util.List cascadeSection() -> cascadeSection
    parser.dart.Dart2Parser$CascadeSectionContext cascadeSection(int) -> cascadeSection
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FinalConstVarOrTypeContext -> parser.dart.Dart2Parser$FinalConstVarOrTypeContext:
    org.antlr.v4.runtime.tree.TerminalNode FINAL() -> FINAL
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    parser.dart.Dart2Parser$VarOrTypeContext varOrType() -> varOrType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FinallyPartContext -> parser.dart.Dart2Parser$FinallyPartContext:
    parser.dart.Dart2Parser$BlockContext block() -> block
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ForInitializerStatementContext -> parser.dart.Dart2Parser$ForInitializerStatementContext:
    parser.dart.Dart2Parser$LocalVariableDeclarationContext localVariableDeclaration() -> localVariableDeclaration
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ForLoopPartsContext -> parser.dart.Dart2Parser$ForLoopPartsContext:
    parser.dart.Dart2Parser$ForInitializerStatementContext forInitializerStatement() -> forInitializerStatement
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    parser.dart.Dart2Parser$ExpressionListContext expressionList() -> expressionList
    parser.dart.Dart2Parser$DeclaredIdentifierContext declaredIdentifier() -> declaredIdentifier
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ForStatementContext -> parser.dart.Dart2Parser$ForStatementContext:
    parser.dart.Dart2Parser$ForLoopPartsContext forLoopParts() -> forLoopParts
    parser.dart.Dart2Parser$StatementContext statement() -> statement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FormalParameterListContext -> parser.dart.Dart2Parser$FormalParameterListContext:
    parser.dart.Dart2Parser$NormalFormalParametersContext normalFormalParameters() -> normalFormalParameters
    parser.dart.Dart2Parser$OptionalFormalParametersContext optionalFormalParameters() -> optionalFormalParameters
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FormalParameterPartContext -> parser.dart.Dart2Parser$FormalParameterPartContext:
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    parser.dart.Dart2Parser$TypeParametersContext typeParameters() -> typeParameters
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FunctionBodyContext -> parser.dart.Dart2Parser$FunctionBodyContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    parser.dart.Dart2Parser$BlockContext block() -> block
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FunctionExpressionContext -> parser.dart.Dart2Parser$FunctionExpressionContext:
    parser.dart.Dart2Parser$FormalParameterPartContext formalParameterPart() -> formalParameterPart
    parser.dart.Dart2Parser$FunctionBodyContext functionBody() -> functionBody
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FunctionFormalParameterContext -> parser.dart.Dart2Parser$FunctionFormalParameterContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$FormalParameterPartContext formalParameterPart() -> formalParameterPart
    parser.dart.Dart2Parser$ReturnTypeContext returnType() -> returnType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FunctionPrefixContext -> parser.dart.Dart2Parser$FunctionPrefixContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$ReturnTypeContext returnType() -> returnType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FunctionSignatureContext -> parser.dart.Dart2Parser$FunctionSignatureContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$FormalParameterPartContext formalParameterPart() -> formalParameterPart
    parser.dart.Dart2Parser$ReturnTypeContext returnType() -> returnType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$FunctionTypeAliasContext -> parser.dart.Dart2Parser$FunctionTypeAliasContext:
    parser.dart.Dart2Parser$FunctionPrefixContext functionPrefix() -> functionPrefix
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    parser.dart.Dart2Parser$TypeParametersContext typeParameters() -> typeParameters
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$GetOrSetContext -> parser.dart.Dart2Parser$GetOrSetContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$GetterSignatureContext -> parser.dart.Dart2Parser$GetterSignatureContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$ReturnTypeContext returnType() -> returnType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$IdentifierContext -> parser.dart.Dart2Parser$IdentifierContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$IdentifierListContext -> parser.dart.Dart2Parser$IdentifierListContext:
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$IfNullExpressionContext -> parser.dart.Dart2Parser$IfNullExpressionContext:
    java.util.List logicalOrExpression() -> logicalOrExpression
    parser.dart.Dart2Parser$LogicalOrExpressionContext logicalOrExpression(int) -> logicalOrExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$IfStatementContext -> parser.dart.Dart2Parser$IfStatementContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    java.util.List statement() -> statement
    parser.dart.Dart2Parser$StatementContext statement(int) -> statement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ImportOrExportContext -> parser.dart.Dart2Parser$ImportOrExportContext:
    parser.dart.Dart2Parser$LibraryimportContext libraryimport() -> libraryimport
    parser.dart.Dart2Parser$LibraryExportContext libraryExport() -> libraryExport
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ImportSpecificationContext -> parser.dart.Dart2Parser$ImportSpecificationContext:
    parser.dart.Dart2Parser$ConfigurableUriContext configurableUri() -> configurableUri
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    java.util.List combinator() -> combinator
    parser.dart.Dart2Parser$CombinatorContext combinator(int) -> combinator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$IncrementOperatorContext -> parser.dart.Dart2Parser$IncrementOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$InitializedIdentifierContext -> parser.dart.Dart2Parser$InitializedIdentifierContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$InitializedIdentifierListContext -> parser.dart.Dart2Parser$InitializedIdentifierListContext:
    java.util.List initializedIdentifier() -> initializedIdentifier
    parser.dart.Dart2Parser$InitializedIdentifierContext initializedIdentifier(int) -> initializedIdentifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$InitializedVariableDeclarationContext -> parser.dart.Dart2Parser$InitializedVariableDeclarationContext:
    parser.dart.Dart2Parser$DeclaredIdentifierContext declaredIdentifier() -> declaredIdentifier
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    java.util.List initializedIdentifier() -> initializedIdentifier
    parser.dart.Dart2Parser$InitializedIdentifierContext initializedIdentifier(int) -> initializedIdentifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$InitializerListEntryContext -> parser.dart.Dart2Parser$InitializerListEntryContext:
    parser.dart.Dart2Parser$ArgumentsContext arguments() -> arguments
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$FieldInitializerContext fieldInitializer() -> fieldInitializer
    parser.dart.Dart2Parser$AssertionContext assertion() -> assertion
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$InitializersContext -> parser.dart.Dart2Parser$InitializersContext:
    java.util.List initializerListEntry() -> initializerListEntry
    parser.dart.Dart2Parser$InitializerListEntryContext initializerListEntry(int) -> initializerListEntry
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$InterfacesContext -> parser.dart.Dart2Parser$InterfacesContext:
    parser.dart.Dart2Parser$TypeListContext typeList() -> typeList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$IsOperatorContext -> parser.dart.Dart2Parser$IsOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LabelContext -> parser.dart.Dart2Parser$LabelContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LibraryDefinitionContext -> parser.dart.Dart2Parser$LibraryDefinitionContext:
    parser.dart.Dart2Parser$ScriptTagContext scriptTag() -> scriptTag
    parser.dart.Dart2Parser$LibraryNameContext libraryName() -> libraryName
    java.util.List importOrExport() -> importOrExport
    parser.dart.Dart2Parser$ImportOrExportContext importOrExport(int) -> importOrExport
    java.util.List partDirective() -> partDirective
    parser.dart.Dart2Parser$PartDirectiveContext partDirective(int) -> partDirective
    java.util.List topLevelDefinition() -> topLevelDefinition
    parser.dart.Dart2Parser$TopLevelDefinitionContext topLevelDefinition(int) -> topLevelDefinition
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LibraryExportContext -> parser.dart.Dart2Parser$LibraryExportContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$ConfigurableUriContext configurableUri() -> configurableUri
    java.util.List combinator() -> combinator
    parser.dart.Dart2Parser$CombinatorContext combinator(int) -> combinator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LibraryNameContext -> parser.dart.Dart2Parser$LibraryNameContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$DottedIdentifierListContext dottedIdentifierList() -> dottedIdentifierList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LibraryimportContext -> parser.dart.Dart2Parser$LibraryimportContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$ImportSpecificationContext importSpecification() -> importSpecification
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ListLiteralContext -> parser.dart.Dart2Parser$ListLiteralContext:
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    parser.dart.Dart2Parser$TypeArgumentsContext typeArguments() -> typeArguments
    parser.dart.Dart2Parser$ExpressionListContext expressionList() -> expressionList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LiteralContext -> parser.dart.Dart2Parser$LiteralContext:
    parser.dart.Dart2Parser$NullLiteralContext nullLiteral() -> nullLiteral
    parser.dart.Dart2Parser$BooleanLiteralContext booleanLiteral() -> booleanLiteral
    parser.dart.Dart2Parser$NumericLiteralContext numericLiteral() -> numericLiteral
    parser.dart.Dart2Parser$StringLiteralContext stringLiteral() -> stringLiteral
    parser.dart.Dart2Parser$SymbolLiteralContext symbolLiteral() -> symbolLiteral
    parser.dart.Dart2Parser$MapLiteralContext mapLiteral() -> mapLiteral
    parser.dart.Dart2Parser$ListLiteralContext listLiteral() -> listLiteral
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LocalFunctionDeclarationContext -> parser.dart.Dart2Parser$LocalFunctionDeclarationContext:
    parser.dart.Dart2Parser$FunctionSignatureContext functionSignature() -> functionSignature
    parser.dart.Dart2Parser$FunctionBodyContext functionBody() -> functionBody
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LocalVariableDeclarationContext -> parser.dart.Dart2Parser$LocalVariableDeclarationContext:
    parser.dart.Dart2Parser$InitializedVariableDeclarationContext initializedVariableDeclaration() -> initializedVariableDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LogicalAndExpressionContext -> parser.dart.Dart2Parser$LogicalAndExpressionContext:
    java.util.List equalityExpression() -> equalityExpression
    parser.dart.Dart2Parser$EqualityExpressionContext equalityExpression(int) -> equalityExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$LogicalOrExpressionContext -> parser.dart.Dart2Parser$LogicalOrExpressionContext:
    java.util.List logicalAndExpression() -> logicalAndExpression
    parser.dart.Dart2Parser$LogicalAndExpressionContext logicalAndExpression(int) -> logicalAndExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MapLiteralContext -> parser.dart.Dart2Parser$MapLiteralContext:
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    parser.dart.Dart2Parser$TypeArgumentsContext typeArguments() -> typeArguments
    java.util.List mapLiteralEntry() -> mapLiteralEntry
    parser.dart.Dart2Parser$MapLiteralEntryContext mapLiteralEntry(int) -> mapLiteralEntry
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MapLiteralEntryContext -> parser.dart.Dart2Parser$MapLiteralEntryContext:
    java.util.List expression() -> expression
    parser.dart.Dart2Parser$ExpressionContext expression(int) -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MetadataContext -> parser.dart.Dart2Parser$MetadataContext:
    java.util.List qualified() -> qualified
    parser.dart.Dart2Parser$QualifiedContext qualified(int) -> qualified
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    java.util.List arguments() -> arguments
    parser.dart.Dart2Parser$ArgumentsContext arguments(int) -> arguments
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MethodSignatureContext -> parser.dart.Dart2Parser$MethodSignatureContext:
    parser.dart.Dart2Parser$ConstructorSignatureContext constructorSignature() -> constructorSignature
    parser.dart.Dart2Parser$InitializersContext initializers() -> initializers
    parser.dart.Dart2Parser$FactoryConstructorSignatureContext factoryConstructorSignature() -> factoryConstructorSignature
    parser.dart.Dart2Parser$FunctionSignatureContext functionSignature() -> functionSignature
    org.antlr.v4.runtime.tree.TerminalNode STATIC() -> STATIC
    parser.dart.Dart2Parser$GetterSignatureContext getterSignature() -> getterSignature
    parser.dart.Dart2Parser$SetterSignatureContext setterSignature() -> setterSignature
    parser.dart.Dart2Parser$OperatorSignatureContext operatorSignature() -> operatorSignature
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MinusOperatorContext -> parser.dart.Dart2Parser$MinusOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MixinApplicationClassContext -> parser.dart.Dart2Parser$MixinApplicationClassContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$MixinApplicationContext mixinApplication() -> mixinApplication
    parser.dart.Dart2Parser$TypeParametersContext typeParameters() -> typeParameters
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MixinApplicationContext -> parser.dart.Dart2Parser$MixinApplicationContext:
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    parser.dart.Dart2Parser$MixinsContext mixins() -> mixins
    parser.dart.Dart2Parser$InterfacesContext interfaces() -> interfaces
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MixinsContext -> parser.dart.Dart2Parser$MixinsContext:
    parser.dart.Dart2Parser$TypeListContext typeList() -> typeList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MultiplicativeExpressionContext -> parser.dart.Dart2Parser$MultiplicativeExpressionContext:
    java.util.List unaryExpression() -> unaryExpression
    parser.dart.Dart2Parser$UnaryExpressionContext unaryExpression(int) -> unaryExpression
    java.util.List multiplicativeOperator() -> multiplicativeOperator
    parser.dart.Dart2Parser$MultiplicativeOperatorContext multiplicativeOperator(int) -> multiplicativeOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$MultiplicativeOperatorContext -> parser.dart.Dart2Parser$MultiplicativeOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NamedArgumentContext -> parser.dart.Dart2Parser$NamedArgumentContext:
    parser.dart.Dart2Parser$LabelContext label() -> label
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NamedFormalParametersContext -> parser.dart.Dart2Parser$NamedFormalParametersContext:
    java.util.List defaultNamedParameter() -> defaultNamedParameter
    parser.dart.Dart2Parser$DefaultNamedParameterContext defaultNamedParameter(int) -> defaultNamedParameter
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NayaExpressionContext -> parser.dart.Dart2Parser$NayaExpressionContext:
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    parser.dart.Dart2Parser$ArgumentsContext arguments() -> arguments
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NegationOperatorContext -> parser.dart.Dart2Parser$NegationOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NonLabledStatmentContext -> parser.dart.Dart2Parser$NonLabledStatmentContext:
    parser.dart.Dart2Parser$BlockContext block() -> block
    parser.dart.Dart2Parser$LocalVariableDeclarationContext localVariableDeclaration() -> localVariableDeclaration
    parser.dart.Dart2Parser$ForStatementContext forStatement() -> forStatement
    parser.dart.Dart2Parser$WhileStatementContext whileStatement() -> whileStatement
    parser.dart.Dart2Parser$DoStatementContext doStatement() -> doStatement
    parser.dart.Dart2Parser$SwitchStatementContext switchStatement() -> switchStatement
    parser.dart.Dart2Parser$IfStatementContext ifStatement() -> ifStatement
    parser.dart.Dart2Parser$RethrowStatmentContext rethrowStatment() -> rethrowStatment
    parser.dart.Dart2Parser$TryStatementContext tryStatement() -> tryStatement
    parser.dart.Dart2Parser$BreakStatementContext breakStatement() -> breakStatement
    parser.dart.Dart2Parser$ContinueStatementContext continueStatement() -> continueStatement
    parser.dart.Dart2Parser$ReturnStatementContext returnStatement() -> returnStatement
    parser.dart.Dart2Parser$YieldStatementContext yieldStatement() -> yieldStatement
    parser.dart.Dart2Parser$YieldEachStatementContext yieldEachStatement() -> yieldEachStatement
    parser.dart.Dart2Parser$ExpressionStatementContext expressionStatement() -> expressionStatement
    parser.dart.Dart2Parser$AssertStatementContext assertStatement() -> assertStatement
    parser.dart.Dart2Parser$LocalFunctionDeclarationContext localFunctionDeclaration() -> localFunctionDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NormalFormalParameterContext -> parser.dart.Dart2Parser$NormalFormalParameterContext:
    parser.dart.Dart2Parser$FunctionFormalParameterContext functionFormalParameter() -> functionFormalParameter
    parser.dart.Dart2Parser$FieldFormalParameterContext fieldFormalParameter() -> fieldFormalParameter
    parser.dart.Dart2Parser$SimpleFormalParameterContext simpleFormalParameter() -> simpleFormalParameter
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NormalFormalParametersContext -> parser.dart.Dart2Parser$NormalFormalParametersContext:
    java.util.List normalFormalParameter() -> normalFormalParameter
    parser.dart.Dart2Parser$NormalFormalParameterContext normalFormalParameter(int) -> normalFormalParameter
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NullLiteralContext -> parser.dart.Dart2Parser$NullLiteralContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$NumericLiteralContext -> parser.dart.Dart2Parser$NumericLiteralContext:
    org.antlr.v4.runtime.tree.TerminalNode NUMBER() -> NUMBER
    org.antlr.v4.runtime.tree.TerminalNode HEX_NUMBER() -> HEX_NUMBER
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$OnPartContext -> parser.dart.Dart2Parser$OnPartContext:
    parser.dart.Dart2Parser$CatchPartContext catchPart() -> catchPart
    parser.dart.Dart2Parser$BlockContext block() -> block
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$OperatorContext -> parser.dart.Dart2Parser$OperatorContext:
    parser.dart.Dart2Parser$BinaryOperatorContext binaryOperator() -> binaryOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$OperatorSignatureContext -> parser.dart.Dart2Parser$OperatorSignatureContext:
    parser.dart.Dart2Parser$OperatorContext operator() -> operator
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    parser.dart.Dart2Parser$ReturnTypeContext returnType() -> returnType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$OptionalFormalParametersContext -> parser.dart.Dart2Parser$OptionalFormalParametersContext:
    parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext optionalPositionalFormalParameters() -> optionalPositionalFormalParameters
    parser.dart.Dart2Parser$NamedFormalParametersContext namedFormalParameters() -> namedFormalParameters
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext -> parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext:
    java.util.List defaultFormalParameter() -> defaultFormalParameter
    parser.dart.Dart2Parser$DefaultFormalParameterContext defaultFormalParameter(int) -> defaultFormalParameter
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$PartDeclarationContext -> parser.dart.Dart2Parser$PartDeclarationContext:
    parser.dart.Dart2Parser$PartHeaderContext partHeader() -> partHeader
    org.antlr.v4.runtime.tree.TerminalNode EOF() -> EOF
    java.util.List topLevelDefinition() -> topLevelDefinition
    parser.dart.Dart2Parser$TopLevelDefinitionContext topLevelDefinition(int) -> topLevelDefinition
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$PartDirectiveContext -> parser.dart.Dart2Parser$PartDirectiveContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$UriContext uri() -> uri
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$PartHeaderContext -> parser.dart.Dart2Parser$PartHeaderContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$PostfixExpressionContext -> parser.dart.Dart2Parser$PostfixExpressionContext:
    parser.dart.Dart2Parser$AssignableExpressionContext assignableExpression() -> assignableExpression
    parser.dart.Dart2Parser$PostfixOperatorContext postfixOperator() -> postfixOperator
    parser.dart.Dart2Parser$PrimaryContext primary() -> primary
    java.util.List selector() -> selector
    parser.dart.Dart2Parser$SelectorContext selector(int) -> selector
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$PostfixOperatorContext -> parser.dart.Dart2Parser$PostfixOperatorContext:
    parser.dart.Dart2Parser$IncrementOperatorContext incrementOperator() -> incrementOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$PrefixOperatorContext -> parser.dart.Dart2Parser$PrefixOperatorContext:
    parser.dart.Dart2Parser$MinusOperatorContext minusOperator() -> minusOperator
    parser.dart.Dart2Parser$NegationOperatorContext negationOperator() -> negationOperator
    parser.dart.Dart2Parser$TildeOperatorContext tildeOperator() -> tildeOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$PrimaryContext -> parser.dart.Dart2Parser$PrimaryContext:
    parser.dart.Dart2Parser$ThisExpressionContext thisExpression() -> thisExpression
    parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext unconditionalAssignableSelector() -> unconditionalAssignableSelector
    parser.dart.Dart2Parser$FunctionExpressionContext functionExpression() -> functionExpression
    parser.dart.Dart2Parser$LiteralContext literal() -> literal
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$NayaExpressionContext nayaExpression() -> nayaExpression
    parser.dart.Dart2Parser$ConstObjectExpressionContext constObjectExpression() -> constObjectExpression
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$QualifiedContext -> parser.dart.Dart2Parser$QualifiedContext:
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext -> parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext:
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$RedirectionContext -> parser.dart.Dart2Parser$RedirectionContext:
    parser.dart.Dart2Parser$ArgumentsContext arguments() -> arguments
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$RelationalExpressionContext -> parser.dart.Dart2Parser$RelationalExpressionContext:
    java.util.List bitwiseOrExpression() -> bitwiseOrExpression
    parser.dart.Dart2Parser$BitwiseOrExpressionContext bitwiseOrExpression(int) -> bitwiseOrExpression
    parser.dart.Dart2Parser$TypeTestContext typeTest() -> typeTest
    parser.dart.Dart2Parser$TypeCastContext typeCast() -> typeCast
    parser.dart.Dart2Parser$RelationalOperatorContext relationalOperator() -> relationalOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$RelationalOperatorContext -> parser.dart.Dart2Parser$RelationalOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$RethrowStatmentContext -> parser.dart.Dart2Parser$RethrowStatmentContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ReturnStatementContext -> parser.dart.Dart2Parser$ReturnStatementContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ReturnTypeContext -> parser.dart.Dart2Parser$ReturnTypeContext:
    org.antlr.v4.runtime.tree.TerminalNode VOID() -> VOID
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ScriptTagContext -> parser.dart.Dart2Parser$ScriptTagContext:
    java.util.List NEWLINE() -> NEWLINE
    org.antlr.v4.runtime.tree.TerminalNode NEWLINE(int) -> NEWLINE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$SelectorContext -> parser.dart.Dart2Parser$SelectorContext:
    parser.dart.Dart2Parser$AssignableSelectorContext assignableSelector() -> assignableSelector
    parser.dart.Dart2Parser$ArgumentPartContext argumentPart() -> argumentPart
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$SetterSignatureContext -> parser.dart.Dart2Parser$SetterSignatureContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    parser.dart.Dart2Parser$ReturnTypeContext returnType() -> returnType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ShiftExpressionContext -> parser.dart.Dart2Parser$ShiftExpressionContext:
    java.util.List additiveExpression() -> additiveExpression
    parser.dart.Dart2Parser$AdditiveExpressionContext additiveExpression(int) -> additiveExpression
    java.util.List shiftOperator() -> shiftOperator
    parser.dart.Dart2Parser$ShiftOperatorContext shiftOperator(int) -> shiftOperator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ShiftOperatorContext -> parser.dart.Dart2Parser$ShiftOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$SimpleFormalParameterContext -> parser.dart.Dart2Parser$SimpleFormalParameterContext:
    parser.dart.Dart2Parser$DeclaredIdentifierContext declaredIdentifier() -> declaredIdentifier
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$StatementContext -> parser.dart.Dart2Parser$StatementContext:
    parser.dart.Dart2Parser$NonLabledStatmentContext nonLabledStatment() -> nonLabledStatment
    java.util.List label() -> label
    parser.dart.Dart2Parser$LabelContext label(int) -> label
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$StatementsContext -> parser.dart.Dart2Parser$StatementsContext:
    java.util.List statement() -> statement
    parser.dart.Dart2Parser$StatementContext statement(int) -> statement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$StaticFinalDeclarationContext -> parser.dart.Dart2Parser$StaticFinalDeclarationContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$StaticFinalDeclarationListContext -> parser.dart.Dart2Parser$StaticFinalDeclarationListContext:
    java.util.List staticFinalDeclaration() -> staticFinalDeclaration
    parser.dart.Dart2Parser$StaticFinalDeclarationContext staticFinalDeclaration(int) -> staticFinalDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$StringInterpolationContext -> parser.dart.Dart2Parser$StringInterpolationContext:
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$StringLiteralContext -> parser.dart.Dart2Parser$StringLiteralContext:
    java.util.List MultiLineString() -> MultiLineString
    org.antlr.v4.runtime.tree.TerminalNode MultiLineString(int) -> MultiLineString
    java.util.List SingleLineString() -> SingleLineString
    org.antlr.v4.runtime.tree.TerminalNode SingleLineString(int) -> SingleLineString
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$SuperclassContext -> parser.dart.Dart2Parser$SuperclassContext:
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$SwitchCaseContext -> parser.dart.Dart2Parser$SwitchCaseContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    parser.dart.Dart2Parser$StatementsContext statements() -> statements
    java.util.List label() -> label
    parser.dart.Dart2Parser$LabelContext label(int) -> label
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$SwitchStatementContext -> parser.dart.Dart2Parser$SwitchStatementContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    java.util.List switchCase() -> switchCase
    parser.dart.Dart2Parser$SwitchCaseContext switchCase(int) -> switchCase
    parser.dart.Dart2Parser$DefaultCaseContext defaultCase() -> defaultCase
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$SymbolLiteralContext -> parser.dart.Dart2Parser$SymbolLiteralContext:
    parser.dart.Dart2Parser$OperatorContext operator() -> operator
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ThisExpressionContext -> parser.dart.Dart2Parser$ThisExpressionContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ThrowExpressionContext -> parser.dart.Dart2Parser$ThrowExpressionContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext -> parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext:
    parser.dart.Dart2Parser$ExpressionWithoutCascadeContext expressionWithoutCascade() -> expressionWithoutCascade
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TildeOperatorContext -> parser.dart.Dart2Parser$TildeOperatorContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TopLevelDefinitionContext -> parser.dart.Dart2Parser$TopLevelDefinitionContext:
    parser.dart.Dart2Parser$ClassDefinitionContext classDefinition() -> classDefinition
    parser.dart.Dart2Parser$EnumTypeContext enumType() -> enumType
    parser.dart.Dart2Parser$TypeAliasContext typeAlias() -> typeAlias
    parser.dart.Dart2Parser$FunctionSignatureContext functionSignature() -> functionSignature
    parser.dart.Dart2Parser$GetterSignatureContext getterSignature() -> getterSignature
    parser.dart.Dart2Parser$SetterSignatureContext setterSignature() -> setterSignature
    parser.dart.Dart2Parser$FunctionBodyContext functionBody() -> functionBody
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$ReturnTypeContext returnType() -> returnType
    parser.dart.Dart2Parser$FormalParameterListContext formalParameterList() -> formalParameterList
    parser.dart.Dart2Parser$StaticFinalDeclarationListContext staticFinalDeclarationList() -> staticFinalDeclarationList
    org.antlr.v4.runtime.tree.TerminalNode FINAL() -> FINAL
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    parser.dart.Dart2Parser$VariableDeclarationContext variableDeclaration() -> variableDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TryStatementContext -> parser.dart.Dart2Parser$TryStatementContext:
    parser.dart.Dart2Parser$BlockContext block() -> block
    parser.dart.Dart2Parser$FinallyPartContext finallyPart() -> finallyPart
    java.util.List onPart() -> onPart
    parser.dart.Dart2Parser$OnPartContext onPart(int) -> onPart
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeAliasBodyContext -> parser.dart.Dart2Parser$TypeAliasBodyContext:
    parser.dart.Dart2Parser$FunctionTypeAliasContext functionTypeAlias() -> functionTypeAlias
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeAliasContext -> parser.dart.Dart2Parser$TypeAliasContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$TypeAliasBodyContext typeAliasBody() -> typeAliasBody
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeArgumentsContext -> parser.dart.Dart2Parser$TypeArgumentsContext:
    parser.dart.Dart2Parser$TypeListContext typeList() -> typeList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeCastContext -> parser.dart.Dart2Parser$TypeCastContext:
    parser.dart.Dart2Parser$AsOperatorContext asOperator() -> asOperator
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeListContext -> parser.dart.Dart2Parser$TypeListContext:
    java.util.List dtype() -> dtype
    parser.dart.Dart2Parser$DtypeContext dtype(int) -> dtype
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeNameContext -> parser.dart.Dart2Parser$TypeNameContext:
    parser.dart.Dart2Parser$QualifiedContext qualified() -> qualified
    org.antlr.v4.runtime.tree.TerminalNode VOID() -> VOID
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeParameterContext -> parser.dart.Dart2Parser$TypeParameterContext:
    parser.dart.Dart2Parser$MetadataContext metadata() -> metadata
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeParametersContext -> parser.dart.Dart2Parser$TypeParametersContext:
    java.util.List typeParameter() -> typeParameter
    parser.dart.Dart2Parser$TypeParameterContext typeParameter(int) -> typeParameter
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$TypeTestContext -> parser.dart.Dart2Parser$TypeTestContext:
    parser.dart.Dart2Parser$IsOperatorContext isOperator() -> isOperator
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$UnaryExpressionContext -> parser.dart.Dart2Parser$UnaryExpressionContext:
    parser.dart.Dart2Parser$PrefixOperatorContext prefixOperator() -> prefixOperator
    parser.dart.Dart2Parser$UnaryExpressionContext unaryExpression() -> unaryExpression
    parser.dart.Dart2Parser$AwaitExpressionContext awaitExpression() -> awaitExpression
    parser.dart.Dart2Parser$PostfixExpressionContext postfixExpression() -> postfixExpression
    parser.dart.Dart2Parser$MinusOperatorContext minusOperator() -> minusOperator
    parser.dart.Dart2Parser$TildeOperatorContext tildeOperator() -> tildeOperator
    parser.dart.Dart2Parser$IncrementOperatorContext incrementOperator() -> incrementOperator
    parser.dart.Dart2Parser$AssignableExpressionContext assignableExpression() -> assignableExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext -> parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    parser.dart.Dart2Parser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$UriContext -> parser.dart.Dart2Parser$UriContext:
    parser.dart.Dart2Parser$StringLiteralContext stringLiteral() -> stringLiteral
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$UriTestContext -> parser.dart.Dart2Parser$UriTestContext:
    parser.dart.Dart2Parser$DottedIdentifierListContext dottedIdentifierList() -> dottedIdentifierList
    parser.dart.Dart2Parser$StringLiteralContext stringLiteral() -> stringLiteral
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$VarOrTypeContext -> parser.dart.Dart2Parser$VarOrTypeContext:
    org.antlr.v4.runtime.tree.TerminalNode VAR() -> VAR
    parser.dart.Dart2Parser$DtypeContext dtype() -> dtype
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$VariableDeclarationContext -> parser.dart.Dart2Parser$VariableDeclarationContext:
    parser.dart.Dart2Parser$DeclaredIdentifierContext declaredIdentifier() -> declaredIdentifier
    java.util.List identifier() -> identifier
    parser.dart.Dart2Parser$IdentifierContext identifier(int) -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$WhileStatementContext -> parser.dart.Dart2Parser$WhileStatementContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    parser.dart.Dart2Parser$StatementContext statement() -> statement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$YieldEachStatementContext -> parser.dart.Dart2Parser$YieldEachStatementContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Parser$YieldStatementContext -> parser.dart.Dart2Parser$YieldStatementContext:
    parser.dart.Dart2Parser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.dart.Dart2Visitor -> parser.dart.Dart2Visitor:
    java.lang.Object visitCompilationUnit(parser.dart.Dart2Parser$CompilationUnitContext) -> visitCompilationUnit
    java.lang.Object visitVariableDeclaration(parser.dart.Dart2Parser$VariableDeclarationContext) -> visitVariableDeclaration
    java.lang.Object visitDeclaredIdentifier(parser.dart.Dart2Parser$DeclaredIdentifierContext) -> visitDeclaredIdentifier
    java.lang.Object visitFinalConstVarOrType(parser.dart.Dart2Parser$FinalConstVarOrTypeContext) -> visitFinalConstVarOrType
    java.lang.Object visitVarOrType(parser.dart.Dart2Parser$VarOrTypeContext) -> visitVarOrType
    java.lang.Object visitInitializedVariableDeclaration(parser.dart.Dart2Parser$InitializedVariableDeclarationContext) -> visitInitializedVariableDeclaration
    java.lang.Object visitInitializedIdentifier(parser.dart.Dart2Parser$InitializedIdentifierContext) -> visitInitializedIdentifier
    java.lang.Object visitInitializedIdentifierList(parser.dart.Dart2Parser$InitializedIdentifierListContext) -> visitInitializedIdentifierList
    java.lang.Object visitFunctionSignature(parser.dart.Dart2Parser$FunctionSignatureContext) -> visitFunctionSignature
    java.lang.Object visitFormalParameterPart(parser.dart.Dart2Parser$FormalParameterPartContext) -> visitFormalParameterPart
    java.lang.Object visitReturnType(parser.dart.Dart2Parser$ReturnTypeContext) -> visitReturnType
    java.lang.Object visitFunctionBody(parser.dart.Dart2Parser$FunctionBodyContext) -> visitFunctionBody
    java.lang.Object visitBlock(parser.dart.Dart2Parser$BlockContext) -> visitBlock
    java.lang.Object visitFormalParameterList(parser.dart.Dart2Parser$FormalParameterListContext) -> visitFormalParameterList
    java.lang.Object visitNormalFormalParameters(parser.dart.Dart2Parser$NormalFormalParametersContext) -> visitNormalFormalParameters
    java.lang.Object visitOptionalFormalParameters(parser.dart.Dart2Parser$OptionalFormalParametersContext) -> visitOptionalFormalParameters
    java.lang.Object visitOptionalPositionalFormalParameters(parser.dart.Dart2Parser$OptionalPositionalFormalParametersContext) -> visitOptionalPositionalFormalParameters
    java.lang.Object visitNamedFormalParameters(parser.dart.Dart2Parser$NamedFormalParametersContext) -> visitNamedFormalParameters
    java.lang.Object visitNormalFormalParameter(parser.dart.Dart2Parser$NormalFormalParameterContext) -> visitNormalFormalParameter
    java.lang.Object visitFunctionFormalParameter(parser.dart.Dart2Parser$FunctionFormalParameterContext) -> visitFunctionFormalParameter
    java.lang.Object visitSimpleFormalParameter(parser.dart.Dart2Parser$SimpleFormalParameterContext) -> visitSimpleFormalParameter
    java.lang.Object visitFieldFormalParameter(parser.dart.Dart2Parser$FieldFormalParameterContext) -> visitFieldFormalParameter
    java.lang.Object visitDefaultFormalParameter(parser.dart.Dart2Parser$DefaultFormalParameterContext) -> visitDefaultFormalParameter
    java.lang.Object visitDefaultNamedParameter(parser.dart.Dart2Parser$DefaultNamedParameterContext) -> visitDefaultNamedParameter
    java.lang.Object visitClassDefinition(parser.dart.Dart2Parser$ClassDefinitionContext) -> visitClassDefinition
    java.lang.Object visitMixins(parser.dart.Dart2Parser$MixinsContext) -> visitMixins
    java.lang.Object visitClassMemberDefinition(parser.dart.Dart2Parser$ClassMemberDefinitionContext) -> visitClassMemberDefinition
    java.lang.Object visitMethodSignature(parser.dart.Dart2Parser$MethodSignatureContext) -> visitMethodSignature
    java.lang.Object visitDeclaration(parser.dart.Dart2Parser$DeclarationContext) -> visitDeclaration
    java.lang.Object visitStaticFinalDeclarationList(parser.dart.Dart2Parser$StaticFinalDeclarationListContext) -> visitStaticFinalDeclarationList
    java.lang.Object visitStaticFinalDeclaration(parser.dart.Dart2Parser$StaticFinalDeclarationContext) -> visitStaticFinalDeclaration
    java.lang.Object visitOperatorSignature(parser.dart.Dart2Parser$OperatorSignatureContext) -> visitOperatorSignature
    java.lang.Object visitOperator(parser.dart.Dart2Parser$OperatorContext) -> visitOperator
    java.lang.Object visitBinaryOperator(parser.dart.Dart2Parser$BinaryOperatorContext) -> visitBinaryOperator
    java.lang.Object visitGetterSignature(parser.dart.Dart2Parser$GetterSignatureContext) -> visitGetterSignature
    java.lang.Object visitSetterSignature(parser.dart.Dart2Parser$SetterSignatureContext) -> visitSetterSignature
    java.lang.Object visitConstructorSignature(parser.dart.Dart2Parser$ConstructorSignatureContext) -> visitConstructorSignature
    java.lang.Object visitRedirection(parser.dart.Dart2Parser$RedirectionContext) -> visitRedirection
    java.lang.Object visitInitializers(parser.dart.Dart2Parser$InitializersContext) -> visitInitializers
    java.lang.Object visitInitializerListEntry(parser.dart.Dart2Parser$InitializerListEntryContext) -> visitInitializerListEntry
    java.lang.Object visitFieldInitializer(parser.dart.Dart2Parser$FieldInitializerContext) -> visitFieldInitializer
    java.lang.Object visitFactoryConstructorSignature(parser.dart.Dart2Parser$FactoryConstructorSignatureContext) -> visitFactoryConstructorSignature
    java.lang.Object visitRedirectingFactoryConstructorSignature(parser.dart.Dart2Parser$RedirectingFactoryConstructorSignatureContext) -> visitRedirectingFactoryConstructorSignature
    java.lang.Object visitConstantConstructorSignature(parser.dart.Dart2Parser$ConstantConstructorSignatureContext) -> visitConstantConstructorSignature
    java.lang.Object visitSuperclass(parser.dart.Dart2Parser$SuperclassContext) -> visitSuperclass
    java.lang.Object visitInterfaces(parser.dart.Dart2Parser$InterfacesContext) -> visitInterfaces
    java.lang.Object visitMixinApplicationClass(parser.dart.Dart2Parser$MixinApplicationClassContext) -> visitMixinApplicationClass
    java.lang.Object visitMixinApplication(parser.dart.Dart2Parser$MixinApplicationContext) -> visitMixinApplication
    java.lang.Object visitEnumType(parser.dart.Dart2Parser$EnumTypeContext) -> visitEnumType
    java.lang.Object visitEnumEntry(parser.dart.Dart2Parser$EnumEntryContext) -> visitEnumEntry
    java.lang.Object visitTypeParameter(parser.dart.Dart2Parser$TypeParameterContext) -> visitTypeParameter
    java.lang.Object visitTypeParameters(parser.dart.Dart2Parser$TypeParametersContext) -> visitTypeParameters
    java.lang.Object visitMetadata(parser.dart.Dart2Parser$MetadataContext) -> visitMetadata
    java.lang.Object visitExpression(parser.dart.Dart2Parser$ExpressionContext) -> visitExpression
    java.lang.Object visitExpressionWithoutCascade(parser.dart.Dart2Parser$ExpressionWithoutCascadeContext) -> visitExpressionWithoutCascade
    java.lang.Object visitExpressionList(parser.dart.Dart2Parser$ExpressionListContext) -> visitExpressionList
    java.lang.Object visitPrimary(parser.dart.Dart2Parser$PrimaryContext) -> visitPrimary
    java.lang.Object visitLiteral(parser.dart.Dart2Parser$LiteralContext) -> visitLiteral
    java.lang.Object visitNullLiteral(parser.dart.Dart2Parser$NullLiteralContext) -> visitNullLiteral
    java.lang.Object visitNumericLiteral(parser.dart.Dart2Parser$NumericLiteralContext) -> visitNumericLiteral
    java.lang.Object visitBooleanLiteral(parser.dart.Dart2Parser$BooleanLiteralContext) -> visitBooleanLiteral
    java.lang.Object visitStringLiteral(parser.dart.Dart2Parser$StringLiteralContext) -> visitStringLiteral
    java.lang.Object visitStringInterpolation(parser.dart.Dart2Parser$StringInterpolationContext) -> visitStringInterpolation
    java.lang.Object visitSymbolLiteral(parser.dart.Dart2Parser$SymbolLiteralContext) -> visitSymbolLiteral
    java.lang.Object visitListLiteral(parser.dart.Dart2Parser$ListLiteralContext) -> visitListLiteral
    java.lang.Object visitMapLiteral(parser.dart.Dart2Parser$MapLiteralContext) -> visitMapLiteral
    java.lang.Object visitMapLiteralEntry(parser.dart.Dart2Parser$MapLiteralEntryContext) -> visitMapLiteralEntry
    java.lang.Object visitThrowExpression(parser.dart.Dart2Parser$ThrowExpressionContext) -> visitThrowExpression
    java.lang.Object visitThrowExpressionWithoutCascade(parser.dart.Dart2Parser$ThrowExpressionWithoutCascadeContext) -> visitThrowExpressionWithoutCascade
    java.lang.Object visitFunctionExpression(parser.dart.Dart2Parser$FunctionExpressionContext) -> visitFunctionExpression
    java.lang.Object visitThisExpression(parser.dart.Dart2Parser$ThisExpressionContext) -> visitThisExpression
    java.lang.Object visitNayaExpression(parser.dart.Dart2Parser$NayaExpressionContext) -> visitNayaExpression
    java.lang.Object visitConstObjectExpression(parser.dart.Dart2Parser$ConstObjectExpressionContext) -> visitConstObjectExpression
    java.lang.Object visitArguments(parser.dart.Dart2Parser$ArgumentsContext) -> visitArguments
    java.lang.Object visitArgumentList(parser.dart.Dart2Parser$ArgumentListContext) -> visitArgumentList
    java.lang.Object visitNamedArgument(parser.dart.Dart2Parser$NamedArgumentContext) -> visitNamedArgument
    java.lang.Object visitCascadeSection(parser.dart.Dart2Parser$CascadeSectionContext) -> visitCascadeSection
    java.lang.Object visitCascadeSelector(parser.dart.Dart2Parser$CascadeSelectorContext) -> visitCascadeSelector
    java.lang.Object visitArgumentPart(parser.dart.Dart2Parser$ArgumentPartContext) -> visitArgumentPart
    java.lang.Object visitAssignmentOperator(parser.dart.Dart2Parser$AssignmentOperatorContext) -> visitAssignmentOperator
    java.lang.Object visitCompoundAssignmentOperator(parser.dart.Dart2Parser$CompoundAssignmentOperatorContext) -> visitCompoundAssignmentOperator
    java.lang.Object visitConditionalExpression(parser.dart.Dart2Parser$ConditionalExpressionContext) -> visitConditionalExpression
    java.lang.Object visitIfNullExpression(parser.dart.Dart2Parser$IfNullExpressionContext) -> visitIfNullExpression
    java.lang.Object visitLogicalOrExpression(parser.dart.Dart2Parser$LogicalOrExpressionContext) -> visitLogicalOrExpression
    java.lang.Object visitLogicalAndExpression(parser.dart.Dart2Parser$LogicalAndExpressionContext) -> visitLogicalAndExpression
    java.lang.Object visitEqualityExpression(parser.dart.Dart2Parser$EqualityExpressionContext) -> visitEqualityExpression
    java.lang.Object visitEqualityOperator(parser.dart.Dart2Parser$EqualityOperatorContext) -> visitEqualityOperator
    java.lang.Object visitRelationalExpression(parser.dart.Dart2Parser$RelationalExpressionContext) -> visitRelationalExpression
    java.lang.Object visitRelationalOperator(parser.dart.Dart2Parser$RelationalOperatorContext) -> visitRelationalOperator
    java.lang.Object visitBitwiseOrExpression(parser.dart.Dart2Parser$BitwiseOrExpressionContext) -> visitBitwiseOrExpression
    java.lang.Object visitBitwiseXorExpression(parser.dart.Dart2Parser$BitwiseXorExpressionContext) -> visitBitwiseXorExpression
    java.lang.Object visitBitwiseAndExpression(parser.dart.Dart2Parser$BitwiseAndExpressionContext) -> visitBitwiseAndExpression
    java.lang.Object visitBitwiseOperator(parser.dart.Dart2Parser$BitwiseOperatorContext) -> visitBitwiseOperator
    java.lang.Object visitShiftExpression(parser.dart.Dart2Parser$ShiftExpressionContext) -> visitShiftExpression
    java.lang.Object visitShiftOperator(parser.dart.Dart2Parser$ShiftOperatorContext) -> visitShiftOperator
    java.lang.Object visitAdditiveExpression(parser.dart.Dart2Parser$AdditiveExpressionContext) -> visitAdditiveExpression
    java.lang.Object visitAdditiveOperator(parser.dart.Dart2Parser$AdditiveOperatorContext) -> visitAdditiveOperator
    java.lang.Object visitMultiplicativeExpression(parser.dart.Dart2Parser$MultiplicativeExpressionContext) -> visitMultiplicativeExpression
    java.lang.Object visitMultiplicativeOperator(parser.dart.Dart2Parser$MultiplicativeOperatorContext) -> visitMultiplicativeOperator
    java.lang.Object visitUnaryExpression(parser.dart.Dart2Parser$UnaryExpressionContext) -> visitUnaryExpression
    java.lang.Object visitPrefixOperator(parser.dart.Dart2Parser$PrefixOperatorContext) -> visitPrefixOperator
    java.lang.Object visitMinusOperator(parser.dart.Dart2Parser$MinusOperatorContext) -> visitMinusOperator
    java.lang.Object visitNegationOperator(parser.dart.Dart2Parser$NegationOperatorContext) -> visitNegationOperator
    java.lang.Object visitTildeOperator(parser.dart.Dart2Parser$TildeOperatorContext) -> visitTildeOperator
    java.lang.Object visitAwaitExpression(parser.dart.Dart2Parser$AwaitExpressionContext) -> visitAwaitExpression
    java.lang.Object visitPostfixExpression(parser.dart.Dart2Parser$PostfixExpressionContext) -> visitPostfixExpression
    java.lang.Object visitPostfixOperator(parser.dart.Dart2Parser$PostfixOperatorContext) -> visitPostfixOperator
    java.lang.Object visitSelector(parser.dart.Dart2Parser$SelectorContext) -> visitSelector
    java.lang.Object visitIncrementOperator(parser.dart.Dart2Parser$IncrementOperatorContext) -> visitIncrementOperator
    java.lang.Object visitAssignableExpression(parser.dart.Dart2Parser$AssignableExpressionContext) -> visitAssignableExpression
    java.lang.Object visitUnconditionalAssignableSelector(parser.dart.Dart2Parser$UnconditionalAssignableSelectorContext) -> visitUnconditionalAssignableSelector
    java.lang.Object visitAssignableSelector(parser.dart.Dart2Parser$AssignableSelectorContext) -> visitAssignableSelector
    java.lang.Object visitIdentifier(parser.dart.Dart2Parser$IdentifierContext) -> visitIdentifier
    java.lang.Object visitQualified(parser.dart.Dart2Parser$QualifiedContext) -> visitQualified
    java.lang.Object visitTypeTest(parser.dart.Dart2Parser$TypeTestContext) -> visitTypeTest
    java.lang.Object visitIsOperator(parser.dart.Dart2Parser$IsOperatorContext) -> visitIsOperator
    java.lang.Object visitTypeCast(parser.dart.Dart2Parser$TypeCastContext) -> visitTypeCast
    java.lang.Object visitAsOperator(parser.dart.Dart2Parser$AsOperatorContext) -> visitAsOperator
    java.lang.Object visitStatements(parser.dart.Dart2Parser$StatementsContext) -> visitStatements
    java.lang.Object visitStatement(parser.dart.Dart2Parser$StatementContext) -> visitStatement
    java.lang.Object visitNonLabledStatment(parser.dart.Dart2Parser$NonLabledStatmentContext) -> visitNonLabledStatment
    java.lang.Object visitExpressionStatement(parser.dart.Dart2Parser$ExpressionStatementContext) -> visitExpressionStatement
    java.lang.Object visitLocalVariableDeclaration(parser.dart.Dart2Parser$LocalVariableDeclarationContext) -> visitLocalVariableDeclaration
    java.lang.Object visitLocalFunctionDeclaration(parser.dart.Dart2Parser$LocalFunctionDeclarationContext) -> visitLocalFunctionDeclaration
    java.lang.Object visitIfStatement(parser.dart.Dart2Parser$IfStatementContext) -> visitIfStatement
    java.lang.Object visitForStatement(parser.dart.Dart2Parser$ForStatementContext) -> visitForStatement
    java.lang.Object visitForLoopParts(parser.dart.Dart2Parser$ForLoopPartsContext) -> visitForLoopParts
    java.lang.Object visitForInitializerStatement(parser.dart.Dart2Parser$ForInitializerStatementContext) -> visitForInitializerStatement
    java.lang.Object visitWhileStatement(parser.dart.Dart2Parser$WhileStatementContext) -> visitWhileStatement
    java.lang.Object visitDoStatement(parser.dart.Dart2Parser$DoStatementContext) -> visitDoStatement
    java.lang.Object visitSwitchStatement(parser.dart.Dart2Parser$SwitchStatementContext) -> visitSwitchStatement
    java.lang.Object visitSwitchCase(parser.dart.Dart2Parser$SwitchCaseContext) -> visitSwitchCase
    java.lang.Object visitDefaultCase(parser.dart.Dart2Parser$DefaultCaseContext) -> visitDefaultCase
    java.lang.Object visitRethrowStatment(parser.dart.Dart2Parser$RethrowStatmentContext) -> visitRethrowStatment
    java.lang.Object visitTryStatement(parser.dart.Dart2Parser$TryStatementContext) -> visitTryStatement
    java.lang.Object visitOnPart(parser.dart.Dart2Parser$OnPartContext) -> visitOnPart
    java.lang.Object visitCatchPart(parser.dart.Dart2Parser$CatchPartContext) -> visitCatchPart
    java.lang.Object visitFinallyPart(parser.dart.Dart2Parser$FinallyPartContext) -> visitFinallyPart
    java.lang.Object visitReturnStatement(parser.dart.Dart2Parser$ReturnStatementContext) -> visitReturnStatement
    java.lang.Object visitLabel(parser.dart.Dart2Parser$LabelContext) -> visitLabel
    java.lang.Object visitBreakStatement(parser.dart.Dart2Parser$BreakStatementContext) -> visitBreakStatement
    java.lang.Object visitContinueStatement(parser.dart.Dart2Parser$ContinueStatementContext) -> visitContinueStatement
    java.lang.Object visitYieldStatement(parser.dart.Dart2Parser$YieldStatementContext) -> visitYieldStatement
    java.lang.Object visitYieldEachStatement(parser.dart.Dart2Parser$YieldEachStatementContext) -> visitYieldEachStatement
    java.lang.Object visitAssertStatement(parser.dart.Dart2Parser$AssertStatementContext) -> visitAssertStatement
    java.lang.Object visitAssertion(parser.dart.Dart2Parser$AssertionContext) -> visitAssertion
    java.lang.Object visitTopLevelDefinition(parser.dart.Dart2Parser$TopLevelDefinitionContext) -> visitTopLevelDefinition
    java.lang.Object visitGetOrSet(parser.dart.Dart2Parser$GetOrSetContext) -> visitGetOrSet
    java.lang.Object visitLibraryDefinition(parser.dart.Dart2Parser$LibraryDefinitionContext) -> visitLibraryDefinition
    java.lang.Object visitScriptTag(parser.dart.Dart2Parser$ScriptTagContext) -> visitScriptTag
    java.lang.Object visitLibraryName(parser.dart.Dart2Parser$LibraryNameContext) -> visitLibraryName
    java.lang.Object visitImportOrExport(parser.dart.Dart2Parser$ImportOrExportContext) -> visitImportOrExport
    java.lang.Object visitDottedIdentifierList(parser.dart.Dart2Parser$DottedIdentifierListContext) -> visitDottedIdentifierList
    java.lang.Object visitLibraryimport(parser.dart.Dart2Parser$LibraryimportContext) -> visitLibraryimport
    java.lang.Object visitImportSpecification(parser.dart.Dart2Parser$ImportSpecificationContext) -> visitImportSpecification
    java.lang.Object visitCombinator(parser.dart.Dart2Parser$CombinatorContext) -> visitCombinator
    java.lang.Object visitIdentifierList(parser.dart.Dart2Parser$IdentifierListContext) -> visitIdentifierList
    java.lang.Object visitLibraryExport(parser.dart.Dart2Parser$LibraryExportContext) -> visitLibraryExport
    java.lang.Object visitPartDirective(parser.dart.Dart2Parser$PartDirectiveContext) -> visitPartDirective
    java.lang.Object visitPartHeader(parser.dart.Dart2Parser$PartHeaderContext) -> visitPartHeader
    java.lang.Object visitPartDeclaration(parser.dart.Dart2Parser$PartDeclarationContext) -> visitPartDeclaration
    java.lang.Object visitUri(parser.dart.Dart2Parser$UriContext) -> visitUri
    java.lang.Object visitConfigurableUri(parser.dart.Dart2Parser$ConfigurableUriContext) -> visitConfigurableUri
    java.lang.Object visitConfigurationUri(parser.dart.Dart2Parser$ConfigurationUriContext) -> visitConfigurationUri
    java.lang.Object visitUriTest(parser.dart.Dart2Parser$UriTestContext) -> visitUriTest
    java.lang.Object visitDtype(parser.dart.Dart2Parser$DtypeContext) -> visitDtype
    java.lang.Object visitTypeName(parser.dart.Dart2Parser$TypeNameContext) -> visitTypeName
    java.lang.Object visitTypeArguments(parser.dart.Dart2Parser$TypeArgumentsContext) -> visitTypeArguments
    java.lang.Object visitTypeList(parser.dart.Dart2Parser$TypeListContext) -> visitTypeList
    java.lang.Object visitTypeAlias(parser.dart.Dart2Parser$TypeAliasContext) -> visitTypeAlias
    java.lang.Object visitTypeAliasBody(parser.dart.Dart2Parser$TypeAliasBodyContext) -> visitTypeAliasBody
    java.lang.Object visitFunctionTypeAlias(parser.dart.Dart2Parser$FunctionTypeAliasContext) -> visitFunctionTypeAlias
    java.lang.Object visitFunctionPrefix(parser.dart.Dart2Parser$FunctionPrefixContext) -> visitFunctionPrefix
parser.java.JavaLexer -> parser.java.JavaLexer:
    org.antlr.v4.runtime.dfa.DFA[] _decisionToDFA -> _decisionToDFA
    org.antlr.v4.runtime.atn.PredictionContextCache _sharedContextCache -> _sharedContextCache
    int ABSTRACT -> ABSTRACT
    int ASSERT -> ASSERT
    int BOOLEAN -> BOOLEAN
    int BREAK -> BREAK
    int BYTE -> BYTE
    int CASE -> CASE
    int CATCH -> CATCH
    int CHAR -> CHAR
    int CLASS -> CLASS
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DEFAULT -> DEFAULT
    int DO -> DO
    int DOUBLE -> DOUBLE
    int ELSE -> ELSE
    int ENUM -> ENUM
    int EXTENDS -> EXTENDS
    int FINAL -> FINAL
    int FINALLY -> FINALLY
    int FLOAT -> FLOAT
    int FOR -> FOR
    int IF -> IF
    int GOTO -> GOTO
    int IMPLEMENTS -> IMPLEMENTS
    int IMPORT -> IMPORT
    int INSTANCEOF -> INSTANCEOF
    int INT -> INT
    int INTERFACE -> INTERFACE
    int LONG -> LONG
    int NATIVE -> NATIVE
    int NEW -> NEW
    int PACKAGE -> PACKAGE
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int PUBLIC -> PUBLIC
    int RETURN -> RETURN
    int SHORT -> SHORT
    int STATIC -> STATIC
    int STRICTFP -> STRICTFP
    int SUPER -> SUPER
    int SWITCH -> SWITCH
    int SYNCHRONIZED -> SYNCHRONIZED
    int THIS -> THIS
    int THROW -> THROW
    int THROWS -> THROWS
    int TRANSIENT -> TRANSIENT
    int TRY -> TRY
    int VOID -> VOID
    int VOLATILE -> VOLATILE
    int WHILE -> WHILE
    int DECIMAL_LITERAL -> DECIMAL_LITERAL
    int HEX_LITERAL -> HEX_LITERAL
    int OCT_LITERAL -> OCT_LITERAL
    int BINARY_LITERAL -> BINARY_LITERAL
    int FLOAT_LITERAL -> FLOAT_LITERAL
    int HEX_FLOAT_LITERAL -> HEX_FLOAT_LITERAL
    int BOOL_LITERAL -> BOOL_LITERAL
    int CHAR_LITERAL -> CHAR_LITERAL
    int STRING_LITERAL -> STRING_LITERAL
    int NULL_LITERAL -> NULL_LITERAL
    int LPAREN -> LPAREN
    int RPAREN -> RPAREN
    int LBRACE -> LBRACE
    int RBRACE -> RBRACE
    int LBRACK -> LBRACK
    int RBRACK -> RBRACK
    int SEMI -> SEMI
    int COMMA -> COMMA
    int DOT -> DOT
    int ASSIGN -> ASSIGN
    int GT -> GT
    int LT -> LT
    int BANG -> BANG
    int TILDE -> TILDE
    int QUESTION -> QUESTION
    int COLON -> COLON
    int EQUAL -> EQUAL
    int LE -> LE
    int GE -> GE
    int NOTEQUAL -> NOTEQUAL
    int AND -> AND
    int OR -> OR
    int INC -> INC
    int DEC -> DEC
    int ADD -> ADD
    int SUB -> SUB
    int MUL -> MUL
    int DIV -> DIV
    int BITAND -> BITAND
    int BITOR -> BITOR
    int CARET -> CARET
    int MOD -> MOD
    int ADD_ASSIGN -> ADD_ASSIGN
    int SUB_ASSIGN -> SUB_ASSIGN
    int MUL_ASSIGN -> MUL_ASSIGN
    int DIV_ASSIGN -> DIV_ASSIGN
    int AND_ASSIGN -> AND_ASSIGN
    int OR_ASSIGN -> OR_ASSIGN
    int XOR_ASSIGN -> XOR_ASSIGN
    int MOD_ASSIGN -> MOD_ASSIGN
    int LSHIFT_ASSIGN -> LSHIFT_ASSIGN
    int RSHIFT_ASSIGN -> RSHIFT_ASSIGN
    int URSHIFT_ASSIGN -> URSHIFT_ASSIGN
    int ARROW -> ARROW
    int COLONCOLON -> COLONCOLON
    int AT -> AT
    int ELLIPSIS -> ELLIPSIS
    int WS -> WS
    int COMMENT -> COMMENT
    int LINE_COMMENT -> LINE_COMMENT
    int IDENTIFIER -> IDENTIFIER
    java.lang.String[] channelNames -> channelNames
    java.lang.String[] modeNames -> modeNames
    java.lang.String[] ruleNames -> ruleNames
    java.lang.String[] _LITERAL_NAMES -> _LITERAL_NAMES
    java.lang.String[] _SYMBOLIC_NAMES -> _SYMBOLIC_NAMES
    org.antlr.v4.runtime.Vocabulary VOCABULARY -> VOCABULARY
    java.lang.String[] tokenNames -> tokenNames
    java.lang.String _serializedATN -> _serializedATN
    org.antlr.v4.runtime.atn.ATN _ATN -> _ATN
    java.lang.String[] makeRuleNames() -> makeRuleNames
    java.lang.String[] makeLiteralNames() -> makeLiteralNames
    java.lang.String[] makeSymbolicNames() -> makeSymbolicNames
    java.lang.String[] getTokenNames() -> getTokenNames
    org.antlr.v4.runtime.Vocabulary getVocabulary() -> getVocabulary
    void <init>(org.antlr.v4.runtime.CharStream) -> <init>
    java.lang.String getGrammarFileName() -> getGrammarFileName
    java.lang.String[] getRuleNames() -> getRuleNames
    java.lang.String getSerializedATN() -> getSerializedATN
    java.lang.String[] getChannelNames() -> getChannelNames
    java.lang.String[] getModeNames() -> getModeNames
    org.antlr.v4.runtime.atn.ATN getATN() -> getATN
    void <clinit>() -> <clinit>
parser.java.JavaParser -> parser.java.JavaParser:
    org.antlr.v4.runtime.dfa.DFA[] _decisionToDFA -> _decisionToDFA
    org.antlr.v4.runtime.atn.PredictionContextCache _sharedContextCache -> _sharedContextCache
    int ABSTRACT -> ABSTRACT
    int ASSERT -> ASSERT
    int BOOLEAN -> BOOLEAN
    int BREAK -> BREAK
    int BYTE -> BYTE
    int CASE -> CASE
    int CATCH -> CATCH
    int CHAR -> CHAR
    int CLASS -> CLASS
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DEFAULT -> DEFAULT
    int DO -> DO
    int DOUBLE -> DOUBLE
    int ELSE -> ELSE
    int ENUM -> ENUM
    int EXTENDS -> EXTENDS
    int FINAL -> FINAL
    int FINALLY -> FINALLY
    int FLOAT -> FLOAT
    int FOR -> FOR
    int IF -> IF
    int GOTO -> GOTO
    int IMPLEMENTS -> IMPLEMENTS
    int IMPORT -> IMPORT
    int INSTANCEOF -> INSTANCEOF
    int INT -> INT
    int INTERFACE -> INTERFACE
    int LONG -> LONG
    int NATIVE -> NATIVE
    int NEW -> NEW
    int PACKAGE -> PACKAGE
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int PUBLIC -> PUBLIC
    int RETURN -> RETURN
    int SHORT -> SHORT
    int STATIC -> STATIC
    int STRICTFP -> STRICTFP
    int SUPER -> SUPER
    int SWITCH -> SWITCH
    int SYNCHRONIZED -> SYNCHRONIZED
    int THIS -> THIS
    int THROW -> THROW
    int THROWS -> THROWS
    int TRANSIENT -> TRANSIENT
    int TRY -> TRY
    int VOID -> VOID
    int VOLATILE -> VOLATILE
    int WHILE -> WHILE
    int DECIMAL_LITERAL -> DECIMAL_LITERAL
    int HEX_LITERAL -> HEX_LITERAL
    int OCT_LITERAL -> OCT_LITERAL
    int BINARY_LITERAL -> BINARY_LITERAL
    int FLOAT_LITERAL -> FLOAT_LITERAL
    int HEX_FLOAT_LITERAL -> HEX_FLOAT_LITERAL
    int BOOL_LITERAL -> BOOL_LITERAL
    int CHAR_LITERAL -> CHAR_LITERAL
    int STRING_LITERAL -> STRING_LITERAL
    int NULL_LITERAL -> NULL_LITERAL
    int LPAREN -> LPAREN
    int RPAREN -> RPAREN
    int LBRACE -> LBRACE
    int RBRACE -> RBRACE
    int LBRACK -> LBRACK
    int RBRACK -> RBRACK
    int SEMI -> SEMI
    int COMMA -> COMMA
    int DOT -> DOT
    int ASSIGN -> ASSIGN
    int GT -> GT
    int LT -> LT
    int BANG -> BANG
    int TILDE -> TILDE
    int QUESTION -> QUESTION
    int COLON -> COLON
    int EQUAL -> EQUAL
    int LE -> LE
    int GE -> GE
    int NOTEQUAL -> NOTEQUAL
    int AND -> AND
    int OR -> OR
    int INC -> INC
    int DEC -> DEC
    int ADD -> ADD
    int SUB -> SUB
    int MUL -> MUL
    int DIV -> DIV
    int BITAND -> BITAND
    int BITOR -> BITOR
    int CARET -> CARET
    int MOD -> MOD
    int ADD_ASSIGN -> ADD_ASSIGN
    int SUB_ASSIGN -> SUB_ASSIGN
    int MUL_ASSIGN -> MUL_ASSIGN
    int DIV_ASSIGN -> DIV_ASSIGN
    int AND_ASSIGN -> AND_ASSIGN
    int OR_ASSIGN -> OR_ASSIGN
    int XOR_ASSIGN -> XOR_ASSIGN
    int MOD_ASSIGN -> MOD_ASSIGN
    int LSHIFT_ASSIGN -> LSHIFT_ASSIGN
    int RSHIFT_ASSIGN -> RSHIFT_ASSIGN
    int URSHIFT_ASSIGN -> URSHIFT_ASSIGN
    int ARROW -> ARROW
    int COLONCOLON -> COLONCOLON
    int AT -> AT
    int ELLIPSIS -> ELLIPSIS
    int WS -> WS
    int COMMENT -> COMMENT
    int LINE_COMMENT -> LINE_COMMENT
    int IDENTIFIER -> IDENTIFIER
    int RULE_compilationUnit -> RULE_compilationUnit
    int RULE_packageDeclaration -> RULE_packageDeclaration
    int RULE_importDeclaration -> RULE_importDeclaration
    int RULE_typeDeclaration -> RULE_typeDeclaration
    int RULE_modifier -> RULE_modifier
    int RULE_classOrInterfaceModifier -> RULE_classOrInterfaceModifier
    int RULE_variableModifier -> RULE_variableModifier
    int RULE_classDeclaration -> RULE_classDeclaration
    int RULE_typeParameters -> RULE_typeParameters
    int RULE_typeParameter -> RULE_typeParameter
    int RULE_typeBound -> RULE_typeBound
    int RULE_enumDeclaration -> RULE_enumDeclaration
    int RULE_enumConstants -> RULE_enumConstants
    int RULE_enumConstant -> RULE_enumConstant
    int RULE_enumBodyDeclarations -> RULE_enumBodyDeclarations
    int RULE_interfaceDeclaration -> RULE_interfaceDeclaration
    int RULE_classBody -> RULE_classBody
    int RULE_interfaceBody -> RULE_interfaceBody
    int RULE_classBodyDeclaration -> RULE_classBodyDeclaration
    int RULE_memberDeclaration -> RULE_memberDeclaration
    int RULE_methodDeclaration -> RULE_methodDeclaration
    int RULE_methodBody -> RULE_methodBody
    int RULE_typeTypeOrVoid -> RULE_typeTypeOrVoid
    int RULE_genericMethodDeclaration -> RULE_genericMethodDeclaration
    int RULE_genericConstructorDeclaration -> RULE_genericConstructorDeclaration
    int RULE_constructorDeclaration -> RULE_constructorDeclaration
    int RULE_fieldDeclaration -> RULE_fieldDeclaration
    int RULE_interfaceBodyDeclaration -> RULE_interfaceBodyDeclaration
    int RULE_interfaceMemberDeclaration -> RULE_interfaceMemberDeclaration
    int RULE_constDeclaration -> RULE_constDeclaration
    int RULE_constantDeclarator -> RULE_constantDeclarator
    int RULE_interfaceMethodDeclaration -> RULE_interfaceMethodDeclaration
    int RULE_interfaceMethodModifier -> RULE_interfaceMethodModifier
    int RULE_genericInterfaceMethodDeclaration -> RULE_genericInterfaceMethodDeclaration
    int RULE_variableDeclarators -> RULE_variableDeclarators
    int RULE_variableDeclarator -> RULE_variableDeclarator
    int RULE_variableDeclaratorId -> RULE_variableDeclaratorId
    int RULE_variableInitializer -> RULE_variableInitializer
    int RULE_arrayInitializer -> RULE_arrayInitializer
    int RULE_classOrInterfaceType -> RULE_classOrInterfaceType
    int RULE_typeArgument -> RULE_typeArgument
    int RULE_qualifiedNameList -> RULE_qualifiedNameList
    int RULE_formalParameters -> RULE_formalParameters
    int RULE_formalParameterList -> RULE_formalParameterList
    int RULE_formalParameter -> RULE_formalParameter
    int RULE_lastFormalParameter -> RULE_lastFormalParameter
    int RULE_qualifiedName -> RULE_qualifiedName
    int RULE_literal -> RULE_literal
    int RULE_integerLiteral -> RULE_integerLiteral
    int RULE_floatLiteral -> RULE_floatLiteral
    int RULE_annotation -> RULE_annotation
    int RULE_elementValuePairs -> RULE_elementValuePairs
    int RULE_elementValuePair -> RULE_elementValuePair
    int RULE_elementValue -> RULE_elementValue
    int RULE_elementValueArrayInitializer -> RULE_elementValueArrayInitializer
    int RULE_annotationTypeDeclaration -> RULE_annotationTypeDeclaration
    int RULE_annotationTypeBody -> RULE_annotationTypeBody
    int RULE_annotationTypeElementDeclaration -> RULE_annotationTypeElementDeclaration
    int RULE_annotationTypeElementRest -> RULE_annotationTypeElementRest
    int RULE_annotationMethodOrConstantRest -> RULE_annotationMethodOrConstantRest
    int RULE_annotationMethodRest -> RULE_annotationMethodRest
    int RULE_annotationConstantRest -> RULE_annotationConstantRest
    int RULE_defaultValue -> RULE_defaultValue
    int RULE_block -> RULE_block
    int RULE_blockStatement -> RULE_blockStatement
    int RULE_localVariableDeclaration -> RULE_localVariableDeclaration
    int RULE_localTypeDeclaration -> RULE_localTypeDeclaration
    int RULE_statement -> RULE_statement
    int RULE_catchClause -> RULE_catchClause
    int RULE_catchType -> RULE_catchType
    int RULE_finallyBlock -> RULE_finallyBlock
    int RULE_resourceSpecification -> RULE_resourceSpecification
    int RULE_resources -> RULE_resources
    int RULE_resource -> RULE_resource
    int RULE_switchBlockStatementGroup -> RULE_switchBlockStatementGroup
    int RULE_switchLabel -> RULE_switchLabel
    int RULE_forControl -> RULE_forControl
    int RULE_forInit -> RULE_forInit
    int RULE_enhancedForControl -> RULE_enhancedForControl
    int RULE_parExpression -> RULE_parExpression
    int RULE_expressionList -> RULE_expressionList
    int RULE_methodCall -> RULE_methodCall
    int RULE_expression -> RULE_expression
    int RULE_lambdaExpression -> RULE_lambdaExpression
    int RULE_lambdaParameters -> RULE_lambdaParameters
    int RULE_lambdaBody -> RULE_lambdaBody
    int RULE_primary -> RULE_primary
    int RULE_classType -> RULE_classType
    int RULE_creator -> RULE_creator
    int RULE_createdName -> RULE_createdName
    int RULE_innerCreator -> RULE_innerCreator
    int RULE_arrayCreatorRest -> RULE_arrayCreatorRest
    int RULE_classCreatorRest -> RULE_classCreatorRest
    int RULE_explicitGenericInvocation -> RULE_explicitGenericInvocation
    int RULE_typeArgumentsOrDiamond -> RULE_typeArgumentsOrDiamond
    int RULE_nonWildcardTypeArgumentsOrDiamond -> RULE_nonWildcardTypeArgumentsOrDiamond
    int RULE_nonWildcardTypeArguments -> RULE_nonWildcardTypeArguments
    int RULE_typeList -> RULE_typeList
    int RULE_typeType -> RULE_typeType
    int RULE_primitiveType -> RULE_primitiveType
    int RULE_typeArguments -> RULE_typeArguments
    int RULE_superSuffix -> RULE_superSuffix
    int RULE_explicitGenericInvocationSuffix -> RULE_explicitGenericInvocationSuffix
    int RULE_arguments -> RULE_arguments
    java.lang.String[] ruleNames -> ruleNames
    java.lang.String[] _LITERAL_NAMES -> _LITERAL_NAMES
    java.lang.String[] _SYMBOLIC_NAMES -> _SYMBOLIC_NAMES
    org.antlr.v4.runtime.Vocabulary VOCABULARY -> VOCABULARY
    java.lang.String[] tokenNames -> tokenNames
    java.lang.String _serializedATN -> _serializedATN
    org.antlr.v4.runtime.atn.ATN _ATN -> _ATN
    java.lang.String[] makeRuleNames() -> makeRuleNames
    java.lang.String[] makeLiteralNames() -> makeLiteralNames
    java.lang.String[] makeSymbolicNames() -> makeSymbolicNames
    java.lang.String[] getTokenNames() -> getTokenNames
    org.antlr.v4.runtime.Vocabulary getVocabulary() -> getVocabulary
    java.lang.String getGrammarFileName() -> getGrammarFileName
    java.lang.String[] getRuleNames() -> getRuleNames
    java.lang.String getSerializedATN() -> getSerializedATN
    org.antlr.v4.runtime.atn.ATN getATN() -> getATN
    void <init>(org.antlr.v4.runtime.TokenStream) -> <init>
    parser.java.JavaParser$CompilationUnitContext compilationUnit() -> compilationUnit
    parser.java.JavaParser$PackageDeclarationContext packageDeclaration() -> packageDeclaration
    parser.java.JavaParser$ImportDeclarationContext importDeclaration() -> importDeclaration
    parser.java.JavaParser$TypeDeclarationContext typeDeclaration() -> typeDeclaration
    parser.java.JavaParser$ModifierContext modifier() -> modifier
    parser.java.JavaParser$ClassOrInterfaceModifierContext classOrInterfaceModifier() -> classOrInterfaceModifier
    parser.java.JavaParser$VariableModifierContext variableModifier() -> variableModifier
    parser.java.JavaParser$ClassDeclarationContext classDeclaration() -> classDeclaration
    parser.java.JavaParser$TypeParametersContext typeParameters() -> typeParameters
    parser.java.JavaParser$TypeParameterContext typeParameter() -> typeParameter
    parser.java.JavaParser$TypeBoundContext typeBound() -> typeBound
    parser.java.JavaParser$EnumDeclarationContext enumDeclaration() -> enumDeclaration
    parser.java.JavaParser$EnumConstantsContext enumConstants() -> enumConstants
    parser.java.JavaParser$EnumConstantContext enumConstant() -> enumConstant
    parser.java.JavaParser$EnumBodyDeclarationsContext enumBodyDeclarations() -> enumBodyDeclarations
    parser.java.JavaParser$InterfaceDeclarationContext interfaceDeclaration() -> interfaceDeclaration
    parser.java.JavaParser$ClassBodyContext classBody() -> classBody
    parser.java.JavaParser$InterfaceBodyContext interfaceBody() -> interfaceBody
    parser.java.JavaParser$ClassBodyDeclarationContext classBodyDeclaration() -> classBodyDeclaration
    parser.java.JavaParser$MemberDeclarationContext memberDeclaration() -> memberDeclaration
    parser.java.JavaParser$MethodDeclarationContext methodDeclaration() -> methodDeclaration
    parser.java.JavaParser$MethodBodyContext methodBody() -> methodBody
    parser.java.JavaParser$TypeTypeOrVoidContext typeTypeOrVoid() -> typeTypeOrVoid
    parser.java.JavaParser$GenericMethodDeclarationContext genericMethodDeclaration() -> genericMethodDeclaration
    parser.java.JavaParser$GenericConstructorDeclarationContext genericConstructorDeclaration() -> genericConstructorDeclaration
    parser.java.JavaParser$ConstructorDeclarationContext constructorDeclaration() -> constructorDeclaration
    parser.java.JavaParser$FieldDeclarationContext fieldDeclaration() -> fieldDeclaration
    parser.java.JavaParser$InterfaceBodyDeclarationContext interfaceBodyDeclaration() -> interfaceBodyDeclaration
    parser.java.JavaParser$InterfaceMemberDeclarationContext interfaceMemberDeclaration() -> interfaceMemberDeclaration
    parser.java.JavaParser$ConstDeclarationContext constDeclaration() -> constDeclaration
    parser.java.JavaParser$ConstantDeclaratorContext constantDeclarator() -> constantDeclarator
    parser.java.JavaParser$InterfaceMethodDeclarationContext interfaceMethodDeclaration() -> interfaceMethodDeclaration
    parser.java.JavaParser$InterfaceMethodModifierContext interfaceMethodModifier() -> interfaceMethodModifier
    parser.java.JavaParser$GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() -> genericInterfaceMethodDeclaration
    parser.java.JavaParser$VariableDeclaratorsContext variableDeclarators() -> variableDeclarators
    parser.java.JavaParser$VariableDeclaratorContext variableDeclarator() -> variableDeclarator
    parser.java.JavaParser$VariableDeclaratorIdContext variableDeclaratorId() -> variableDeclaratorId
    parser.java.JavaParser$VariableInitializerContext variableInitializer() -> variableInitializer
    parser.java.JavaParser$ArrayInitializerContext arrayInitializer() -> arrayInitializer
    parser.java.JavaParser$ClassOrInterfaceTypeContext classOrInterfaceType() -> classOrInterfaceType
    parser.java.JavaParser$TypeArgumentContext typeArgument() -> typeArgument
    parser.java.JavaParser$QualifiedNameListContext qualifiedNameList() -> qualifiedNameList
    parser.java.JavaParser$FormalParametersContext formalParameters() -> formalParameters
    parser.java.JavaParser$FormalParameterListContext formalParameterList() -> formalParameterList
    parser.java.JavaParser$FormalParameterContext formalParameter() -> formalParameter
    parser.java.JavaParser$LastFormalParameterContext lastFormalParameter() -> lastFormalParameter
    parser.java.JavaParser$QualifiedNameContext qualifiedName() -> qualifiedName
    parser.java.JavaParser$LiteralContext literal() -> literal
    parser.java.JavaParser$IntegerLiteralContext integerLiteral() -> integerLiteral
    parser.java.JavaParser$FloatLiteralContext floatLiteral() -> floatLiteral
    parser.java.JavaParser$AnnotationContext annotation() -> annotation
    parser.java.JavaParser$ElementValuePairsContext elementValuePairs() -> elementValuePairs
    parser.java.JavaParser$ElementValuePairContext elementValuePair() -> elementValuePair
    parser.java.JavaParser$ElementValueContext elementValue() -> elementValue
    parser.java.JavaParser$ElementValueArrayInitializerContext elementValueArrayInitializer() -> elementValueArrayInitializer
    parser.java.JavaParser$AnnotationTypeDeclarationContext annotationTypeDeclaration() -> annotationTypeDeclaration
    parser.java.JavaParser$AnnotationTypeBodyContext annotationTypeBody() -> annotationTypeBody
    parser.java.JavaParser$AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() -> annotationTypeElementDeclaration
    parser.java.JavaParser$AnnotationTypeElementRestContext annotationTypeElementRest() -> annotationTypeElementRest
    parser.java.JavaParser$AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() -> annotationMethodOrConstantRest
    parser.java.JavaParser$AnnotationMethodRestContext annotationMethodRest() -> annotationMethodRest
    parser.java.JavaParser$AnnotationConstantRestContext annotationConstantRest() -> annotationConstantRest
    parser.java.JavaParser$DefaultValueContext defaultValue() -> defaultValue
    parser.java.JavaParser$BlockContext block() -> block
    parser.java.JavaParser$BlockStatementContext blockStatement() -> blockStatement
    parser.java.JavaParser$LocalVariableDeclarationContext localVariableDeclaration() -> localVariableDeclaration
    parser.java.JavaParser$LocalTypeDeclarationContext localTypeDeclaration() -> localTypeDeclaration
    parser.java.JavaParser$StatementContext statement() -> statement
    parser.java.JavaParser$CatchClauseContext catchClause() -> catchClause
    parser.java.JavaParser$CatchTypeContext catchType() -> catchType
    parser.java.JavaParser$FinallyBlockContext finallyBlock() -> finallyBlock
    parser.java.JavaParser$ResourceSpecificationContext resourceSpecification() -> resourceSpecification
    parser.java.JavaParser$ResourcesContext resources() -> resources
    parser.java.JavaParser$ResourceContext resource() -> resource
    parser.java.JavaParser$SwitchBlockStatementGroupContext switchBlockStatementGroup() -> switchBlockStatementGroup
    parser.java.JavaParser$SwitchLabelContext switchLabel() -> switchLabel
    parser.java.JavaParser$ForControlContext forControl() -> forControl
    parser.java.JavaParser$ForInitContext forInit() -> forInit
    parser.java.JavaParser$EnhancedForControlContext enhancedForControl() -> enhancedForControl
    parser.java.JavaParser$ParExpressionContext parExpression() -> parExpression
    parser.java.JavaParser$ExpressionListContext expressionList() -> expressionList
    parser.java.JavaParser$MethodCallContext methodCall() -> methodCall
    parser.java.JavaParser$ExpressionContext expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    parser.java.JavaParser$LambdaExpressionContext lambdaExpression() -> lambdaExpression
    parser.java.JavaParser$LambdaParametersContext lambdaParameters() -> lambdaParameters
    parser.java.JavaParser$LambdaBodyContext lambdaBody() -> lambdaBody
    parser.java.JavaParser$PrimaryContext primary() -> primary
    parser.java.JavaParser$ClassTypeContext classType() -> classType
    parser.java.JavaParser$CreatorContext creator() -> creator
    parser.java.JavaParser$CreatedNameContext createdName() -> createdName
    parser.java.JavaParser$InnerCreatorContext innerCreator() -> innerCreator
    parser.java.JavaParser$ArrayCreatorRestContext arrayCreatorRest() -> arrayCreatorRest
    parser.java.JavaParser$ClassCreatorRestContext classCreatorRest() -> classCreatorRest
    parser.java.JavaParser$ExplicitGenericInvocationContext explicitGenericInvocation() -> explicitGenericInvocation
    parser.java.JavaParser$TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() -> typeArgumentsOrDiamond
    parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() -> nonWildcardTypeArgumentsOrDiamond
    parser.java.JavaParser$NonWildcardTypeArgumentsContext nonWildcardTypeArguments() -> nonWildcardTypeArguments
    parser.java.JavaParser$TypeListContext typeList() -> typeList
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    parser.java.JavaParser$PrimitiveTypeContext primitiveType() -> primitiveType
    parser.java.JavaParser$TypeArgumentsContext typeArguments() -> typeArguments
    parser.java.JavaParser$SuperSuffixContext superSuffix() -> superSuffix
    parser.java.JavaParser$ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() -> explicitGenericInvocationSuffix
    parser.java.JavaParser$ArgumentsContext arguments() -> arguments
    boolean sempred(org.antlr.v4.runtime.RuleContext,int,int) -> sempred
    boolean expression_sempred(parser.java.JavaParser$ExpressionContext,int) -> expression_sempred
    void <clinit>() -> <clinit>
parser.java.JavaParser$AnnotationConstantRestContext -> parser.java.JavaParser$AnnotationConstantRestContext:
    parser.java.JavaParser$VariableDeclaratorsContext variableDeclarators() -> variableDeclarators
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$AnnotationContext -> parser.java.JavaParser$AnnotationContext:
    org.antlr.v4.runtime.tree.TerminalNode AT() -> AT
    parser.java.JavaParser$QualifiedNameContext qualifiedName() -> qualifiedName
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$ElementValuePairsContext elementValuePairs() -> elementValuePairs
    parser.java.JavaParser$ElementValueContext elementValue() -> elementValue
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$AnnotationMethodOrConstantRestContext -> parser.java.JavaParser$AnnotationMethodOrConstantRestContext:
    parser.java.JavaParser$AnnotationMethodRestContext annotationMethodRest() -> annotationMethodRest
    parser.java.JavaParser$AnnotationConstantRestContext annotationConstantRest() -> annotationConstantRest
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$AnnotationMethodRestContext -> parser.java.JavaParser$AnnotationMethodRestContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$DefaultValueContext defaultValue() -> defaultValue
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$AnnotationTypeBodyContext -> parser.java.JavaParser$AnnotationTypeBodyContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List annotationTypeElementDeclaration() -> annotationTypeElementDeclaration
    parser.java.JavaParser$AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int) -> annotationTypeElementDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$AnnotationTypeDeclarationContext -> parser.java.JavaParser$AnnotationTypeDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode AT() -> AT
    org.antlr.v4.runtime.tree.TerminalNode INTERFACE() -> INTERFACE
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$AnnotationTypeBodyContext annotationTypeBody() -> annotationTypeBody
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$AnnotationTypeElementDeclarationContext -> parser.java.JavaParser$AnnotationTypeElementDeclarationContext:
    parser.java.JavaParser$AnnotationTypeElementRestContext annotationTypeElementRest() -> annotationTypeElementRest
    java.util.List modifier() -> modifier
    parser.java.JavaParser$ModifierContext modifier(int) -> modifier
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$AnnotationTypeElementRestContext -> parser.java.JavaParser$AnnotationTypeElementRestContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    parser.java.JavaParser$AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() -> annotationMethodOrConstantRest
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.java.JavaParser$ClassDeclarationContext classDeclaration() -> classDeclaration
    parser.java.JavaParser$InterfaceDeclarationContext interfaceDeclaration() -> interfaceDeclaration
    parser.java.JavaParser$EnumDeclarationContext enumDeclaration() -> enumDeclaration
    parser.java.JavaParser$AnnotationTypeDeclarationContext annotationTypeDeclaration() -> annotationTypeDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ArgumentsContext -> parser.java.JavaParser$ArgumentsContext:
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$ExpressionListContext expressionList() -> expressionList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ArrayCreatorRestContext -> parser.java.JavaParser$ArrayCreatorRestContext:
    java.util.List LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode LBRACK(int) -> LBRACK
    java.util.List RBRACK() -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK(int) -> RBRACK
    parser.java.JavaParser$ArrayInitializerContext arrayInitializer() -> arrayInitializer
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ArrayInitializerContext -> parser.java.JavaParser$ArrayInitializerContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List variableInitializer() -> variableInitializer
    parser.java.JavaParser$VariableInitializerContext variableInitializer(int) -> variableInitializer
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$BlockContext -> parser.java.JavaParser$BlockContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List blockStatement() -> blockStatement
    parser.java.JavaParser$BlockStatementContext blockStatement(int) -> blockStatement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$BlockStatementContext -> parser.java.JavaParser$BlockStatementContext:
    parser.java.JavaParser$LocalVariableDeclarationContext localVariableDeclaration() -> localVariableDeclaration
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.java.JavaParser$StatementContext statement() -> statement
    parser.java.JavaParser$LocalTypeDeclarationContext localTypeDeclaration() -> localTypeDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$CatchClauseContext -> parser.java.JavaParser$CatchClauseContext:
    org.antlr.v4.runtime.tree.TerminalNode CATCH() -> CATCH
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    parser.java.JavaParser$CatchTypeContext catchType() -> catchType
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$BlockContext block() -> block
    java.util.List variableModifier() -> variableModifier
    parser.java.JavaParser$VariableModifierContext variableModifier(int) -> variableModifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$CatchTypeContext -> parser.java.JavaParser$CatchTypeContext:
    java.util.List qualifiedName() -> qualifiedName
    parser.java.JavaParser$QualifiedNameContext qualifiedName(int) -> qualifiedName
    java.util.List BITOR() -> BITOR
    org.antlr.v4.runtime.tree.TerminalNode BITOR(int) -> BITOR
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ClassBodyContext -> parser.java.JavaParser$ClassBodyContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List classBodyDeclaration() -> classBodyDeclaration
    parser.java.JavaParser$ClassBodyDeclarationContext classBodyDeclaration(int) -> classBodyDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ClassBodyDeclarationContext -> parser.java.JavaParser$ClassBodyDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.java.JavaParser$BlockContext block() -> block
    org.antlr.v4.runtime.tree.TerminalNode STATIC() -> STATIC
    parser.java.JavaParser$MemberDeclarationContext memberDeclaration() -> memberDeclaration
    java.util.List modifier() -> modifier
    parser.java.JavaParser$ModifierContext modifier(int) -> modifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ClassCreatorRestContext -> parser.java.JavaParser$ClassCreatorRestContext:
    parser.java.JavaParser$ArgumentsContext arguments() -> arguments
    parser.java.JavaParser$ClassBodyContext classBody() -> classBody
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ClassDeclarationContext -> parser.java.JavaParser$ClassDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode CLASS() -> CLASS
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$ClassBodyContext classBody() -> classBody
    parser.java.JavaParser$TypeParametersContext typeParameters() -> typeParameters
    org.antlr.v4.runtime.tree.TerminalNode EXTENDS() -> EXTENDS
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    org.antlr.v4.runtime.tree.TerminalNode IMPLEMENTS() -> IMPLEMENTS
    parser.java.JavaParser$TypeListContext typeList() -> typeList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ClassOrInterfaceModifierContext -> parser.java.JavaParser$ClassOrInterfaceModifierContext:
    parser.java.JavaParser$AnnotationContext annotation() -> annotation
    org.antlr.v4.runtime.tree.TerminalNode PUBLIC() -> PUBLIC
    org.antlr.v4.runtime.tree.TerminalNode PROTECTED() -> PROTECTED
    org.antlr.v4.runtime.tree.TerminalNode PRIVATE() -> PRIVATE
    org.antlr.v4.runtime.tree.TerminalNode STATIC() -> STATIC
    org.antlr.v4.runtime.tree.TerminalNode ABSTRACT() -> ABSTRACT
    org.antlr.v4.runtime.tree.TerminalNode FINAL() -> FINAL
    org.antlr.v4.runtime.tree.TerminalNode STRICTFP() -> STRICTFP
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ClassOrInterfaceTypeContext -> parser.java.JavaParser$ClassOrInterfaceTypeContext:
    java.util.List IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER(int) -> IDENTIFIER
    java.util.List typeArguments() -> typeArguments
    parser.java.JavaParser$TypeArgumentsContext typeArguments(int) -> typeArguments
    java.util.List DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode DOT(int) -> DOT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ClassTypeContext -> parser.java.JavaParser$ClassTypeContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$ClassOrInterfaceTypeContext classOrInterfaceType() -> classOrInterfaceType
    org.antlr.v4.runtime.tree.TerminalNode DOT() -> DOT
    java.util.List annotation() -> annotation
    parser.java.JavaParser$AnnotationContext annotation(int) -> annotation
    parser.java.JavaParser$TypeArgumentsContext typeArguments() -> typeArguments
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$CompilationUnitContext -> parser.java.JavaParser$CompilationUnitContext:
    org.antlr.v4.runtime.tree.TerminalNode EOF() -> EOF
    parser.java.JavaParser$PackageDeclarationContext packageDeclaration() -> packageDeclaration
    java.util.List importDeclaration() -> importDeclaration
    parser.java.JavaParser$ImportDeclarationContext importDeclaration(int) -> importDeclaration
    java.util.List typeDeclaration() -> typeDeclaration
    parser.java.JavaParser$TypeDeclarationContext typeDeclaration(int) -> typeDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ConstDeclarationContext -> parser.java.JavaParser$ConstDeclarationContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    java.util.List constantDeclarator() -> constantDeclarator
    parser.java.JavaParser$ConstantDeclaratorContext constantDeclarator(int) -> constantDeclarator
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ConstantDeclaratorContext -> parser.java.JavaParser$ConstantDeclaratorContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode ASSIGN() -> ASSIGN
    parser.java.JavaParser$VariableInitializerContext variableInitializer() -> variableInitializer
    java.util.List LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode LBRACK(int) -> LBRACK
    java.util.List RBRACK() -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK(int) -> RBRACK
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ConstructorDeclarationContext -> parser.java.JavaParser$ConstructorDeclarationContext:
    parser.java.JavaParser$BlockContext constructorBody -> constructorBody
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$FormalParametersContext formalParameters() -> formalParameters
    parser.java.JavaParser$BlockContext block() -> block
    org.antlr.v4.runtime.tree.TerminalNode THROWS() -> THROWS
    parser.java.JavaParser$QualifiedNameListContext qualifiedNameList() -> qualifiedNameList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$CreatedNameContext -> parser.java.JavaParser$CreatedNameContext:
    java.util.List IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER(int) -> IDENTIFIER
    java.util.List typeArgumentsOrDiamond() -> typeArgumentsOrDiamond
    parser.java.JavaParser$TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int) -> typeArgumentsOrDiamond
    java.util.List DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode DOT(int) -> DOT
    parser.java.JavaParser$PrimitiveTypeContext primitiveType() -> primitiveType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$CreatorContext -> parser.java.JavaParser$CreatorContext:
    parser.java.JavaParser$NonWildcardTypeArgumentsContext nonWildcardTypeArguments() -> nonWildcardTypeArguments
    parser.java.JavaParser$CreatedNameContext createdName() -> createdName
    parser.java.JavaParser$ClassCreatorRestContext classCreatorRest() -> classCreatorRest
    parser.java.JavaParser$ArrayCreatorRestContext arrayCreatorRest() -> arrayCreatorRest
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$DefaultValueContext -> parser.java.JavaParser$DefaultValueContext:
    org.antlr.v4.runtime.tree.TerminalNode DEFAULT() -> DEFAULT
    parser.java.JavaParser$ElementValueContext elementValue() -> elementValue
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ElementValueArrayInitializerContext -> parser.java.JavaParser$ElementValueArrayInitializerContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List elementValue() -> elementValue
    parser.java.JavaParser$ElementValueContext elementValue(int) -> elementValue
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ElementValueContext -> parser.java.JavaParser$ElementValueContext:
    parser.java.JavaParser$ExpressionContext expression() -> expression
    parser.java.JavaParser$AnnotationContext annotation() -> annotation
    parser.java.JavaParser$ElementValueArrayInitializerContext elementValueArrayInitializer() -> elementValueArrayInitializer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ElementValuePairContext -> parser.java.JavaParser$ElementValuePairContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode ASSIGN() -> ASSIGN
    parser.java.JavaParser$ElementValueContext elementValue() -> elementValue
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ElementValuePairsContext -> parser.java.JavaParser$ElementValuePairsContext:
    java.util.List elementValuePair() -> elementValuePair
    parser.java.JavaParser$ElementValuePairContext elementValuePair(int) -> elementValuePair
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$EnhancedForControlContext -> parser.java.JavaParser$EnhancedForControlContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    parser.java.JavaParser$VariableDeclaratorIdContext variableDeclaratorId() -> variableDeclaratorId
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.java.JavaParser$ExpressionContext expression() -> expression
    java.util.List variableModifier() -> variableModifier
    parser.java.JavaParser$VariableModifierContext variableModifier(int) -> variableModifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$EnumBodyDeclarationsContext -> parser.java.JavaParser$EnumBodyDeclarationsContext:
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    java.util.List classBodyDeclaration() -> classBodyDeclaration
    parser.java.JavaParser$ClassBodyDeclarationContext classBodyDeclaration(int) -> classBodyDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$EnumConstantContext -> parser.java.JavaParser$EnumConstantContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    java.util.List annotation() -> annotation
    parser.java.JavaParser$AnnotationContext annotation(int) -> annotation
    parser.java.JavaParser$ArgumentsContext arguments() -> arguments
    parser.java.JavaParser$ClassBodyContext classBody() -> classBody
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$EnumConstantsContext -> parser.java.JavaParser$EnumConstantsContext:
    java.util.List enumConstant() -> enumConstant
    parser.java.JavaParser$EnumConstantContext enumConstant(int) -> enumConstant
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$EnumDeclarationContext -> parser.java.JavaParser$EnumDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode ENUM() -> ENUM
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    org.antlr.v4.runtime.tree.TerminalNode IMPLEMENTS() -> IMPLEMENTS
    parser.java.JavaParser$TypeListContext typeList() -> typeList
    parser.java.JavaParser$EnumConstantsContext enumConstants() -> enumConstants
    org.antlr.v4.runtime.tree.TerminalNode COMMA() -> COMMA
    parser.java.JavaParser$EnumBodyDeclarationsContext enumBodyDeclarations() -> enumBodyDeclarations
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExplicitGenericInvocationContext -> parser.java.JavaParser$ExplicitGenericInvocationContext:
    parser.java.JavaParser$NonWildcardTypeArgumentsContext nonWildcardTypeArguments() -> nonWildcardTypeArguments
    parser.java.JavaParser$ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() -> explicitGenericInvocationSuffix
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExplicitGenericInvocationSuffixContext -> parser.java.JavaParser$ExplicitGenericInvocationSuffixContext:
    org.antlr.v4.runtime.tree.TerminalNode SUPER() -> SUPER
    parser.java.JavaParser$SuperSuffixContext superSuffix() -> superSuffix
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$ArgumentsContext arguments() -> arguments
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase0Context -> parser.java.JavaParser$ExprCase0Context:
    parser.java.JavaParser$PrimaryContext primary() -> primary
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase10Context -> parser.java.JavaParser$ExprCase10Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode ADD() -> ADD
    org.antlr.v4.runtime.tree.TerminalNode SUB() -> SUB
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase11Context -> parser.java.JavaParser$ExprCase11Context:
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    java.util.List LT() -> LT
    org.antlr.v4.runtime.tree.TerminalNode LT(int) -> LT
    java.util.List GT() -> GT
    org.antlr.v4.runtime.tree.TerminalNode GT(int) -> GT
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase12Context -> parser.java.JavaParser$ExprCase12Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode LE() -> LE
    org.antlr.v4.runtime.tree.TerminalNode GE() -> GE
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase13Context -> parser.java.JavaParser$ExprCase13Context:
    org.antlr.v4.runtime.Token bop -> bop
    parser.java.JavaParser$ExpressionContext expression() -> expression
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    org.antlr.v4.runtime.tree.TerminalNode INSTANCEOF() -> INSTANCEOF
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase14Context -> parser.java.JavaParser$ExprCase14Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode EQUAL() -> EQUAL
    org.antlr.v4.runtime.tree.TerminalNode NOTEQUAL() -> NOTEQUAL
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase15Context -> parser.java.JavaParser$ExprCase15Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode BITAND() -> BITAND
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase16Context -> parser.java.JavaParser$ExprCase16Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode CARET() -> CARET
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase17Context -> parser.java.JavaParser$ExprCase17Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode BITOR() -> BITOR
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase18Context -> parser.java.JavaParser$ExprCase18Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode AND() -> AND
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase19Context -> parser.java.JavaParser$ExprCase19Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode OR() -> OR
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase1Context -> parser.java.JavaParser$ExprCase1Context:
    org.antlr.v4.runtime.Token bop -> bop
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$MethodCallContext methodCall() -> methodCall
    org.antlr.v4.runtime.tree.TerminalNode THIS() -> THIS
    org.antlr.v4.runtime.tree.TerminalNode NEW() -> NEW
    parser.java.JavaParser$InnerCreatorContext innerCreator() -> innerCreator
    org.antlr.v4.runtime.tree.TerminalNode SUPER() -> SUPER
    parser.java.JavaParser$SuperSuffixContext superSuffix() -> superSuffix
    parser.java.JavaParser$ExplicitGenericInvocationContext explicitGenericInvocation() -> explicitGenericInvocation
    parser.java.JavaParser$NonWildcardTypeArgumentsContext nonWildcardTypeArguments() -> nonWildcardTypeArguments
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase20Context -> parser.java.JavaParser$ExprCase20Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    org.antlr.v4.runtime.tree.TerminalNode QUESTION() -> QUESTION
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase21Context -> parser.java.JavaParser$ExprCase21Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode ASSIGN() -> ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode ADD_ASSIGN() -> ADD_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode SUB_ASSIGN() -> SUB_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode MUL_ASSIGN() -> MUL_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode DIV_ASSIGN() -> DIV_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode AND_ASSIGN() -> AND_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode OR_ASSIGN() -> OR_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode XOR_ASSIGN() -> XOR_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode RSHIFT_ASSIGN() -> RSHIFT_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode URSHIFT_ASSIGN() -> URSHIFT_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode LSHIFT_ASSIGN() -> LSHIFT_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode MOD_ASSIGN() -> MOD_ASSIGN
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase22Context -> parser.java.JavaParser$ExprCase22Context:
    parser.java.JavaParser$LambdaExpressionContext lambdaExpression() -> lambdaExpression
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase23Context -> parser.java.JavaParser$ExprCase23Context:
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode COLONCOLON() -> COLONCOLON
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$TypeArgumentsContext typeArguments() -> typeArguments
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase24Context -> parser.java.JavaParser$ExprCase24Context:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    org.antlr.v4.runtime.tree.TerminalNode COLONCOLON() -> COLONCOLON
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode NEW() -> NEW
    parser.java.JavaParser$TypeArgumentsContext typeArguments() -> typeArguments
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase25Context -> parser.java.JavaParser$ExprCase25Context:
    parser.java.JavaParser$ClassTypeContext classType() -> classType
    org.antlr.v4.runtime.tree.TerminalNode COLONCOLON() -> COLONCOLON
    org.antlr.v4.runtime.tree.TerminalNode NEW() -> NEW
    parser.java.JavaParser$TypeArgumentsContext typeArguments() -> typeArguments
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase2Context -> parser.java.JavaParser$ExprCase2Context:
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK() -> RBRACK
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase3Context -> parser.java.JavaParser$ExprCase3Context:
    parser.java.JavaParser$MethodCallContext methodCall() -> methodCall
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase4Context -> parser.java.JavaParser$ExprCase4Context:
    org.antlr.v4.runtime.tree.TerminalNode NEW() -> NEW
    parser.java.JavaParser$CreatorContext creator() -> creator
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase5Context -> parser.java.JavaParser$ExprCase5Context:
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$ExpressionContext expression() -> expression
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase6Context -> parser.java.JavaParser$ExprCase6Context:
    org.antlr.v4.runtime.Token postfix -> postfix
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode INC() -> INC
    org.antlr.v4.runtime.tree.TerminalNode DEC() -> DEC
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase7Context -> parser.java.JavaParser$ExprCase7Context:
    org.antlr.v4.runtime.Token prefix -> prefix
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode ADD() -> ADD
    org.antlr.v4.runtime.tree.TerminalNode SUB() -> SUB
    org.antlr.v4.runtime.tree.TerminalNode INC() -> INC
    org.antlr.v4.runtime.tree.TerminalNode DEC() -> DEC
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase8Context -> parser.java.JavaParser$ExprCase8Context:
    org.antlr.v4.runtime.Token prefix -> prefix
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode TILDE() -> TILDE
    org.antlr.v4.runtime.tree.TerminalNode BANG() -> BANG
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExprCase9Context -> parser.java.JavaParser$ExprCase9Context:
    org.antlr.v4.runtime.Token bop -> bop
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode MUL() -> MUL
    org.antlr.v4.runtime.tree.TerminalNode DIV() -> DIV
    org.antlr.v4.runtime.tree.TerminalNode MOD() -> MOD
    void <init>(parser.java.JavaParser$ExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ExpressionContext -> parser.java.JavaParser$ExpressionContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void <init>() -> <init>
    void copyFrom(parser.java.JavaParser$ExpressionContext) -> copyFrom
parser.java.JavaParser$ExpressionListContext -> parser.java.JavaParser$ExpressionListContext:
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$FieldDeclarationContext -> parser.java.JavaParser$FieldDeclarationContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    parser.java.JavaParser$VariableDeclaratorsContext variableDeclarators() -> variableDeclarators
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$FinallyBlockContext -> parser.java.JavaParser$FinallyBlockContext:
    org.antlr.v4.runtime.tree.TerminalNode FINALLY() -> FINALLY
    parser.java.JavaParser$BlockContext block() -> block
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$FloatLiteralContext -> parser.java.JavaParser$FloatLiteralContext:
    org.antlr.v4.runtime.tree.TerminalNode FLOAT_LITERAL() -> FLOAT_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode HEX_FLOAT_LITERAL() -> HEX_FLOAT_LITERAL
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ForControlContext -> parser.java.JavaParser$ForControlContext:
    parser.java.JavaParser$ExpressionListContext forUpdate -> forUpdate
    parser.java.JavaParser$EnhancedForControlContext enhancedForControl() -> enhancedForControl
    java.util.List SEMI() -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode SEMI(int) -> SEMI
    parser.java.JavaParser$ForInitContext forInit() -> forInit
    parser.java.JavaParser$ExpressionContext expression() -> expression
    parser.java.JavaParser$ExpressionListContext expressionList() -> expressionList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ForInitContext -> parser.java.JavaParser$ForInitContext:
    parser.java.JavaParser$LocalVariableDeclarationContext localVariableDeclaration() -> localVariableDeclaration
    parser.java.JavaParser$ExpressionListContext expressionList() -> expressionList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$FormalParameterContext -> parser.java.JavaParser$FormalParameterContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    parser.java.JavaParser$VariableDeclaratorIdContext variableDeclaratorId() -> variableDeclaratorId
    java.util.List variableModifier() -> variableModifier
    parser.java.JavaParser$VariableModifierContext variableModifier(int) -> variableModifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$FormalParameterListContext -> parser.java.JavaParser$FormalParameterListContext:
    java.util.List formalParameter() -> formalParameter
    parser.java.JavaParser$FormalParameterContext formalParameter(int) -> formalParameter
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    parser.java.JavaParser$LastFormalParameterContext lastFormalParameter() -> lastFormalParameter
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$FormalParametersContext -> parser.java.JavaParser$FormalParametersContext:
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$FormalParameterListContext formalParameterList() -> formalParameterList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$GenericConstructorDeclarationContext -> parser.java.JavaParser$GenericConstructorDeclarationContext:
    parser.java.JavaParser$TypeParametersContext typeParameters() -> typeParameters
    parser.java.JavaParser$ConstructorDeclarationContext constructorDeclaration() -> constructorDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$GenericInterfaceMethodDeclarationContext -> parser.java.JavaParser$GenericInterfaceMethodDeclarationContext:
    parser.java.JavaParser$TypeParametersContext typeParameters() -> typeParameters
    parser.java.JavaParser$InterfaceMethodDeclarationContext interfaceMethodDeclaration() -> interfaceMethodDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$GenericMethodDeclarationContext -> parser.java.JavaParser$GenericMethodDeclarationContext:
    parser.java.JavaParser$TypeParametersContext typeParameters() -> typeParameters
    parser.java.JavaParser$MethodDeclarationContext methodDeclaration() -> methodDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ImportDeclarationContext -> parser.java.JavaParser$ImportDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode IMPORT() -> IMPORT
    parser.java.JavaParser$QualifiedNameContext qualifiedName() -> qualifiedName
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode STATIC() -> STATIC
    org.antlr.v4.runtime.tree.TerminalNode DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode MUL() -> MUL
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$InnerCreatorContext -> parser.java.JavaParser$InnerCreatorContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$ClassCreatorRestContext classCreatorRest() -> classCreatorRest
    parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() -> nonWildcardTypeArgumentsOrDiamond
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$IntegerLiteralContext -> parser.java.JavaParser$IntegerLiteralContext:
    org.antlr.v4.runtime.tree.TerminalNode DECIMAL_LITERAL() -> DECIMAL_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode HEX_LITERAL() -> HEX_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode OCT_LITERAL() -> OCT_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode BINARY_LITERAL() -> BINARY_LITERAL
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$InterfaceBodyContext -> parser.java.JavaParser$InterfaceBodyContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List interfaceBodyDeclaration() -> interfaceBodyDeclaration
    parser.java.JavaParser$InterfaceBodyDeclarationContext interfaceBodyDeclaration(int) -> interfaceBodyDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$InterfaceBodyDeclarationContext -> parser.java.JavaParser$InterfaceBodyDeclarationContext:
    parser.java.JavaParser$InterfaceMemberDeclarationContext interfaceMemberDeclaration() -> interfaceMemberDeclaration
    java.util.List modifier() -> modifier
    parser.java.JavaParser$ModifierContext modifier(int) -> modifier
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$InterfaceDeclarationContext -> parser.java.JavaParser$InterfaceDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode INTERFACE() -> INTERFACE
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$InterfaceBodyContext interfaceBody() -> interfaceBody
    parser.java.JavaParser$TypeParametersContext typeParameters() -> typeParameters
    org.antlr.v4.runtime.tree.TerminalNode EXTENDS() -> EXTENDS
    parser.java.JavaParser$TypeListContext typeList() -> typeList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$InterfaceMemberDeclarationContext -> parser.java.JavaParser$InterfaceMemberDeclarationContext:
    parser.java.JavaParser$ConstDeclarationContext constDeclaration() -> constDeclaration
    parser.java.JavaParser$InterfaceMethodDeclarationContext interfaceMethodDeclaration() -> interfaceMethodDeclaration
    parser.java.JavaParser$GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() -> genericInterfaceMethodDeclaration
    parser.java.JavaParser$InterfaceDeclarationContext interfaceDeclaration() -> interfaceDeclaration
    parser.java.JavaParser$AnnotationTypeDeclarationContext annotationTypeDeclaration() -> annotationTypeDeclaration
    parser.java.JavaParser$ClassDeclarationContext classDeclaration() -> classDeclaration
    parser.java.JavaParser$EnumDeclarationContext enumDeclaration() -> enumDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$InterfaceMethodDeclarationContext -> parser.java.JavaParser$InterfaceMethodDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$FormalParametersContext formalParameters() -> formalParameters
    parser.java.JavaParser$MethodBodyContext methodBody() -> methodBody
    parser.java.JavaParser$TypeTypeOrVoidContext typeTypeOrVoid() -> typeTypeOrVoid
    parser.java.JavaParser$TypeParametersContext typeParameters() -> typeParameters
    java.util.List interfaceMethodModifier() -> interfaceMethodModifier
    parser.java.JavaParser$InterfaceMethodModifierContext interfaceMethodModifier(int) -> interfaceMethodModifier
    java.util.List LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode LBRACK(int) -> LBRACK
    java.util.List RBRACK() -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK(int) -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode THROWS() -> THROWS
    parser.java.JavaParser$QualifiedNameListContext qualifiedNameList() -> qualifiedNameList
    java.util.List annotation() -> annotation
    parser.java.JavaParser$AnnotationContext annotation(int) -> annotation
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$InterfaceMethodModifierContext -> parser.java.JavaParser$InterfaceMethodModifierContext:
    parser.java.JavaParser$AnnotationContext annotation() -> annotation
    org.antlr.v4.runtime.tree.TerminalNode PUBLIC() -> PUBLIC
    org.antlr.v4.runtime.tree.TerminalNode ABSTRACT() -> ABSTRACT
    org.antlr.v4.runtime.tree.TerminalNode DEFAULT() -> DEFAULT
    org.antlr.v4.runtime.tree.TerminalNode STATIC() -> STATIC
    org.antlr.v4.runtime.tree.TerminalNode STRICTFP() -> STRICTFP
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$LambdaBodyContext -> parser.java.JavaParser$LambdaBodyContext:
    parser.java.JavaParser$ExpressionContext expression() -> expression
    parser.java.JavaParser$BlockContext block() -> block
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$LambdaExpressionContext -> parser.java.JavaParser$LambdaExpressionContext:
    parser.java.JavaParser$LambdaParametersContext lambdaParameters() -> lambdaParameters
    org.antlr.v4.runtime.tree.TerminalNode ARROW() -> ARROW
    parser.java.JavaParser$LambdaBodyContext lambdaBody() -> lambdaBody
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$LambdaParametersContext -> parser.java.JavaParser$LambdaParametersContext:
    java.util.List IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER(int) -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$FormalParameterListContext formalParameterList() -> formalParameterList
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$LastFormalParameterContext -> parser.java.JavaParser$LastFormalParameterContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    org.antlr.v4.runtime.tree.TerminalNode ELLIPSIS() -> ELLIPSIS
    parser.java.JavaParser$VariableDeclaratorIdContext variableDeclaratorId() -> variableDeclaratorId
    java.util.List variableModifier() -> variableModifier
    parser.java.JavaParser$VariableModifierContext variableModifier(int) -> variableModifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$LiteralContext -> parser.java.JavaParser$LiteralContext:
    parser.java.JavaParser$IntegerLiteralContext integerLiteral() -> integerLiteral
    parser.java.JavaParser$FloatLiteralContext floatLiteral() -> floatLiteral
    org.antlr.v4.runtime.tree.TerminalNode CHAR_LITERAL() -> CHAR_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode STRING_LITERAL() -> STRING_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode BOOL_LITERAL() -> BOOL_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode NULL_LITERAL() -> NULL_LITERAL
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$LocalTypeDeclarationContext -> parser.java.JavaParser$LocalTypeDeclarationContext:
    parser.java.JavaParser$ClassDeclarationContext classDeclaration() -> classDeclaration
    parser.java.JavaParser$InterfaceDeclarationContext interfaceDeclaration() -> interfaceDeclaration
    java.util.List classOrInterfaceModifier() -> classOrInterfaceModifier
    parser.java.JavaParser$ClassOrInterfaceModifierContext classOrInterfaceModifier(int) -> classOrInterfaceModifier
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$LocalVariableDeclarationContext -> parser.java.JavaParser$LocalVariableDeclarationContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    parser.java.JavaParser$VariableDeclaratorsContext variableDeclarators() -> variableDeclarators
    java.util.List variableModifier() -> variableModifier
    parser.java.JavaParser$VariableModifierContext variableModifier(int) -> variableModifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$MemberDeclarationContext -> parser.java.JavaParser$MemberDeclarationContext:
    parser.java.JavaParser$MethodDeclarationContext methodDeclaration() -> methodDeclaration
    parser.java.JavaParser$GenericMethodDeclarationContext genericMethodDeclaration() -> genericMethodDeclaration
    parser.java.JavaParser$FieldDeclarationContext fieldDeclaration() -> fieldDeclaration
    parser.java.JavaParser$ConstructorDeclarationContext constructorDeclaration() -> constructorDeclaration
    parser.java.JavaParser$GenericConstructorDeclarationContext genericConstructorDeclaration() -> genericConstructorDeclaration
    parser.java.JavaParser$InterfaceDeclarationContext interfaceDeclaration() -> interfaceDeclaration
    parser.java.JavaParser$AnnotationTypeDeclarationContext annotationTypeDeclaration() -> annotationTypeDeclaration
    parser.java.JavaParser$ClassDeclarationContext classDeclaration() -> classDeclaration
    parser.java.JavaParser$EnumDeclarationContext enumDeclaration() -> enumDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$MethodBodyContext -> parser.java.JavaParser$MethodBodyContext:
    parser.java.JavaParser$BlockContext block() -> block
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$MethodCallContext -> parser.java.JavaParser$MethodCallContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$ExpressionListContext expressionList() -> expressionList
    org.antlr.v4.runtime.tree.TerminalNode THIS() -> THIS
    org.antlr.v4.runtime.tree.TerminalNode SUPER() -> SUPER
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$MethodDeclarationContext -> parser.java.JavaParser$MethodDeclarationContext:
    parser.java.JavaParser$TypeTypeOrVoidContext typeTypeOrVoid() -> typeTypeOrVoid
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$FormalParametersContext formalParameters() -> formalParameters
    parser.java.JavaParser$MethodBodyContext methodBody() -> methodBody
    java.util.List LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode LBRACK(int) -> LBRACK
    java.util.List RBRACK() -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK(int) -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode THROWS() -> THROWS
    parser.java.JavaParser$QualifiedNameListContext qualifiedNameList() -> qualifiedNameList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ModifierContext -> parser.java.JavaParser$ModifierContext:
    parser.java.JavaParser$ClassOrInterfaceModifierContext classOrInterfaceModifier() -> classOrInterfaceModifier
    org.antlr.v4.runtime.tree.TerminalNode NATIVE() -> NATIVE
    org.antlr.v4.runtime.tree.TerminalNode SYNCHRONIZED() -> SYNCHRONIZED
    org.antlr.v4.runtime.tree.TerminalNode TRANSIENT() -> TRANSIENT
    org.antlr.v4.runtime.tree.TerminalNode VOLATILE() -> VOLATILE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$NonWildcardTypeArgumentsContext -> parser.java.JavaParser$NonWildcardTypeArgumentsContext:
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    parser.java.JavaParser$TypeListContext typeList() -> typeList
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext -> parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext:
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    parser.java.JavaParser$NonWildcardTypeArgumentsContext nonWildcardTypeArguments() -> nonWildcardTypeArguments
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$PackageDeclarationContext -> parser.java.JavaParser$PackageDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode PACKAGE() -> PACKAGE
    parser.java.JavaParser$QualifiedNameContext qualifiedName() -> qualifiedName
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    java.util.List annotation() -> annotation
    parser.java.JavaParser$AnnotationContext annotation(int) -> annotation
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ParExpressionContext -> parser.java.JavaParser$ParExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$PrimaryContext -> parser.java.JavaParser$PrimaryContext:
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    org.antlr.v4.runtime.tree.TerminalNode THIS() -> THIS
    org.antlr.v4.runtime.tree.TerminalNode SUPER() -> SUPER
    parser.java.JavaParser$LiteralContext literal() -> literal
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    parser.java.JavaParser$TypeTypeOrVoidContext typeTypeOrVoid() -> typeTypeOrVoid
    org.antlr.v4.runtime.tree.TerminalNode DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode CLASS() -> CLASS
    parser.java.JavaParser$NonWildcardTypeArgumentsContext nonWildcardTypeArguments() -> nonWildcardTypeArguments
    parser.java.JavaParser$ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() -> explicitGenericInvocationSuffix
    parser.java.JavaParser$ArgumentsContext arguments() -> arguments
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$PrimitiveTypeContext -> parser.java.JavaParser$PrimitiveTypeContext:
    org.antlr.v4.runtime.tree.TerminalNode BOOLEAN() -> BOOLEAN
    org.antlr.v4.runtime.tree.TerminalNode CHAR() -> CHAR
    org.antlr.v4.runtime.tree.TerminalNode BYTE() -> BYTE
    org.antlr.v4.runtime.tree.TerminalNode SHORT() -> SHORT
    org.antlr.v4.runtime.tree.TerminalNode INT() -> INT
    org.antlr.v4.runtime.tree.TerminalNode LONG() -> LONG
    org.antlr.v4.runtime.tree.TerminalNode FLOAT() -> FLOAT
    org.antlr.v4.runtime.tree.TerminalNode DOUBLE() -> DOUBLE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$QualifiedNameContext -> parser.java.JavaParser$QualifiedNameContext:
    java.util.List IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER(int) -> IDENTIFIER
    java.util.List DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode DOT(int) -> DOT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$QualifiedNameListContext -> parser.java.JavaParser$QualifiedNameListContext:
    java.util.List qualifiedName() -> qualifiedName
    parser.java.JavaParser$QualifiedNameContext qualifiedName(int) -> qualifiedName
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ResourceContext -> parser.java.JavaParser$ResourceContext:
    parser.java.JavaParser$ClassOrInterfaceTypeContext classOrInterfaceType() -> classOrInterfaceType
    parser.java.JavaParser$VariableDeclaratorIdContext variableDeclaratorId() -> variableDeclaratorId
    org.antlr.v4.runtime.tree.TerminalNode ASSIGN() -> ASSIGN
    parser.java.JavaParser$ExpressionContext expression() -> expression
    java.util.List variableModifier() -> variableModifier
    parser.java.JavaParser$VariableModifierContext variableModifier(int) -> variableModifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ResourceSpecificationContext -> parser.java.JavaParser$ResourceSpecificationContext:
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    parser.java.JavaParser$ResourcesContext resources() -> resources
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$ResourcesContext -> parser.java.JavaParser$ResourcesContext:
    java.util.List resource() -> resource
    parser.java.JavaParser$ResourceContext resource(int) -> resource
    java.util.List SEMI() -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode SEMI(int) -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StatementContext -> parser.java.JavaParser$StatementContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void <init>() -> <init>
    void copyFrom(parser.java.JavaParser$StatementContext) -> copyFrom
parser.java.JavaParser$StmtCase0Context -> parser.java.JavaParser$StmtCase0Context:
    parser.java.JavaParser$BlockContext blockLabel -> blockLabel
    parser.java.JavaParser$BlockContext block() -> block
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase10Context -> parser.java.JavaParser$StmtCase10Context:
    org.antlr.v4.runtime.tree.TerminalNode RETURN() -> RETURN
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.java.JavaParser$ExpressionContext expression() -> expression
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase11Context -> parser.java.JavaParser$StmtCase11Context:
    org.antlr.v4.runtime.tree.TerminalNode THROW() -> THROW
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase12Context -> parser.java.JavaParser$StmtCase12Context:
    org.antlr.v4.runtime.tree.TerminalNode BREAK() -> BREAK
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase13Context -> parser.java.JavaParser$StmtCase13Context:
    org.antlr.v4.runtime.tree.TerminalNode CONTINUE() -> CONTINUE
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase14Context -> parser.java.JavaParser$StmtCase14Context:
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase15Context -> parser.java.JavaParser$StmtCase15Context:
    parser.java.JavaParser$ExpressionContext statementExpression -> statementExpression
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.java.JavaParser$ExpressionContext expression() -> expression
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase16Context -> parser.java.JavaParser$StmtCase16Context:
    org.antlr.v4.runtime.Token identifierLabel -> identifierLabel
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.java.JavaParser$StatementContext statement() -> statement
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase1Context -> parser.java.JavaParser$StmtCase1Context:
    org.antlr.v4.runtime.tree.TerminalNode ASSERT() -> ASSERT
    java.util.List expression() -> expression
    parser.java.JavaParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase2Context -> parser.java.JavaParser$StmtCase2Context:
    org.antlr.v4.runtime.tree.TerminalNode IF() -> IF
    parser.java.JavaParser$ParExpressionContext parExpression() -> parExpression
    java.util.List statement() -> statement
    parser.java.JavaParser$StatementContext statement(int) -> statement
    org.antlr.v4.runtime.tree.TerminalNode ELSE() -> ELSE
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase3Context -> parser.java.JavaParser$StmtCase3Context:
    org.antlr.v4.runtime.tree.TerminalNode FOR() -> FOR
    org.antlr.v4.runtime.tree.TerminalNode LPAREN() -> LPAREN
    parser.java.JavaParser$ForControlContext forControl() -> forControl
    org.antlr.v4.runtime.tree.TerminalNode RPAREN() -> RPAREN
    parser.java.JavaParser$StatementContext statement() -> statement
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase4Context -> parser.java.JavaParser$StmtCase4Context:
    org.antlr.v4.runtime.tree.TerminalNode WHILE() -> WHILE
    parser.java.JavaParser$ParExpressionContext parExpression() -> parExpression
    parser.java.JavaParser$StatementContext statement() -> statement
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase5Context -> parser.java.JavaParser$StmtCase5Context:
    org.antlr.v4.runtime.tree.TerminalNode DO() -> DO
    parser.java.JavaParser$StatementContext statement() -> statement
    org.antlr.v4.runtime.tree.TerminalNode WHILE() -> WHILE
    parser.java.JavaParser$ParExpressionContext parExpression() -> parExpression
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase6Context -> parser.java.JavaParser$StmtCase6Context:
    org.antlr.v4.runtime.tree.TerminalNode TRY() -> TRY
    parser.java.JavaParser$BlockContext block() -> block
    parser.java.JavaParser$FinallyBlockContext finallyBlock() -> finallyBlock
    java.util.List catchClause() -> catchClause
    parser.java.JavaParser$CatchClauseContext catchClause(int) -> catchClause
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase7Context -> parser.java.JavaParser$StmtCase7Context:
    org.antlr.v4.runtime.tree.TerminalNode TRY() -> TRY
    parser.java.JavaParser$ResourceSpecificationContext resourceSpecification() -> resourceSpecification
    parser.java.JavaParser$BlockContext block() -> block
    java.util.List catchClause() -> catchClause
    parser.java.JavaParser$CatchClauseContext catchClause(int) -> catchClause
    parser.java.JavaParser$FinallyBlockContext finallyBlock() -> finallyBlock
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase8Context -> parser.java.JavaParser$StmtCase8Context:
    org.antlr.v4.runtime.tree.TerminalNode SWITCH() -> SWITCH
    parser.java.JavaParser$ParExpressionContext parExpression() -> parExpression
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List switchBlockStatementGroup() -> switchBlockStatementGroup
    parser.java.JavaParser$SwitchBlockStatementGroupContext switchBlockStatementGroup(int) -> switchBlockStatementGroup
    java.util.List switchLabel() -> switchLabel
    parser.java.JavaParser$SwitchLabelContext switchLabel(int) -> switchLabel
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$StmtCase9Context -> parser.java.JavaParser$StmtCase9Context:
    org.antlr.v4.runtime.tree.TerminalNode SYNCHRONIZED() -> SYNCHRONIZED
    parser.java.JavaParser$ParExpressionContext parExpression() -> parExpression
    parser.java.JavaParser$BlockContext block() -> block
    void <init>(parser.java.JavaParser$StatementContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$SuperSuffixContext -> parser.java.JavaParser$SuperSuffixContext:
    parser.java.JavaParser$ArgumentsContext arguments() -> arguments
    org.antlr.v4.runtime.tree.TerminalNode DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$SwitchBlockStatementGroupContext -> parser.java.JavaParser$SwitchBlockStatementGroupContext:
    java.util.List switchLabel() -> switchLabel
    parser.java.JavaParser$SwitchLabelContext switchLabel(int) -> switchLabel
    java.util.List blockStatement() -> blockStatement
    parser.java.JavaParser$BlockStatementContext blockStatement(int) -> blockStatement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$SwitchLabelContext -> parser.java.JavaParser$SwitchLabelContext:
    parser.java.JavaParser$ExpressionContext constantExpression -> constantExpression
    org.antlr.v4.runtime.Token enumConstantName -> enumConstantName
    org.antlr.v4.runtime.tree.TerminalNode CASE() -> CASE
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.java.JavaParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode DEFAULT() -> DEFAULT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeArgumentContext -> parser.java.JavaParser$TypeArgumentContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    org.antlr.v4.runtime.tree.TerminalNode QUESTION() -> QUESTION
    org.antlr.v4.runtime.tree.TerminalNode EXTENDS() -> EXTENDS
    org.antlr.v4.runtime.tree.TerminalNode SUPER() -> SUPER
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeArgumentsContext -> parser.java.JavaParser$TypeArgumentsContext:
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    java.util.List typeArgument() -> typeArgument
    parser.java.JavaParser$TypeArgumentContext typeArgument(int) -> typeArgument
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeArgumentsOrDiamondContext -> parser.java.JavaParser$TypeArgumentsOrDiamondContext:
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    parser.java.JavaParser$TypeArgumentsContext typeArguments() -> typeArguments
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeBoundContext -> parser.java.JavaParser$TypeBoundContext:
    java.util.List typeType() -> typeType
    parser.java.JavaParser$TypeTypeContext typeType(int) -> typeType
    java.util.List BITAND() -> BITAND
    org.antlr.v4.runtime.tree.TerminalNode BITAND(int) -> BITAND
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeDeclarationContext -> parser.java.JavaParser$TypeDeclarationContext:
    parser.java.JavaParser$ClassDeclarationContext classDeclaration() -> classDeclaration
    parser.java.JavaParser$EnumDeclarationContext enumDeclaration() -> enumDeclaration
    parser.java.JavaParser$InterfaceDeclarationContext interfaceDeclaration() -> interfaceDeclaration
    parser.java.JavaParser$AnnotationTypeDeclarationContext annotationTypeDeclaration() -> annotationTypeDeclaration
    java.util.List classOrInterfaceModifier() -> classOrInterfaceModifier
    parser.java.JavaParser$ClassOrInterfaceModifierContext classOrInterfaceModifier(int) -> classOrInterfaceModifier
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeListContext -> parser.java.JavaParser$TypeListContext:
    java.util.List typeType() -> typeType
    parser.java.JavaParser$TypeTypeContext typeType(int) -> typeType
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeParameterContext -> parser.java.JavaParser$TypeParameterContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    java.util.List annotation() -> annotation
    parser.java.JavaParser$AnnotationContext annotation(int) -> annotation
    org.antlr.v4.runtime.tree.TerminalNode EXTENDS() -> EXTENDS
    parser.java.JavaParser$TypeBoundContext typeBound() -> typeBound
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeParametersContext -> parser.java.JavaParser$TypeParametersContext:
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    java.util.List typeParameter() -> typeParameter
    parser.java.JavaParser$TypeParameterContext typeParameter(int) -> typeParameter
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeTypeContext -> parser.java.JavaParser$TypeTypeContext:
    parser.java.JavaParser$ClassOrInterfaceTypeContext classOrInterfaceType() -> classOrInterfaceType
    parser.java.JavaParser$PrimitiveTypeContext primitiveType() -> primitiveType
    parser.java.JavaParser$AnnotationContext annotation() -> annotation
    java.util.List LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode LBRACK(int) -> LBRACK
    java.util.List RBRACK() -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK(int) -> RBRACK
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$TypeTypeOrVoidContext -> parser.java.JavaParser$TypeTypeOrVoidContext:
    parser.java.JavaParser$TypeTypeContext typeType() -> typeType
    org.antlr.v4.runtime.tree.TerminalNode VOID() -> VOID
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$VariableDeclaratorContext -> parser.java.JavaParser$VariableDeclaratorContext:
    parser.java.JavaParser$VariableDeclaratorIdContext variableDeclaratorId() -> variableDeclaratorId
    org.antlr.v4.runtime.tree.TerminalNode ASSIGN() -> ASSIGN
    parser.java.JavaParser$VariableInitializerContext variableInitializer() -> variableInitializer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$VariableDeclaratorIdContext -> parser.java.JavaParser$VariableDeclaratorIdContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    java.util.List LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode LBRACK(int) -> LBRACK
    java.util.List RBRACK() -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK(int) -> RBRACK
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$VariableDeclaratorsContext -> parser.java.JavaParser$VariableDeclaratorsContext:
    java.util.List variableDeclarator() -> variableDeclarator
    parser.java.JavaParser$VariableDeclaratorContext variableDeclarator(int) -> variableDeclarator
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$VariableInitializerContext -> parser.java.JavaParser$VariableInitializerContext:
    parser.java.JavaParser$ArrayInitializerContext arrayInitializer() -> arrayInitializer
    parser.java.JavaParser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParser$VariableModifierContext -> parser.java.JavaParser$VariableModifierContext:
    org.antlr.v4.runtime.tree.TerminalNode FINAL() -> FINAL
    parser.java.JavaParser$AnnotationContext annotation() -> annotation
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
    java.lang.Object accept(org.antlr.v4.runtime.tree.ParseTreeVisitor) -> accept
parser.java.JavaParserBaseListener -> parser.java.JavaParserBaseListener:
    void <init>() -> <init>
    void enterCompilationUnit(parser.java.JavaParser$CompilationUnitContext) -> enterCompilationUnit
    void exitCompilationUnit(parser.java.JavaParser$CompilationUnitContext) -> exitCompilationUnit
    void enterPackageDeclaration(parser.java.JavaParser$PackageDeclarationContext) -> enterPackageDeclaration
    void exitPackageDeclaration(parser.java.JavaParser$PackageDeclarationContext) -> exitPackageDeclaration
    void enterImportDeclaration(parser.java.JavaParser$ImportDeclarationContext) -> enterImportDeclaration
    void exitImportDeclaration(parser.java.JavaParser$ImportDeclarationContext) -> exitImportDeclaration
    void enterTypeDeclaration(parser.java.JavaParser$TypeDeclarationContext) -> enterTypeDeclaration
    void exitTypeDeclaration(parser.java.JavaParser$TypeDeclarationContext) -> exitTypeDeclaration
    void enterModifier(parser.java.JavaParser$ModifierContext) -> enterModifier
    void exitModifier(parser.java.JavaParser$ModifierContext) -> exitModifier
    void enterClassOrInterfaceModifier(parser.java.JavaParser$ClassOrInterfaceModifierContext) -> enterClassOrInterfaceModifier
    void exitClassOrInterfaceModifier(parser.java.JavaParser$ClassOrInterfaceModifierContext) -> exitClassOrInterfaceModifier
    void enterVariableModifier(parser.java.JavaParser$VariableModifierContext) -> enterVariableModifier
    void exitVariableModifier(parser.java.JavaParser$VariableModifierContext) -> exitVariableModifier
    void enterClassDeclaration(parser.java.JavaParser$ClassDeclarationContext) -> enterClassDeclaration
    void exitClassDeclaration(parser.java.JavaParser$ClassDeclarationContext) -> exitClassDeclaration
    void enterTypeParameters(parser.java.JavaParser$TypeParametersContext) -> enterTypeParameters
    void exitTypeParameters(parser.java.JavaParser$TypeParametersContext) -> exitTypeParameters
    void enterTypeParameter(parser.java.JavaParser$TypeParameterContext) -> enterTypeParameter
    void exitTypeParameter(parser.java.JavaParser$TypeParameterContext) -> exitTypeParameter
    void enterTypeBound(parser.java.JavaParser$TypeBoundContext) -> enterTypeBound
    void exitTypeBound(parser.java.JavaParser$TypeBoundContext) -> exitTypeBound
    void enterEnumDeclaration(parser.java.JavaParser$EnumDeclarationContext) -> enterEnumDeclaration
    void exitEnumDeclaration(parser.java.JavaParser$EnumDeclarationContext) -> exitEnumDeclaration
    void enterEnumConstants(parser.java.JavaParser$EnumConstantsContext) -> enterEnumConstants
    void exitEnumConstants(parser.java.JavaParser$EnumConstantsContext) -> exitEnumConstants
    void enterEnumConstant(parser.java.JavaParser$EnumConstantContext) -> enterEnumConstant
    void exitEnumConstant(parser.java.JavaParser$EnumConstantContext) -> exitEnumConstant
    void enterEnumBodyDeclarations(parser.java.JavaParser$EnumBodyDeclarationsContext) -> enterEnumBodyDeclarations
    void exitEnumBodyDeclarations(parser.java.JavaParser$EnumBodyDeclarationsContext) -> exitEnumBodyDeclarations
    void enterInterfaceDeclaration(parser.java.JavaParser$InterfaceDeclarationContext) -> enterInterfaceDeclaration
    void exitInterfaceDeclaration(parser.java.JavaParser$InterfaceDeclarationContext) -> exitInterfaceDeclaration
    void enterClassBody(parser.java.JavaParser$ClassBodyContext) -> enterClassBody
    void exitClassBody(parser.java.JavaParser$ClassBodyContext) -> exitClassBody
    void enterInterfaceBody(parser.java.JavaParser$InterfaceBodyContext) -> enterInterfaceBody
    void exitInterfaceBody(parser.java.JavaParser$InterfaceBodyContext) -> exitInterfaceBody
    void enterClassBodyDeclaration(parser.java.JavaParser$ClassBodyDeclarationContext) -> enterClassBodyDeclaration
    void exitClassBodyDeclaration(parser.java.JavaParser$ClassBodyDeclarationContext) -> exitClassBodyDeclaration
    void enterMemberDeclaration(parser.java.JavaParser$MemberDeclarationContext) -> enterMemberDeclaration
    void exitMemberDeclaration(parser.java.JavaParser$MemberDeclarationContext) -> exitMemberDeclaration
    void enterMethodDeclaration(parser.java.JavaParser$MethodDeclarationContext) -> enterMethodDeclaration
    void exitMethodDeclaration(parser.java.JavaParser$MethodDeclarationContext) -> exitMethodDeclaration
    void enterMethodBody(parser.java.JavaParser$MethodBodyContext) -> enterMethodBody
    void exitMethodBody(parser.java.JavaParser$MethodBodyContext) -> exitMethodBody
    void enterTypeTypeOrVoid(parser.java.JavaParser$TypeTypeOrVoidContext) -> enterTypeTypeOrVoid
    void exitTypeTypeOrVoid(parser.java.JavaParser$TypeTypeOrVoidContext) -> exitTypeTypeOrVoid
    void enterGenericMethodDeclaration(parser.java.JavaParser$GenericMethodDeclarationContext) -> enterGenericMethodDeclaration
    void exitGenericMethodDeclaration(parser.java.JavaParser$GenericMethodDeclarationContext) -> exitGenericMethodDeclaration
    void enterGenericConstructorDeclaration(parser.java.JavaParser$GenericConstructorDeclarationContext) -> enterGenericConstructorDeclaration
    void exitGenericConstructorDeclaration(parser.java.JavaParser$GenericConstructorDeclarationContext) -> exitGenericConstructorDeclaration
    void enterConstructorDeclaration(parser.java.JavaParser$ConstructorDeclarationContext) -> enterConstructorDeclaration
    void exitConstructorDeclaration(parser.java.JavaParser$ConstructorDeclarationContext) -> exitConstructorDeclaration
    void enterFieldDeclaration(parser.java.JavaParser$FieldDeclarationContext) -> enterFieldDeclaration
    void exitFieldDeclaration(parser.java.JavaParser$FieldDeclarationContext) -> exitFieldDeclaration
    void enterInterfaceBodyDeclaration(parser.java.JavaParser$InterfaceBodyDeclarationContext) -> enterInterfaceBodyDeclaration
    void exitInterfaceBodyDeclaration(parser.java.JavaParser$InterfaceBodyDeclarationContext) -> exitInterfaceBodyDeclaration
    void enterInterfaceMemberDeclaration(parser.java.JavaParser$InterfaceMemberDeclarationContext) -> enterInterfaceMemberDeclaration
    void exitInterfaceMemberDeclaration(parser.java.JavaParser$InterfaceMemberDeclarationContext) -> exitInterfaceMemberDeclaration
    void enterConstDeclaration(parser.java.JavaParser$ConstDeclarationContext) -> enterConstDeclaration
    void exitConstDeclaration(parser.java.JavaParser$ConstDeclarationContext) -> exitConstDeclaration
    void enterConstantDeclarator(parser.java.JavaParser$ConstantDeclaratorContext) -> enterConstantDeclarator
    void exitConstantDeclarator(parser.java.JavaParser$ConstantDeclaratorContext) -> exitConstantDeclarator
    void enterInterfaceMethodDeclaration(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> enterInterfaceMethodDeclaration
    void exitInterfaceMethodDeclaration(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> exitInterfaceMethodDeclaration
    void enterInterfaceMethodModifier(parser.java.JavaParser$InterfaceMethodModifierContext) -> enterInterfaceMethodModifier
    void exitInterfaceMethodModifier(parser.java.JavaParser$InterfaceMethodModifierContext) -> exitInterfaceMethodModifier
    void enterGenericInterfaceMethodDeclaration(parser.java.JavaParser$GenericInterfaceMethodDeclarationContext) -> enterGenericInterfaceMethodDeclaration
    void exitGenericInterfaceMethodDeclaration(parser.java.JavaParser$GenericInterfaceMethodDeclarationContext) -> exitGenericInterfaceMethodDeclaration
    void enterVariableDeclarators(parser.java.JavaParser$VariableDeclaratorsContext) -> enterVariableDeclarators
    void exitVariableDeclarators(parser.java.JavaParser$VariableDeclaratorsContext) -> exitVariableDeclarators
    void enterVariableDeclarator(parser.java.JavaParser$VariableDeclaratorContext) -> enterVariableDeclarator
    void exitVariableDeclarator(parser.java.JavaParser$VariableDeclaratorContext) -> exitVariableDeclarator
    void enterVariableDeclaratorId(parser.java.JavaParser$VariableDeclaratorIdContext) -> enterVariableDeclaratorId
    void exitVariableDeclaratorId(parser.java.JavaParser$VariableDeclaratorIdContext) -> exitVariableDeclaratorId
    void enterVariableInitializer(parser.java.JavaParser$VariableInitializerContext) -> enterVariableInitializer
    void exitVariableInitializer(parser.java.JavaParser$VariableInitializerContext) -> exitVariableInitializer
    void enterArrayInitializer(parser.java.JavaParser$ArrayInitializerContext) -> enterArrayInitializer
    void exitArrayInitializer(parser.java.JavaParser$ArrayInitializerContext) -> exitArrayInitializer
    void enterClassOrInterfaceType(parser.java.JavaParser$ClassOrInterfaceTypeContext) -> enterClassOrInterfaceType
    void exitClassOrInterfaceType(parser.java.JavaParser$ClassOrInterfaceTypeContext) -> exitClassOrInterfaceType
    void enterTypeArgument(parser.java.JavaParser$TypeArgumentContext) -> enterTypeArgument
    void exitTypeArgument(parser.java.JavaParser$TypeArgumentContext) -> exitTypeArgument
    void enterQualifiedNameList(parser.java.JavaParser$QualifiedNameListContext) -> enterQualifiedNameList
    void exitQualifiedNameList(parser.java.JavaParser$QualifiedNameListContext) -> exitQualifiedNameList
    void enterFormalParameters(parser.java.JavaParser$FormalParametersContext) -> enterFormalParameters
    void exitFormalParameters(parser.java.JavaParser$FormalParametersContext) -> exitFormalParameters
    void enterFormalParameterList(parser.java.JavaParser$FormalParameterListContext) -> enterFormalParameterList
    void exitFormalParameterList(parser.java.JavaParser$FormalParameterListContext) -> exitFormalParameterList
    void enterFormalParameter(parser.java.JavaParser$FormalParameterContext) -> enterFormalParameter
    void exitFormalParameter(parser.java.JavaParser$FormalParameterContext) -> exitFormalParameter
    void enterLastFormalParameter(parser.java.JavaParser$LastFormalParameterContext) -> enterLastFormalParameter
    void exitLastFormalParameter(parser.java.JavaParser$LastFormalParameterContext) -> exitLastFormalParameter
    void enterQualifiedName(parser.java.JavaParser$QualifiedNameContext) -> enterQualifiedName
    void exitQualifiedName(parser.java.JavaParser$QualifiedNameContext) -> exitQualifiedName
    void enterLiteral(parser.java.JavaParser$LiteralContext) -> enterLiteral
    void exitLiteral(parser.java.JavaParser$LiteralContext) -> exitLiteral
    void enterIntegerLiteral(parser.java.JavaParser$IntegerLiteralContext) -> enterIntegerLiteral
    void exitIntegerLiteral(parser.java.JavaParser$IntegerLiteralContext) -> exitIntegerLiteral
    void enterFloatLiteral(parser.java.JavaParser$FloatLiteralContext) -> enterFloatLiteral
    void exitFloatLiteral(parser.java.JavaParser$FloatLiteralContext) -> exitFloatLiteral
    void enterAnnotation(parser.java.JavaParser$AnnotationContext) -> enterAnnotation
    void exitAnnotation(parser.java.JavaParser$AnnotationContext) -> exitAnnotation
    void enterElementValuePairs(parser.java.JavaParser$ElementValuePairsContext) -> enterElementValuePairs
    void exitElementValuePairs(parser.java.JavaParser$ElementValuePairsContext) -> exitElementValuePairs
    void enterElementValuePair(parser.java.JavaParser$ElementValuePairContext) -> enterElementValuePair
    void exitElementValuePair(parser.java.JavaParser$ElementValuePairContext) -> exitElementValuePair
    void enterElementValue(parser.java.JavaParser$ElementValueContext) -> enterElementValue
    void exitElementValue(parser.java.JavaParser$ElementValueContext) -> exitElementValue
    void enterElementValueArrayInitializer(parser.java.JavaParser$ElementValueArrayInitializerContext) -> enterElementValueArrayInitializer
    void exitElementValueArrayInitializer(parser.java.JavaParser$ElementValueArrayInitializerContext) -> exitElementValueArrayInitializer
    void enterAnnotationTypeDeclaration(parser.java.JavaParser$AnnotationTypeDeclarationContext) -> enterAnnotationTypeDeclaration
    void exitAnnotationTypeDeclaration(parser.java.JavaParser$AnnotationTypeDeclarationContext) -> exitAnnotationTypeDeclaration
    void enterAnnotationTypeBody(parser.java.JavaParser$AnnotationTypeBodyContext) -> enterAnnotationTypeBody
    void exitAnnotationTypeBody(parser.java.JavaParser$AnnotationTypeBodyContext) -> exitAnnotationTypeBody
    void enterAnnotationTypeElementDeclaration(parser.java.JavaParser$AnnotationTypeElementDeclarationContext) -> enterAnnotationTypeElementDeclaration
    void exitAnnotationTypeElementDeclaration(parser.java.JavaParser$AnnotationTypeElementDeclarationContext) -> exitAnnotationTypeElementDeclaration
    void enterAnnotationTypeElementRest(parser.java.JavaParser$AnnotationTypeElementRestContext) -> enterAnnotationTypeElementRest
    void exitAnnotationTypeElementRest(parser.java.JavaParser$AnnotationTypeElementRestContext) -> exitAnnotationTypeElementRest
    void enterAnnotationMethodOrConstantRest(parser.java.JavaParser$AnnotationMethodOrConstantRestContext) -> enterAnnotationMethodOrConstantRest
    void exitAnnotationMethodOrConstantRest(parser.java.JavaParser$AnnotationMethodOrConstantRestContext) -> exitAnnotationMethodOrConstantRest
    void enterAnnotationMethodRest(parser.java.JavaParser$AnnotationMethodRestContext) -> enterAnnotationMethodRest
    void exitAnnotationMethodRest(parser.java.JavaParser$AnnotationMethodRestContext) -> exitAnnotationMethodRest
    void enterAnnotationConstantRest(parser.java.JavaParser$AnnotationConstantRestContext) -> enterAnnotationConstantRest
    void exitAnnotationConstantRest(parser.java.JavaParser$AnnotationConstantRestContext) -> exitAnnotationConstantRest
    void enterDefaultValue(parser.java.JavaParser$DefaultValueContext) -> enterDefaultValue
    void exitDefaultValue(parser.java.JavaParser$DefaultValueContext) -> exitDefaultValue
    void enterBlock(parser.java.JavaParser$BlockContext) -> enterBlock
    void exitBlock(parser.java.JavaParser$BlockContext) -> exitBlock
    void enterBlockStatement(parser.java.JavaParser$BlockStatementContext) -> enterBlockStatement
    void exitBlockStatement(parser.java.JavaParser$BlockStatementContext) -> exitBlockStatement
    void enterLocalVariableDeclaration(parser.java.JavaParser$LocalVariableDeclarationContext) -> enterLocalVariableDeclaration
    void exitLocalVariableDeclaration(parser.java.JavaParser$LocalVariableDeclarationContext) -> exitLocalVariableDeclaration
    void enterLocalTypeDeclaration(parser.java.JavaParser$LocalTypeDeclarationContext) -> enterLocalTypeDeclaration
    void exitLocalTypeDeclaration(parser.java.JavaParser$LocalTypeDeclarationContext) -> exitLocalTypeDeclaration
    void enterStmtCase0(parser.java.JavaParser$StmtCase0Context) -> enterStmtCase0
    void exitStmtCase0(parser.java.JavaParser$StmtCase0Context) -> exitStmtCase0
    void enterStmtCase1(parser.java.JavaParser$StmtCase1Context) -> enterStmtCase1
    void exitStmtCase1(parser.java.JavaParser$StmtCase1Context) -> exitStmtCase1
    void enterStmtCase2(parser.java.JavaParser$StmtCase2Context) -> enterStmtCase2
    void exitStmtCase2(parser.java.JavaParser$StmtCase2Context) -> exitStmtCase2
    void enterStmtCase3(parser.java.JavaParser$StmtCase3Context) -> enterStmtCase3
    void exitStmtCase3(parser.java.JavaParser$StmtCase3Context) -> exitStmtCase3
    void enterStmtCase4(parser.java.JavaParser$StmtCase4Context) -> enterStmtCase4
    void exitStmtCase4(parser.java.JavaParser$StmtCase4Context) -> exitStmtCase4
    void enterStmtCase5(parser.java.JavaParser$StmtCase5Context) -> enterStmtCase5
    void exitStmtCase5(parser.java.JavaParser$StmtCase5Context) -> exitStmtCase5
    void enterStmtCase6(parser.java.JavaParser$StmtCase6Context) -> enterStmtCase6
    void exitStmtCase6(parser.java.JavaParser$StmtCase6Context) -> exitStmtCase6
    void enterStmtCase7(parser.java.JavaParser$StmtCase7Context) -> enterStmtCase7
    void exitStmtCase7(parser.java.JavaParser$StmtCase7Context) -> exitStmtCase7
    void enterStmtCase8(parser.java.JavaParser$StmtCase8Context) -> enterStmtCase8
    void exitStmtCase8(parser.java.JavaParser$StmtCase8Context) -> exitStmtCase8
    void enterStmtCase9(parser.java.JavaParser$StmtCase9Context) -> enterStmtCase9
    void exitStmtCase9(parser.java.JavaParser$StmtCase9Context) -> exitStmtCase9
    void enterStmtCase10(parser.java.JavaParser$StmtCase10Context) -> enterStmtCase10
    void exitStmtCase10(parser.java.JavaParser$StmtCase10Context) -> exitStmtCase10
    void enterStmtCase11(parser.java.JavaParser$StmtCase11Context) -> enterStmtCase11
    void exitStmtCase11(parser.java.JavaParser$StmtCase11Context) -> exitStmtCase11
    void enterStmtCase12(parser.java.JavaParser$StmtCase12Context) -> enterStmtCase12
    void exitStmtCase12(parser.java.JavaParser$StmtCase12Context) -> exitStmtCase12
    void enterStmtCase13(parser.java.JavaParser$StmtCase13Context) -> enterStmtCase13
    void exitStmtCase13(parser.java.JavaParser$StmtCase13Context) -> exitStmtCase13
    void enterStmtCase14(parser.java.JavaParser$StmtCase14Context) -> enterStmtCase14
    void exitStmtCase14(parser.java.JavaParser$StmtCase14Context) -> exitStmtCase14
    void enterStmtCase15(parser.java.JavaParser$StmtCase15Context) -> enterStmtCase15
    void exitStmtCase15(parser.java.JavaParser$StmtCase15Context) -> exitStmtCase15
    void enterStmtCase16(parser.java.JavaParser$StmtCase16Context) -> enterStmtCase16
    void exitStmtCase16(parser.java.JavaParser$StmtCase16Context) -> exitStmtCase16
    void enterCatchClause(parser.java.JavaParser$CatchClauseContext) -> enterCatchClause
    void exitCatchClause(parser.java.JavaParser$CatchClauseContext) -> exitCatchClause
    void enterCatchType(parser.java.JavaParser$CatchTypeContext) -> enterCatchType
    void exitCatchType(parser.java.JavaParser$CatchTypeContext) -> exitCatchType
    void enterFinallyBlock(parser.java.JavaParser$FinallyBlockContext) -> enterFinallyBlock
    void exitFinallyBlock(parser.java.JavaParser$FinallyBlockContext) -> exitFinallyBlock
    void enterResourceSpecification(parser.java.JavaParser$ResourceSpecificationContext) -> enterResourceSpecification
    void exitResourceSpecification(parser.java.JavaParser$ResourceSpecificationContext) -> exitResourceSpecification
    void enterResources(parser.java.JavaParser$ResourcesContext) -> enterResources
    void exitResources(parser.java.JavaParser$ResourcesContext) -> exitResources
    void enterResource(parser.java.JavaParser$ResourceContext) -> enterResource
    void exitResource(parser.java.JavaParser$ResourceContext) -> exitResource
    void enterSwitchBlockStatementGroup(parser.java.JavaParser$SwitchBlockStatementGroupContext) -> enterSwitchBlockStatementGroup
    void exitSwitchBlockStatementGroup(parser.java.JavaParser$SwitchBlockStatementGroupContext) -> exitSwitchBlockStatementGroup
    void enterSwitchLabel(parser.java.JavaParser$SwitchLabelContext) -> enterSwitchLabel
    void exitSwitchLabel(parser.java.JavaParser$SwitchLabelContext) -> exitSwitchLabel
    void enterForControl(parser.java.JavaParser$ForControlContext) -> enterForControl
    void exitForControl(parser.java.JavaParser$ForControlContext) -> exitForControl
    void enterForInit(parser.java.JavaParser$ForInitContext) -> enterForInit
    void exitForInit(parser.java.JavaParser$ForInitContext) -> exitForInit
    void enterEnhancedForControl(parser.java.JavaParser$EnhancedForControlContext) -> enterEnhancedForControl
    void exitEnhancedForControl(parser.java.JavaParser$EnhancedForControlContext) -> exitEnhancedForControl
    void enterParExpression(parser.java.JavaParser$ParExpressionContext) -> enterParExpression
    void exitParExpression(parser.java.JavaParser$ParExpressionContext) -> exitParExpression
    void enterExpressionList(parser.java.JavaParser$ExpressionListContext) -> enterExpressionList
    void exitExpressionList(parser.java.JavaParser$ExpressionListContext) -> exitExpressionList
    void enterMethodCall(parser.java.JavaParser$MethodCallContext) -> enterMethodCall
    void exitMethodCall(parser.java.JavaParser$MethodCallContext) -> exitMethodCall
    void enterExprCase15(parser.java.JavaParser$ExprCase15Context) -> enterExprCase15
    void exitExprCase15(parser.java.JavaParser$ExprCase15Context) -> exitExprCase15
    void enterExprCase14(parser.java.JavaParser$ExprCase14Context) -> enterExprCase14
    void exitExprCase14(parser.java.JavaParser$ExprCase14Context) -> exitExprCase14
    void enterExprCase17(parser.java.JavaParser$ExprCase17Context) -> enterExprCase17
    void exitExprCase17(parser.java.JavaParser$ExprCase17Context) -> exitExprCase17
    void enterExprCase16(parser.java.JavaParser$ExprCase16Context) -> enterExprCase16
    void exitExprCase16(parser.java.JavaParser$ExprCase16Context) -> exitExprCase16
    void enterExprCase19(parser.java.JavaParser$ExprCase19Context) -> enterExprCase19
    void exitExprCase19(parser.java.JavaParser$ExprCase19Context) -> exitExprCase19
    void enterExprCase18(parser.java.JavaParser$ExprCase18Context) -> enterExprCase18
    void exitExprCase18(parser.java.JavaParser$ExprCase18Context) -> exitExprCase18
    void enterExprCase11(parser.java.JavaParser$ExprCase11Context) -> enterExprCase11
    void exitExprCase11(parser.java.JavaParser$ExprCase11Context) -> exitExprCase11
    void enterExprCase10(parser.java.JavaParser$ExprCase10Context) -> enterExprCase10
    void exitExprCase10(parser.java.JavaParser$ExprCase10Context) -> exitExprCase10
    void enterExprCase13(parser.java.JavaParser$ExprCase13Context) -> enterExprCase13
    void exitExprCase13(parser.java.JavaParser$ExprCase13Context) -> exitExprCase13
    void enterExprCase12(parser.java.JavaParser$ExprCase12Context) -> enterExprCase12
    void exitExprCase12(parser.java.JavaParser$ExprCase12Context) -> exitExprCase12
    void enterExprCase2(parser.java.JavaParser$ExprCase2Context) -> enterExprCase2
    void exitExprCase2(parser.java.JavaParser$ExprCase2Context) -> exitExprCase2
    void enterExprCase1(parser.java.JavaParser$ExprCase1Context) -> enterExprCase1
    void exitExprCase1(parser.java.JavaParser$ExprCase1Context) -> exitExprCase1
    void enterExprCase4(parser.java.JavaParser$ExprCase4Context) -> enterExprCase4
    void exitExprCase4(parser.java.JavaParser$ExprCase4Context) -> exitExprCase4
    void enterExprCase3(parser.java.JavaParser$ExprCase3Context) -> enterExprCase3
    void exitExprCase3(parser.java.JavaParser$ExprCase3Context) -> exitExprCase3
    void enterExprCase0(parser.java.JavaParser$ExprCase0Context) -> enterExprCase0
    void exitExprCase0(parser.java.JavaParser$ExprCase0Context) -> exitExprCase0
    void enterExprCase25(parser.java.JavaParser$ExprCase25Context) -> enterExprCase25
    void exitExprCase25(parser.java.JavaParser$ExprCase25Context) -> exitExprCase25
    void enterExprCase9(parser.java.JavaParser$ExprCase9Context) -> enterExprCase9
    void exitExprCase9(parser.java.JavaParser$ExprCase9Context) -> exitExprCase9
    void enterExprCase20(parser.java.JavaParser$ExprCase20Context) -> enterExprCase20
    void exitExprCase20(parser.java.JavaParser$ExprCase20Context) -> exitExprCase20
    void enterExprCase22(parser.java.JavaParser$ExprCase22Context) -> enterExprCase22
    void exitExprCase22(parser.java.JavaParser$ExprCase22Context) -> exitExprCase22
    void enterExprCase6(parser.java.JavaParser$ExprCase6Context) -> enterExprCase6
    void exitExprCase6(parser.java.JavaParser$ExprCase6Context) -> exitExprCase6
    void enterExprCase5(parser.java.JavaParser$ExprCase5Context) -> enterExprCase5
    void exitExprCase5(parser.java.JavaParser$ExprCase5Context) -> exitExprCase5
    void enterExprCase21(parser.java.JavaParser$ExprCase21Context) -> enterExprCase21
    void exitExprCase21(parser.java.JavaParser$ExprCase21Context) -> exitExprCase21
    void enterExprCase8(parser.java.JavaParser$ExprCase8Context) -> enterExprCase8
    void exitExprCase8(parser.java.JavaParser$ExprCase8Context) -> exitExprCase8
    void enterExprCase24(parser.java.JavaParser$ExprCase24Context) -> enterExprCase24
    void exitExprCase24(parser.java.JavaParser$ExprCase24Context) -> exitExprCase24
    void enterExprCase7(parser.java.JavaParser$ExprCase7Context) -> enterExprCase7
    void exitExprCase7(parser.java.JavaParser$ExprCase7Context) -> exitExprCase7
    void enterExprCase23(parser.java.JavaParser$ExprCase23Context) -> enterExprCase23
    void exitExprCase23(parser.java.JavaParser$ExprCase23Context) -> exitExprCase23
    void enterLambdaExpression(parser.java.JavaParser$LambdaExpressionContext) -> enterLambdaExpression
    void exitLambdaExpression(parser.java.JavaParser$LambdaExpressionContext) -> exitLambdaExpression
    void enterLambdaParameters(parser.java.JavaParser$LambdaParametersContext) -> enterLambdaParameters
    void exitLambdaParameters(parser.java.JavaParser$LambdaParametersContext) -> exitLambdaParameters
    void enterLambdaBody(parser.java.JavaParser$LambdaBodyContext) -> enterLambdaBody
    void exitLambdaBody(parser.java.JavaParser$LambdaBodyContext) -> exitLambdaBody
    void enterPrimary(parser.java.JavaParser$PrimaryContext) -> enterPrimary
    void exitPrimary(parser.java.JavaParser$PrimaryContext) -> exitPrimary
    void enterClassType(parser.java.JavaParser$ClassTypeContext) -> enterClassType
    void exitClassType(parser.java.JavaParser$ClassTypeContext) -> exitClassType
    void enterCreator(parser.java.JavaParser$CreatorContext) -> enterCreator
    void exitCreator(parser.java.JavaParser$CreatorContext) -> exitCreator
    void enterCreatedName(parser.java.JavaParser$CreatedNameContext) -> enterCreatedName
    void exitCreatedName(parser.java.JavaParser$CreatedNameContext) -> exitCreatedName
    void enterInnerCreator(parser.java.JavaParser$InnerCreatorContext) -> enterInnerCreator
    void exitInnerCreator(parser.java.JavaParser$InnerCreatorContext) -> exitInnerCreator
    void enterArrayCreatorRest(parser.java.JavaParser$ArrayCreatorRestContext) -> enterArrayCreatorRest
    void exitArrayCreatorRest(parser.java.JavaParser$ArrayCreatorRestContext) -> exitArrayCreatorRest
    void enterClassCreatorRest(parser.java.JavaParser$ClassCreatorRestContext) -> enterClassCreatorRest
    void exitClassCreatorRest(parser.java.JavaParser$ClassCreatorRestContext) -> exitClassCreatorRest
    void enterExplicitGenericInvocation(parser.java.JavaParser$ExplicitGenericInvocationContext) -> enterExplicitGenericInvocation
    void exitExplicitGenericInvocation(parser.java.JavaParser$ExplicitGenericInvocationContext) -> exitExplicitGenericInvocation
    void enterTypeArgumentsOrDiamond(parser.java.JavaParser$TypeArgumentsOrDiamondContext) -> enterTypeArgumentsOrDiamond
    void exitTypeArgumentsOrDiamond(parser.java.JavaParser$TypeArgumentsOrDiamondContext) -> exitTypeArgumentsOrDiamond
    void enterNonWildcardTypeArgumentsOrDiamond(parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext) -> enterNonWildcardTypeArgumentsOrDiamond
    void exitNonWildcardTypeArgumentsOrDiamond(parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext) -> exitNonWildcardTypeArgumentsOrDiamond
    void enterNonWildcardTypeArguments(parser.java.JavaParser$NonWildcardTypeArgumentsContext) -> enterNonWildcardTypeArguments
    void exitNonWildcardTypeArguments(parser.java.JavaParser$NonWildcardTypeArgumentsContext) -> exitNonWildcardTypeArguments
    void enterTypeList(parser.java.JavaParser$TypeListContext) -> enterTypeList
    void exitTypeList(parser.java.JavaParser$TypeListContext) -> exitTypeList
    void enterTypeType(parser.java.JavaParser$TypeTypeContext) -> enterTypeType
    void exitTypeType(parser.java.JavaParser$TypeTypeContext) -> exitTypeType
    void enterPrimitiveType(parser.java.JavaParser$PrimitiveTypeContext) -> enterPrimitiveType
    void exitPrimitiveType(parser.java.JavaParser$PrimitiveTypeContext) -> exitPrimitiveType
    void enterTypeArguments(parser.java.JavaParser$TypeArgumentsContext) -> enterTypeArguments
    void exitTypeArguments(parser.java.JavaParser$TypeArgumentsContext) -> exitTypeArguments
    void enterSuperSuffix(parser.java.JavaParser$SuperSuffixContext) -> enterSuperSuffix
    void exitSuperSuffix(parser.java.JavaParser$SuperSuffixContext) -> exitSuperSuffix
    void enterExplicitGenericInvocationSuffix(parser.java.JavaParser$ExplicitGenericInvocationSuffixContext) -> enterExplicitGenericInvocationSuffix
    void exitExplicitGenericInvocationSuffix(parser.java.JavaParser$ExplicitGenericInvocationSuffixContext) -> exitExplicitGenericInvocationSuffix
    void enterArguments(parser.java.JavaParser$ArgumentsContext) -> enterArguments
    void exitArguments(parser.java.JavaParser$ArgumentsContext) -> exitArguments
    void enterEveryRule(org.antlr.v4.runtime.ParserRuleContext) -> enterEveryRule
    void exitEveryRule(org.antlr.v4.runtime.ParserRuleContext) -> exitEveryRule
    void visitTerminal(org.antlr.v4.runtime.tree.TerminalNode) -> visitTerminal
    void visitErrorNode(org.antlr.v4.runtime.tree.ErrorNode) -> visitErrorNode
parser.java.JavaParserBaseVisitor -> parser.java.JavaParserBaseVisitor:
    void <init>() -> <init>
    java.lang.Object visitCompilationUnit(parser.java.JavaParser$CompilationUnitContext) -> visitCompilationUnit
    java.lang.Object visitPackageDeclaration(parser.java.JavaParser$PackageDeclarationContext) -> visitPackageDeclaration
    java.lang.Object visitImportDeclaration(parser.java.JavaParser$ImportDeclarationContext) -> visitImportDeclaration
    java.lang.Object visitTypeDeclaration(parser.java.JavaParser$TypeDeclarationContext) -> visitTypeDeclaration
    java.lang.Object visitModifier(parser.java.JavaParser$ModifierContext) -> visitModifier
    java.lang.Object visitClassOrInterfaceModifier(parser.java.JavaParser$ClassOrInterfaceModifierContext) -> visitClassOrInterfaceModifier
    java.lang.Object visitVariableModifier(parser.java.JavaParser$VariableModifierContext) -> visitVariableModifier
    java.lang.Object visitClassDeclaration(parser.java.JavaParser$ClassDeclarationContext) -> visitClassDeclaration
    java.lang.Object visitTypeParameters(parser.java.JavaParser$TypeParametersContext) -> visitTypeParameters
    java.lang.Object visitTypeParameter(parser.java.JavaParser$TypeParameterContext) -> visitTypeParameter
    java.lang.Object visitTypeBound(parser.java.JavaParser$TypeBoundContext) -> visitTypeBound
    java.lang.Object visitEnumDeclaration(parser.java.JavaParser$EnumDeclarationContext) -> visitEnumDeclaration
    java.lang.Object visitEnumConstants(parser.java.JavaParser$EnumConstantsContext) -> visitEnumConstants
    java.lang.Object visitEnumConstant(parser.java.JavaParser$EnumConstantContext) -> visitEnumConstant
    java.lang.Object visitEnumBodyDeclarations(parser.java.JavaParser$EnumBodyDeclarationsContext) -> visitEnumBodyDeclarations
    java.lang.Object visitInterfaceDeclaration(parser.java.JavaParser$InterfaceDeclarationContext) -> visitInterfaceDeclaration
    java.lang.Object visitClassBody(parser.java.JavaParser$ClassBodyContext) -> visitClassBody
    java.lang.Object visitInterfaceBody(parser.java.JavaParser$InterfaceBodyContext) -> visitInterfaceBody
    java.lang.Object visitClassBodyDeclaration(parser.java.JavaParser$ClassBodyDeclarationContext) -> visitClassBodyDeclaration
    java.lang.Object visitMemberDeclaration(parser.java.JavaParser$MemberDeclarationContext) -> visitMemberDeclaration
    java.lang.Object visitMethodDeclaration(parser.java.JavaParser$MethodDeclarationContext) -> visitMethodDeclaration
    java.lang.Object visitMethodBody(parser.java.JavaParser$MethodBodyContext) -> visitMethodBody
    java.lang.Object visitTypeTypeOrVoid(parser.java.JavaParser$TypeTypeOrVoidContext) -> visitTypeTypeOrVoid
    java.lang.Object visitGenericMethodDeclaration(parser.java.JavaParser$GenericMethodDeclarationContext) -> visitGenericMethodDeclaration
    java.lang.Object visitGenericConstructorDeclaration(parser.java.JavaParser$GenericConstructorDeclarationContext) -> visitGenericConstructorDeclaration
    java.lang.Object visitConstructorDeclaration(parser.java.JavaParser$ConstructorDeclarationContext) -> visitConstructorDeclaration
    java.lang.Object visitFieldDeclaration(parser.java.JavaParser$FieldDeclarationContext) -> visitFieldDeclaration
    java.lang.Object visitInterfaceBodyDeclaration(parser.java.JavaParser$InterfaceBodyDeclarationContext) -> visitInterfaceBodyDeclaration
    java.lang.Object visitInterfaceMemberDeclaration(parser.java.JavaParser$InterfaceMemberDeclarationContext) -> visitInterfaceMemberDeclaration
    java.lang.Object visitConstDeclaration(parser.java.JavaParser$ConstDeclarationContext) -> visitConstDeclaration
    java.lang.Object visitConstantDeclarator(parser.java.JavaParser$ConstantDeclaratorContext) -> visitConstantDeclarator
    java.lang.Object visitInterfaceMethodDeclaration(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> visitInterfaceMethodDeclaration
    java.lang.Object visitInterfaceMethodModifier(parser.java.JavaParser$InterfaceMethodModifierContext) -> visitInterfaceMethodModifier
    java.lang.Object visitGenericInterfaceMethodDeclaration(parser.java.JavaParser$GenericInterfaceMethodDeclarationContext) -> visitGenericInterfaceMethodDeclaration
    java.lang.Object visitVariableDeclarators(parser.java.JavaParser$VariableDeclaratorsContext) -> visitVariableDeclarators
    java.lang.Object visitVariableDeclarator(parser.java.JavaParser$VariableDeclaratorContext) -> visitVariableDeclarator
    java.lang.Object visitVariableDeclaratorId(parser.java.JavaParser$VariableDeclaratorIdContext) -> visitVariableDeclaratorId
    java.lang.Object visitVariableInitializer(parser.java.JavaParser$VariableInitializerContext) -> visitVariableInitializer
    java.lang.Object visitArrayInitializer(parser.java.JavaParser$ArrayInitializerContext) -> visitArrayInitializer
    java.lang.Object visitClassOrInterfaceType(parser.java.JavaParser$ClassOrInterfaceTypeContext) -> visitClassOrInterfaceType
    java.lang.Object visitTypeArgument(parser.java.JavaParser$TypeArgumentContext) -> visitTypeArgument
    java.lang.Object visitQualifiedNameList(parser.java.JavaParser$QualifiedNameListContext) -> visitQualifiedNameList
    java.lang.Object visitFormalParameters(parser.java.JavaParser$FormalParametersContext) -> visitFormalParameters
    java.lang.Object visitFormalParameterList(parser.java.JavaParser$FormalParameterListContext) -> visitFormalParameterList
    java.lang.Object visitFormalParameter(parser.java.JavaParser$FormalParameterContext) -> visitFormalParameter
    java.lang.Object visitLastFormalParameter(parser.java.JavaParser$LastFormalParameterContext) -> visitLastFormalParameter
    java.lang.Object visitQualifiedName(parser.java.JavaParser$QualifiedNameContext) -> visitQualifiedName
    java.lang.Object visitLiteral(parser.java.JavaParser$LiteralContext) -> visitLiteral
    java.lang.Object visitIntegerLiteral(parser.java.JavaParser$IntegerLiteralContext) -> visitIntegerLiteral
    java.lang.Object visitFloatLiteral(parser.java.JavaParser$FloatLiteralContext) -> visitFloatLiteral
    java.lang.Object visitAnnotation(parser.java.JavaParser$AnnotationContext) -> visitAnnotation
    java.lang.Object visitElementValuePairs(parser.java.JavaParser$ElementValuePairsContext) -> visitElementValuePairs
    java.lang.Object visitElementValuePair(parser.java.JavaParser$ElementValuePairContext) -> visitElementValuePair
    java.lang.Object visitElementValue(parser.java.JavaParser$ElementValueContext) -> visitElementValue
    java.lang.Object visitElementValueArrayInitializer(parser.java.JavaParser$ElementValueArrayInitializerContext) -> visitElementValueArrayInitializer
    java.lang.Object visitAnnotationTypeDeclaration(parser.java.JavaParser$AnnotationTypeDeclarationContext) -> visitAnnotationTypeDeclaration
    java.lang.Object visitAnnotationTypeBody(parser.java.JavaParser$AnnotationTypeBodyContext) -> visitAnnotationTypeBody
    java.lang.Object visitAnnotationTypeElementDeclaration(parser.java.JavaParser$AnnotationTypeElementDeclarationContext) -> visitAnnotationTypeElementDeclaration
    java.lang.Object visitAnnotationTypeElementRest(parser.java.JavaParser$AnnotationTypeElementRestContext) -> visitAnnotationTypeElementRest
    java.lang.Object visitAnnotationMethodOrConstantRest(parser.java.JavaParser$AnnotationMethodOrConstantRestContext) -> visitAnnotationMethodOrConstantRest
    java.lang.Object visitAnnotationMethodRest(parser.java.JavaParser$AnnotationMethodRestContext) -> visitAnnotationMethodRest
    java.lang.Object visitAnnotationConstantRest(parser.java.JavaParser$AnnotationConstantRestContext) -> visitAnnotationConstantRest
    java.lang.Object visitDefaultValue(parser.java.JavaParser$DefaultValueContext) -> visitDefaultValue
    java.lang.Object visitBlock(parser.java.JavaParser$BlockContext) -> visitBlock
    java.lang.Object visitBlockStatement(parser.java.JavaParser$BlockStatementContext) -> visitBlockStatement
    java.lang.Object visitLocalVariableDeclaration(parser.java.JavaParser$LocalVariableDeclarationContext) -> visitLocalVariableDeclaration
    java.lang.Object visitLocalTypeDeclaration(parser.java.JavaParser$LocalTypeDeclarationContext) -> visitLocalTypeDeclaration
    java.lang.Object visitStmtCase0(parser.java.JavaParser$StmtCase0Context) -> visitStmtCase0
    java.lang.Object visitStmtCase1(parser.java.JavaParser$StmtCase1Context) -> visitStmtCase1
    java.lang.Object visitStmtCase2(parser.java.JavaParser$StmtCase2Context) -> visitStmtCase2
    java.lang.Object visitStmtCase3(parser.java.JavaParser$StmtCase3Context) -> visitStmtCase3
    java.lang.Object visitStmtCase4(parser.java.JavaParser$StmtCase4Context) -> visitStmtCase4
    java.lang.Object visitStmtCase5(parser.java.JavaParser$StmtCase5Context) -> visitStmtCase5
    java.lang.Object visitStmtCase6(parser.java.JavaParser$StmtCase6Context) -> visitStmtCase6
    java.lang.Object visitStmtCase7(parser.java.JavaParser$StmtCase7Context) -> visitStmtCase7
    java.lang.Object visitStmtCase8(parser.java.JavaParser$StmtCase8Context) -> visitStmtCase8
    java.lang.Object visitStmtCase9(parser.java.JavaParser$StmtCase9Context) -> visitStmtCase9
    java.lang.Object visitStmtCase10(parser.java.JavaParser$StmtCase10Context) -> visitStmtCase10
    java.lang.Object visitStmtCase11(parser.java.JavaParser$StmtCase11Context) -> visitStmtCase11
    java.lang.Object visitStmtCase12(parser.java.JavaParser$StmtCase12Context) -> visitStmtCase12
    java.lang.Object visitStmtCase13(parser.java.JavaParser$StmtCase13Context) -> visitStmtCase13
    java.lang.Object visitStmtCase14(parser.java.JavaParser$StmtCase14Context) -> visitStmtCase14
    java.lang.Object visitStmtCase15(parser.java.JavaParser$StmtCase15Context) -> visitStmtCase15
    java.lang.Object visitStmtCase16(parser.java.JavaParser$StmtCase16Context) -> visitStmtCase16
    java.lang.Object visitCatchClause(parser.java.JavaParser$CatchClauseContext) -> visitCatchClause
    java.lang.Object visitCatchType(parser.java.JavaParser$CatchTypeContext) -> visitCatchType
    java.lang.Object visitFinallyBlock(parser.java.JavaParser$FinallyBlockContext) -> visitFinallyBlock
    java.lang.Object visitResourceSpecification(parser.java.JavaParser$ResourceSpecificationContext) -> visitResourceSpecification
    java.lang.Object visitResources(parser.java.JavaParser$ResourcesContext) -> visitResources
    java.lang.Object visitResource(parser.java.JavaParser$ResourceContext) -> visitResource
    java.lang.Object visitSwitchBlockStatementGroup(parser.java.JavaParser$SwitchBlockStatementGroupContext) -> visitSwitchBlockStatementGroup
    java.lang.Object visitSwitchLabel(parser.java.JavaParser$SwitchLabelContext) -> visitSwitchLabel
    java.lang.Object visitForControl(parser.java.JavaParser$ForControlContext) -> visitForControl
    java.lang.Object visitForInit(parser.java.JavaParser$ForInitContext) -> visitForInit
    java.lang.Object visitEnhancedForControl(parser.java.JavaParser$EnhancedForControlContext) -> visitEnhancedForControl
    java.lang.Object visitParExpression(parser.java.JavaParser$ParExpressionContext) -> visitParExpression
    java.lang.Object visitExpressionList(parser.java.JavaParser$ExpressionListContext) -> visitExpressionList
    java.lang.Object visitMethodCall(parser.java.JavaParser$MethodCallContext) -> visitMethodCall
    java.lang.Object visitExprCase15(parser.java.JavaParser$ExprCase15Context) -> visitExprCase15
    java.lang.Object visitExprCase14(parser.java.JavaParser$ExprCase14Context) -> visitExprCase14
    java.lang.Object visitExprCase17(parser.java.JavaParser$ExprCase17Context) -> visitExprCase17
    java.lang.Object visitExprCase16(parser.java.JavaParser$ExprCase16Context) -> visitExprCase16
    java.lang.Object visitExprCase19(parser.java.JavaParser$ExprCase19Context) -> visitExprCase19
    java.lang.Object visitExprCase18(parser.java.JavaParser$ExprCase18Context) -> visitExprCase18
    java.lang.Object visitExprCase11(parser.java.JavaParser$ExprCase11Context) -> visitExprCase11
    java.lang.Object visitExprCase10(parser.java.JavaParser$ExprCase10Context) -> visitExprCase10
    java.lang.Object visitExprCase13(parser.java.JavaParser$ExprCase13Context) -> visitExprCase13
    java.lang.Object visitExprCase12(parser.java.JavaParser$ExprCase12Context) -> visitExprCase12
    java.lang.Object visitExprCase2(parser.java.JavaParser$ExprCase2Context) -> visitExprCase2
    java.lang.Object visitExprCase1(parser.java.JavaParser$ExprCase1Context) -> visitExprCase1
    java.lang.Object visitExprCase4(parser.java.JavaParser$ExprCase4Context) -> visitExprCase4
    java.lang.Object visitExprCase3(parser.java.JavaParser$ExprCase3Context) -> visitExprCase3
    java.lang.Object visitExprCase0(parser.java.JavaParser$ExprCase0Context) -> visitExprCase0
    java.lang.Object visitExprCase25(parser.java.JavaParser$ExprCase25Context) -> visitExprCase25
    java.lang.Object visitExprCase9(parser.java.JavaParser$ExprCase9Context) -> visitExprCase9
    java.lang.Object visitExprCase20(parser.java.JavaParser$ExprCase20Context) -> visitExprCase20
    java.lang.Object visitExprCase22(parser.java.JavaParser$ExprCase22Context) -> visitExprCase22
    java.lang.Object visitExprCase6(parser.java.JavaParser$ExprCase6Context) -> visitExprCase6
    java.lang.Object visitExprCase5(parser.java.JavaParser$ExprCase5Context) -> visitExprCase5
    java.lang.Object visitExprCase21(parser.java.JavaParser$ExprCase21Context) -> visitExprCase21
    java.lang.Object visitExprCase8(parser.java.JavaParser$ExprCase8Context) -> visitExprCase8
    java.lang.Object visitExprCase24(parser.java.JavaParser$ExprCase24Context) -> visitExprCase24
    java.lang.Object visitExprCase7(parser.java.JavaParser$ExprCase7Context) -> visitExprCase7
    java.lang.Object visitExprCase23(parser.java.JavaParser$ExprCase23Context) -> visitExprCase23
    java.lang.Object visitLambdaExpression(parser.java.JavaParser$LambdaExpressionContext) -> visitLambdaExpression
    java.lang.Object visitLambdaParameters(parser.java.JavaParser$LambdaParametersContext) -> visitLambdaParameters
    java.lang.Object visitLambdaBody(parser.java.JavaParser$LambdaBodyContext) -> visitLambdaBody
    java.lang.Object visitPrimary(parser.java.JavaParser$PrimaryContext) -> visitPrimary
    java.lang.Object visitClassType(parser.java.JavaParser$ClassTypeContext) -> visitClassType
    java.lang.Object visitCreator(parser.java.JavaParser$CreatorContext) -> visitCreator
    java.lang.Object visitCreatedName(parser.java.JavaParser$CreatedNameContext) -> visitCreatedName
    java.lang.Object visitInnerCreator(parser.java.JavaParser$InnerCreatorContext) -> visitInnerCreator
    java.lang.Object visitArrayCreatorRest(parser.java.JavaParser$ArrayCreatorRestContext) -> visitArrayCreatorRest
    java.lang.Object visitClassCreatorRest(parser.java.JavaParser$ClassCreatorRestContext) -> visitClassCreatorRest
    java.lang.Object visitExplicitGenericInvocation(parser.java.JavaParser$ExplicitGenericInvocationContext) -> visitExplicitGenericInvocation
    java.lang.Object visitTypeArgumentsOrDiamond(parser.java.JavaParser$TypeArgumentsOrDiamondContext) -> visitTypeArgumentsOrDiamond
    java.lang.Object visitNonWildcardTypeArgumentsOrDiamond(parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext) -> visitNonWildcardTypeArgumentsOrDiamond
    java.lang.Object visitNonWildcardTypeArguments(parser.java.JavaParser$NonWildcardTypeArgumentsContext) -> visitNonWildcardTypeArguments
    java.lang.Object visitTypeList(parser.java.JavaParser$TypeListContext) -> visitTypeList
    java.lang.Object visitTypeType(parser.java.JavaParser$TypeTypeContext) -> visitTypeType
    java.lang.Object visitPrimitiveType(parser.java.JavaParser$PrimitiveTypeContext) -> visitPrimitiveType
    java.lang.Object visitTypeArguments(parser.java.JavaParser$TypeArgumentsContext) -> visitTypeArguments
    java.lang.Object visitSuperSuffix(parser.java.JavaParser$SuperSuffixContext) -> visitSuperSuffix
    java.lang.Object visitExplicitGenericInvocationSuffix(parser.java.JavaParser$ExplicitGenericInvocationSuffixContext) -> visitExplicitGenericInvocationSuffix
    java.lang.Object visitArguments(parser.java.JavaParser$ArgumentsContext) -> visitArguments
parser.java.JavaParserListener -> parser.java.JavaParserListener:
    void enterCompilationUnit(parser.java.JavaParser$CompilationUnitContext) -> enterCompilationUnit
    void exitCompilationUnit(parser.java.JavaParser$CompilationUnitContext) -> exitCompilationUnit
    void enterPackageDeclaration(parser.java.JavaParser$PackageDeclarationContext) -> enterPackageDeclaration
    void exitPackageDeclaration(parser.java.JavaParser$PackageDeclarationContext) -> exitPackageDeclaration
    void enterImportDeclaration(parser.java.JavaParser$ImportDeclarationContext) -> enterImportDeclaration
    void exitImportDeclaration(parser.java.JavaParser$ImportDeclarationContext) -> exitImportDeclaration
    void enterTypeDeclaration(parser.java.JavaParser$TypeDeclarationContext) -> enterTypeDeclaration
    void exitTypeDeclaration(parser.java.JavaParser$TypeDeclarationContext) -> exitTypeDeclaration
    void enterModifier(parser.java.JavaParser$ModifierContext) -> enterModifier
    void exitModifier(parser.java.JavaParser$ModifierContext) -> exitModifier
    void enterClassOrInterfaceModifier(parser.java.JavaParser$ClassOrInterfaceModifierContext) -> enterClassOrInterfaceModifier
    void exitClassOrInterfaceModifier(parser.java.JavaParser$ClassOrInterfaceModifierContext) -> exitClassOrInterfaceModifier
    void enterVariableModifier(parser.java.JavaParser$VariableModifierContext) -> enterVariableModifier
    void exitVariableModifier(parser.java.JavaParser$VariableModifierContext) -> exitVariableModifier
    void enterClassDeclaration(parser.java.JavaParser$ClassDeclarationContext) -> enterClassDeclaration
    void exitClassDeclaration(parser.java.JavaParser$ClassDeclarationContext) -> exitClassDeclaration
    void enterTypeParameters(parser.java.JavaParser$TypeParametersContext) -> enterTypeParameters
    void exitTypeParameters(parser.java.JavaParser$TypeParametersContext) -> exitTypeParameters
    void enterTypeParameter(parser.java.JavaParser$TypeParameterContext) -> enterTypeParameter
    void exitTypeParameter(parser.java.JavaParser$TypeParameterContext) -> exitTypeParameter
    void enterTypeBound(parser.java.JavaParser$TypeBoundContext) -> enterTypeBound
    void exitTypeBound(parser.java.JavaParser$TypeBoundContext) -> exitTypeBound
    void enterEnumDeclaration(parser.java.JavaParser$EnumDeclarationContext) -> enterEnumDeclaration
    void exitEnumDeclaration(parser.java.JavaParser$EnumDeclarationContext) -> exitEnumDeclaration
    void enterEnumConstants(parser.java.JavaParser$EnumConstantsContext) -> enterEnumConstants
    void exitEnumConstants(parser.java.JavaParser$EnumConstantsContext) -> exitEnumConstants
    void enterEnumConstant(parser.java.JavaParser$EnumConstantContext) -> enterEnumConstant
    void exitEnumConstant(parser.java.JavaParser$EnumConstantContext) -> exitEnumConstant
    void enterEnumBodyDeclarations(parser.java.JavaParser$EnumBodyDeclarationsContext) -> enterEnumBodyDeclarations
    void exitEnumBodyDeclarations(parser.java.JavaParser$EnumBodyDeclarationsContext) -> exitEnumBodyDeclarations
    void enterInterfaceDeclaration(parser.java.JavaParser$InterfaceDeclarationContext) -> enterInterfaceDeclaration
    void exitInterfaceDeclaration(parser.java.JavaParser$InterfaceDeclarationContext) -> exitInterfaceDeclaration
    void enterClassBody(parser.java.JavaParser$ClassBodyContext) -> enterClassBody
    void exitClassBody(parser.java.JavaParser$ClassBodyContext) -> exitClassBody
    void enterInterfaceBody(parser.java.JavaParser$InterfaceBodyContext) -> enterInterfaceBody
    void exitInterfaceBody(parser.java.JavaParser$InterfaceBodyContext) -> exitInterfaceBody
    void enterClassBodyDeclaration(parser.java.JavaParser$ClassBodyDeclarationContext) -> enterClassBodyDeclaration
    void exitClassBodyDeclaration(parser.java.JavaParser$ClassBodyDeclarationContext) -> exitClassBodyDeclaration
    void enterMemberDeclaration(parser.java.JavaParser$MemberDeclarationContext) -> enterMemberDeclaration
    void exitMemberDeclaration(parser.java.JavaParser$MemberDeclarationContext) -> exitMemberDeclaration
    void enterMethodDeclaration(parser.java.JavaParser$MethodDeclarationContext) -> enterMethodDeclaration
    void exitMethodDeclaration(parser.java.JavaParser$MethodDeclarationContext) -> exitMethodDeclaration
    void enterMethodBody(parser.java.JavaParser$MethodBodyContext) -> enterMethodBody
    void exitMethodBody(parser.java.JavaParser$MethodBodyContext) -> exitMethodBody
    void enterTypeTypeOrVoid(parser.java.JavaParser$TypeTypeOrVoidContext) -> enterTypeTypeOrVoid
    void exitTypeTypeOrVoid(parser.java.JavaParser$TypeTypeOrVoidContext) -> exitTypeTypeOrVoid
    void enterGenericMethodDeclaration(parser.java.JavaParser$GenericMethodDeclarationContext) -> enterGenericMethodDeclaration
    void exitGenericMethodDeclaration(parser.java.JavaParser$GenericMethodDeclarationContext) -> exitGenericMethodDeclaration
    void enterGenericConstructorDeclaration(parser.java.JavaParser$GenericConstructorDeclarationContext) -> enterGenericConstructorDeclaration
    void exitGenericConstructorDeclaration(parser.java.JavaParser$GenericConstructorDeclarationContext) -> exitGenericConstructorDeclaration
    void enterConstructorDeclaration(parser.java.JavaParser$ConstructorDeclarationContext) -> enterConstructorDeclaration
    void exitConstructorDeclaration(parser.java.JavaParser$ConstructorDeclarationContext) -> exitConstructorDeclaration
    void enterFieldDeclaration(parser.java.JavaParser$FieldDeclarationContext) -> enterFieldDeclaration
    void exitFieldDeclaration(parser.java.JavaParser$FieldDeclarationContext) -> exitFieldDeclaration
    void enterInterfaceBodyDeclaration(parser.java.JavaParser$InterfaceBodyDeclarationContext) -> enterInterfaceBodyDeclaration
    void exitInterfaceBodyDeclaration(parser.java.JavaParser$InterfaceBodyDeclarationContext) -> exitInterfaceBodyDeclaration
    void enterInterfaceMemberDeclaration(parser.java.JavaParser$InterfaceMemberDeclarationContext) -> enterInterfaceMemberDeclaration
    void exitInterfaceMemberDeclaration(parser.java.JavaParser$InterfaceMemberDeclarationContext) -> exitInterfaceMemberDeclaration
    void enterConstDeclaration(parser.java.JavaParser$ConstDeclarationContext) -> enterConstDeclaration
    void exitConstDeclaration(parser.java.JavaParser$ConstDeclarationContext) -> exitConstDeclaration
    void enterConstantDeclarator(parser.java.JavaParser$ConstantDeclaratorContext) -> enterConstantDeclarator
    void exitConstantDeclarator(parser.java.JavaParser$ConstantDeclaratorContext) -> exitConstantDeclarator
    void enterInterfaceMethodDeclaration(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> enterInterfaceMethodDeclaration
    void exitInterfaceMethodDeclaration(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> exitInterfaceMethodDeclaration
    void enterInterfaceMethodModifier(parser.java.JavaParser$InterfaceMethodModifierContext) -> enterInterfaceMethodModifier
    void exitInterfaceMethodModifier(parser.java.JavaParser$InterfaceMethodModifierContext) -> exitInterfaceMethodModifier
    void enterGenericInterfaceMethodDeclaration(parser.java.JavaParser$GenericInterfaceMethodDeclarationContext) -> enterGenericInterfaceMethodDeclaration
    void exitGenericInterfaceMethodDeclaration(parser.java.JavaParser$GenericInterfaceMethodDeclarationContext) -> exitGenericInterfaceMethodDeclaration
    void enterVariableDeclarators(parser.java.JavaParser$VariableDeclaratorsContext) -> enterVariableDeclarators
    void exitVariableDeclarators(parser.java.JavaParser$VariableDeclaratorsContext) -> exitVariableDeclarators
    void enterVariableDeclarator(parser.java.JavaParser$VariableDeclaratorContext) -> enterVariableDeclarator
    void exitVariableDeclarator(parser.java.JavaParser$VariableDeclaratorContext) -> exitVariableDeclarator
    void enterVariableDeclaratorId(parser.java.JavaParser$VariableDeclaratorIdContext) -> enterVariableDeclaratorId
    void exitVariableDeclaratorId(parser.java.JavaParser$VariableDeclaratorIdContext) -> exitVariableDeclaratorId
    void enterVariableInitializer(parser.java.JavaParser$VariableInitializerContext) -> enterVariableInitializer
    void exitVariableInitializer(parser.java.JavaParser$VariableInitializerContext) -> exitVariableInitializer
    void enterArrayInitializer(parser.java.JavaParser$ArrayInitializerContext) -> enterArrayInitializer
    void exitArrayInitializer(parser.java.JavaParser$ArrayInitializerContext) -> exitArrayInitializer
    void enterClassOrInterfaceType(parser.java.JavaParser$ClassOrInterfaceTypeContext) -> enterClassOrInterfaceType
    void exitClassOrInterfaceType(parser.java.JavaParser$ClassOrInterfaceTypeContext) -> exitClassOrInterfaceType
    void enterTypeArgument(parser.java.JavaParser$TypeArgumentContext) -> enterTypeArgument
    void exitTypeArgument(parser.java.JavaParser$TypeArgumentContext) -> exitTypeArgument
    void enterQualifiedNameList(parser.java.JavaParser$QualifiedNameListContext) -> enterQualifiedNameList
    void exitQualifiedNameList(parser.java.JavaParser$QualifiedNameListContext) -> exitQualifiedNameList
    void enterFormalParameters(parser.java.JavaParser$FormalParametersContext) -> enterFormalParameters
    void exitFormalParameters(parser.java.JavaParser$FormalParametersContext) -> exitFormalParameters
    void enterFormalParameterList(parser.java.JavaParser$FormalParameterListContext) -> enterFormalParameterList
    void exitFormalParameterList(parser.java.JavaParser$FormalParameterListContext) -> exitFormalParameterList
    void enterFormalParameter(parser.java.JavaParser$FormalParameterContext) -> enterFormalParameter
    void exitFormalParameter(parser.java.JavaParser$FormalParameterContext) -> exitFormalParameter
    void enterLastFormalParameter(parser.java.JavaParser$LastFormalParameterContext) -> enterLastFormalParameter
    void exitLastFormalParameter(parser.java.JavaParser$LastFormalParameterContext) -> exitLastFormalParameter
    void enterQualifiedName(parser.java.JavaParser$QualifiedNameContext) -> enterQualifiedName
    void exitQualifiedName(parser.java.JavaParser$QualifiedNameContext) -> exitQualifiedName
    void enterLiteral(parser.java.JavaParser$LiteralContext) -> enterLiteral
    void exitLiteral(parser.java.JavaParser$LiteralContext) -> exitLiteral
    void enterIntegerLiteral(parser.java.JavaParser$IntegerLiteralContext) -> enterIntegerLiteral
    void exitIntegerLiteral(parser.java.JavaParser$IntegerLiteralContext) -> exitIntegerLiteral
    void enterFloatLiteral(parser.java.JavaParser$FloatLiteralContext) -> enterFloatLiteral
    void exitFloatLiteral(parser.java.JavaParser$FloatLiteralContext) -> exitFloatLiteral
    void enterAnnotation(parser.java.JavaParser$AnnotationContext) -> enterAnnotation
    void exitAnnotation(parser.java.JavaParser$AnnotationContext) -> exitAnnotation
    void enterElementValuePairs(parser.java.JavaParser$ElementValuePairsContext) -> enterElementValuePairs
    void exitElementValuePairs(parser.java.JavaParser$ElementValuePairsContext) -> exitElementValuePairs
    void enterElementValuePair(parser.java.JavaParser$ElementValuePairContext) -> enterElementValuePair
    void exitElementValuePair(parser.java.JavaParser$ElementValuePairContext) -> exitElementValuePair
    void enterElementValue(parser.java.JavaParser$ElementValueContext) -> enterElementValue
    void exitElementValue(parser.java.JavaParser$ElementValueContext) -> exitElementValue
    void enterElementValueArrayInitializer(parser.java.JavaParser$ElementValueArrayInitializerContext) -> enterElementValueArrayInitializer
    void exitElementValueArrayInitializer(parser.java.JavaParser$ElementValueArrayInitializerContext) -> exitElementValueArrayInitializer
    void enterAnnotationTypeDeclaration(parser.java.JavaParser$AnnotationTypeDeclarationContext) -> enterAnnotationTypeDeclaration
    void exitAnnotationTypeDeclaration(parser.java.JavaParser$AnnotationTypeDeclarationContext) -> exitAnnotationTypeDeclaration
    void enterAnnotationTypeBody(parser.java.JavaParser$AnnotationTypeBodyContext) -> enterAnnotationTypeBody
    void exitAnnotationTypeBody(parser.java.JavaParser$AnnotationTypeBodyContext) -> exitAnnotationTypeBody
    void enterAnnotationTypeElementDeclaration(parser.java.JavaParser$AnnotationTypeElementDeclarationContext) -> enterAnnotationTypeElementDeclaration
    void exitAnnotationTypeElementDeclaration(parser.java.JavaParser$AnnotationTypeElementDeclarationContext) -> exitAnnotationTypeElementDeclaration
    void enterAnnotationTypeElementRest(parser.java.JavaParser$AnnotationTypeElementRestContext) -> enterAnnotationTypeElementRest
    void exitAnnotationTypeElementRest(parser.java.JavaParser$AnnotationTypeElementRestContext) -> exitAnnotationTypeElementRest
    void enterAnnotationMethodOrConstantRest(parser.java.JavaParser$AnnotationMethodOrConstantRestContext) -> enterAnnotationMethodOrConstantRest
    void exitAnnotationMethodOrConstantRest(parser.java.JavaParser$AnnotationMethodOrConstantRestContext) -> exitAnnotationMethodOrConstantRest
    void enterAnnotationMethodRest(parser.java.JavaParser$AnnotationMethodRestContext) -> enterAnnotationMethodRest
    void exitAnnotationMethodRest(parser.java.JavaParser$AnnotationMethodRestContext) -> exitAnnotationMethodRest
    void enterAnnotationConstantRest(parser.java.JavaParser$AnnotationConstantRestContext) -> enterAnnotationConstantRest
    void exitAnnotationConstantRest(parser.java.JavaParser$AnnotationConstantRestContext) -> exitAnnotationConstantRest
    void enterDefaultValue(parser.java.JavaParser$DefaultValueContext) -> enterDefaultValue
    void exitDefaultValue(parser.java.JavaParser$DefaultValueContext) -> exitDefaultValue
    void enterBlock(parser.java.JavaParser$BlockContext) -> enterBlock
    void exitBlock(parser.java.JavaParser$BlockContext) -> exitBlock
    void enterBlockStatement(parser.java.JavaParser$BlockStatementContext) -> enterBlockStatement
    void exitBlockStatement(parser.java.JavaParser$BlockStatementContext) -> exitBlockStatement
    void enterLocalVariableDeclaration(parser.java.JavaParser$LocalVariableDeclarationContext) -> enterLocalVariableDeclaration
    void exitLocalVariableDeclaration(parser.java.JavaParser$LocalVariableDeclarationContext) -> exitLocalVariableDeclaration
    void enterLocalTypeDeclaration(parser.java.JavaParser$LocalTypeDeclarationContext) -> enterLocalTypeDeclaration
    void exitLocalTypeDeclaration(parser.java.JavaParser$LocalTypeDeclarationContext) -> exitLocalTypeDeclaration
    void enterStmtCase0(parser.java.JavaParser$StmtCase0Context) -> enterStmtCase0
    void exitStmtCase0(parser.java.JavaParser$StmtCase0Context) -> exitStmtCase0
    void enterStmtCase1(parser.java.JavaParser$StmtCase1Context) -> enterStmtCase1
    void exitStmtCase1(parser.java.JavaParser$StmtCase1Context) -> exitStmtCase1
    void enterStmtCase2(parser.java.JavaParser$StmtCase2Context) -> enterStmtCase2
    void exitStmtCase2(parser.java.JavaParser$StmtCase2Context) -> exitStmtCase2
    void enterStmtCase3(parser.java.JavaParser$StmtCase3Context) -> enterStmtCase3
    void exitStmtCase3(parser.java.JavaParser$StmtCase3Context) -> exitStmtCase3
    void enterStmtCase4(parser.java.JavaParser$StmtCase4Context) -> enterStmtCase4
    void exitStmtCase4(parser.java.JavaParser$StmtCase4Context) -> exitStmtCase4
    void enterStmtCase5(parser.java.JavaParser$StmtCase5Context) -> enterStmtCase5
    void exitStmtCase5(parser.java.JavaParser$StmtCase5Context) -> exitStmtCase5
    void enterStmtCase6(parser.java.JavaParser$StmtCase6Context) -> enterStmtCase6
    void exitStmtCase6(parser.java.JavaParser$StmtCase6Context) -> exitStmtCase6
    void enterStmtCase7(parser.java.JavaParser$StmtCase7Context) -> enterStmtCase7
    void exitStmtCase7(parser.java.JavaParser$StmtCase7Context) -> exitStmtCase7
    void enterStmtCase8(parser.java.JavaParser$StmtCase8Context) -> enterStmtCase8
    void exitStmtCase8(parser.java.JavaParser$StmtCase8Context) -> exitStmtCase8
    void enterStmtCase9(parser.java.JavaParser$StmtCase9Context) -> enterStmtCase9
    void exitStmtCase9(parser.java.JavaParser$StmtCase9Context) -> exitStmtCase9
    void enterStmtCase10(parser.java.JavaParser$StmtCase10Context) -> enterStmtCase10
    void exitStmtCase10(parser.java.JavaParser$StmtCase10Context) -> exitStmtCase10
    void enterStmtCase11(parser.java.JavaParser$StmtCase11Context) -> enterStmtCase11
    void exitStmtCase11(parser.java.JavaParser$StmtCase11Context) -> exitStmtCase11
    void enterStmtCase12(parser.java.JavaParser$StmtCase12Context) -> enterStmtCase12
    void exitStmtCase12(parser.java.JavaParser$StmtCase12Context) -> exitStmtCase12
    void enterStmtCase13(parser.java.JavaParser$StmtCase13Context) -> enterStmtCase13
    void exitStmtCase13(parser.java.JavaParser$StmtCase13Context) -> exitStmtCase13
    void enterStmtCase14(parser.java.JavaParser$StmtCase14Context) -> enterStmtCase14
    void exitStmtCase14(parser.java.JavaParser$StmtCase14Context) -> exitStmtCase14
    void enterStmtCase15(parser.java.JavaParser$StmtCase15Context) -> enterStmtCase15
    void exitStmtCase15(parser.java.JavaParser$StmtCase15Context) -> exitStmtCase15
    void enterStmtCase16(parser.java.JavaParser$StmtCase16Context) -> enterStmtCase16
    void exitStmtCase16(parser.java.JavaParser$StmtCase16Context) -> exitStmtCase16
    void enterCatchClause(parser.java.JavaParser$CatchClauseContext) -> enterCatchClause
    void exitCatchClause(parser.java.JavaParser$CatchClauseContext) -> exitCatchClause
    void enterCatchType(parser.java.JavaParser$CatchTypeContext) -> enterCatchType
    void exitCatchType(parser.java.JavaParser$CatchTypeContext) -> exitCatchType
    void enterFinallyBlock(parser.java.JavaParser$FinallyBlockContext) -> enterFinallyBlock
    void exitFinallyBlock(parser.java.JavaParser$FinallyBlockContext) -> exitFinallyBlock
    void enterResourceSpecification(parser.java.JavaParser$ResourceSpecificationContext) -> enterResourceSpecification
    void exitResourceSpecification(parser.java.JavaParser$ResourceSpecificationContext) -> exitResourceSpecification
    void enterResources(parser.java.JavaParser$ResourcesContext) -> enterResources
    void exitResources(parser.java.JavaParser$ResourcesContext) -> exitResources
    void enterResource(parser.java.JavaParser$ResourceContext) -> enterResource
    void exitResource(parser.java.JavaParser$ResourceContext) -> exitResource
    void enterSwitchBlockStatementGroup(parser.java.JavaParser$SwitchBlockStatementGroupContext) -> enterSwitchBlockStatementGroup
    void exitSwitchBlockStatementGroup(parser.java.JavaParser$SwitchBlockStatementGroupContext) -> exitSwitchBlockStatementGroup
    void enterSwitchLabel(parser.java.JavaParser$SwitchLabelContext) -> enterSwitchLabel
    void exitSwitchLabel(parser.java.JavaParser$SwitchLabelContext) -> exitSwitchLabel
    void enterForControl(parser.java.JavaParser$ForControlContext) -> enterForControl
    void exitForControl(parser.java.JavaParser$ForControlContext) -> exitForControl
    void enterForInit(parser.java.JavaParser$ForInitContext) -> enterForInit
    void exitForInit(parser.java.JavaParser$ForInitContext) -> exitForInit
    void enterEnhancedForControl(parser.java.JavaParser$EnhancedForControlContext) -> enterEnhancedForControl
    void exitEnhancedForControl(parser.java.JavaParser$EnhancedForControlContext) -> exitEnhancedForControl
    void enterParExpression(parser.java.JavaParser$ParExpressionContext) -> enterParExpression
    void exitParExpression(parser.java.JavaParser$ParExpressionContext) -> exitParExpression
    void enterExpressionList(parser.java.JavaParser$ExpressionListContext) -> enterExpressionList
    void exitExpressionList(parser.java.JavaParser$ExpressionListContext) -> exitExpressionList
    void enterMethodCall(parser.java.JavaParser$MethodCallContext) -> enterMethodCall
    void exitMethodCall(parser.java.JavaParser$MethodCallContext) -> exitMethodCall
    void enterExprCase15(parser.java.JavaParser$ExprCase15Context) -> enterExprCase15
    void exitExprCase15(parser.java.JavaParser$ExprCase15Context) -> exitExprCase15
    void enterExprCase14(parser.java.JavaParser$ExprCase14Context) -> enterExprCase14
    void exitExprCase14(parser.java.JavaParser$ExprCase14Context) -> exitExprCase14
    void enterExprCase17(parser.java.JavaParser$ExprCase17Context) -> enterExprCase17
    void exitExprCase17(parser.java.JavaParser$ExprCase17Context) -> exitExprCase17
    void enterExprCase16(parser.java.JavaParser$ExprCase16Context) -> enterExprCase16
    void exitExprCase16(parser.java.JavaParser$ExprCase16Context) -> exitExprCase16
    void enterExprCase19(parser.java.JavaParser$ExprCase19Context) -> enterExprCase19
    void exitExprCase19(parser.java.JavaParser$ExprCase19Context) -> exitExprCase19
    void enterExprCase18(parser.java.JavaParser$ExprCase18Context) -> enterExprCase18
    void exitExprCase18(parser.java.JavaParser$ExprCase18Context) -> exitExprCase18
    void enterExprCase11(parser.java.JavaParser$ExprCase11Context) -> enterExprCase11
    void exitExprCase11(parser.java.JavaParser$ExprCase11Context) -> exitExprCase11
    void enterExprCase10(parser.java.JavaParser$ExprCase10Context) -> enterExprCase10
    void exitExprCase10(parser.java.JavaParser$ExprCase10Context) -> exitExprCase10
    void enterExprCase13(parser.java.JavaParser$ExprCase13Context) -> enterExprCase13
    void exitExprCase13(parser.java.JavaParser$ExprCase13Context) -> exitExprCase13
    void enterExprCase12(parser.java.JavaParser$ExprCase12Context) -> enterExprCase12
    void exitExprCase12(parser.java.JavaParser$ExprCase12Context) -> exitExprCase12
    void enterExprCase2(parser.java.JavaParser$ExprCase2Context) -> enterExprCase2
    void exitExprCase2(parser.java.JavaParser$ExprCase2Context) -> exitExprCase2
    void enterExprCase1(parser.java.JavaParser$ExprCase1Context) -> enterExprCase1
    void exitExprCase1(parser.java.JavaParser$ExprCase1Context) -> exitExprCase1
    void enterExprCase4(parser.java.JavaParser$ExprCase4Context) -> enterExprCase4
    void exitExprCase4(parser.java.JavaParser$ExprCase4Context) -> exitExprCase4
    void enterExprCase3(parser.java.JavaParser$ExprCase3Context) -> enterExprCase3
    void exitExprCase3(parser.java.JavaParser$ExprCase3Context) -> exitExprCase3
    void enterExprCase0(parser.java.JavaParser$ExprCase0Context) -> enterExprCase0
    void exitExprCase0(parser.java.JavaParser$ExprCase0Context) -> exitExprCase0
    void enterExprCase25(parser.java.JavaParser$ExprCase25Context) -> enterExprCase25
    void exitExprCase25(parser.java.JavaParser$ExprCase25Context) -> exitExprCase25
    void enterExprCase9(parser.java.JavaParser$ExprCase9Context) -> enterExprCase9
    void exitExprCase9(parser.java.JavaParser$ExprCase9Context) -> exitExprCase9
    void enterExprCase20(parser.java.JavaParser$ExprCase20Context) -> enterExprCase20
    void exitExprCase20(parser.java.JavaParser$ExprCase20Context) -> exitExprCase20
    void enterExprCase22(parser.java.JavaParser$ExprCase22Context) -> enterExprCase22
    void exitExprCase22(parser.java.JavaParser$ExprCase22Context) -> exitExprCase22
    void enterExprCase6(parser.java.JavaParser$ExprCase6Context) -> enterExprCase6
    void exitExprCase6(parser.java.JavaParser$ExprCase6Context) -> exitExprCase6
    void enterExprCase5(parser.java.JavaParser$ExprCase5Context) -> enterExprCase5
    void exitExprCase5(parser.java.JavaParser$ExprCase5Context) -> exitExprCase5
    void enterExprCase21(parser.java.JavaParser$ExprCase21Context) -> enterExprCase21
    void exitExprCase21(parser.java.JavaParser$ExprCase21Context) -> exitExprCase21
    void enterExprCase8(parser.java.JavaParser$ExprCase8Context) -> enterExprCase8
    void exitExprCase8(parser.java.JavaParser$ExprCase8Context) -> exitExprCase8
    void enterExprCase24(parser.java.JavaParser$ExprCase24Context) -> enterExprCase24
    void exitExprCase24(parser.java.JavaParser$ExprCase24Context) -> exitExprCase24
    void enterExprCase7(parser.java.JavaParser$ExprCase7Context) -> enterExprCase7
    void exitExprCase7(parser.java.JavaParser$ExprCase7Context) -> exitExprCase7
    void enterExprCase23(parser.java.JavaParser$ExprCase23Context) -> enterExprCase23
    void exitExprCase23(parser.java.JavaParser$ExprCase23Context) -> exitExprCase23
    void enterLambdaExpression(parser.java.JavaParser$LambdaExpressionContext) -> enterLambdaExpression
    void exitLambdaExpression(parser.java.JavaParser$LambdaExpressionContext) -> exitLambdaExpression
    void enterLambdaParameters(parser.java.JavaParser$LambdaParametersContext) -> enterLambdaParameters
    void exitLambdaParameters(parser.java.JavaParser$LambdaParametersContext) -> exitLambdaParameters
    void enterLambdaBody(parser.java.JavaParser$LambdaBodyContext) -> enterLambdaBody
    void exitLambdaBody(parser.java.JavaParser$LambdaBodyContext) -> exitLambdaBody
    void enterPrimary(parser.java.JavaParser$PrimaryContext) -> enterPrimary
    void exitPrimary(parser.java.JavaParser$PrimaryContext) -> exitPrimary
    void enterClassType(parser.java.JavaParser$ClassTypeContext) -> enterClassType
    void exitClassType(parser.java.JavaParser$ClassTypeContext) -> exitClassType
    void enterCreator(parser.java.JavaParser$CreatorContext) -> enterCreator
    void exitCreator(parser.java.JavaParser$CreatorContext) -> exitCreator
    void enterCreatedName(parser.java.JavaParser$CreatedNameContext) -> enterCreatedName
    void exitCreatedName(parser.java.JavaParser$CreatedNameContext) -> exitCreatedName
    void enterInnerCreator(parser.java.JavaParser$InnerCreatorContext) -> enterInnerCreator
    void exitInnerCreator(parser.java.JavaParser$InnerCreatorContext) -> exitInnerCreator
    void enterArrayCreatorRest(parser.java.JavaParser$ArrayCreatorRestContext) -> enterArrayCreatorRest
    void exitArrayCreatorRest(parser.java.JavaParser$ArrayCreatorRestContext) -> exitArrayCreatorRest
    void enterClassCreatorRest(parser.java.JavaParser$ClassCreatorRestContext) -> enterClassCreatorRest
    void exitClassCreatorRest(parser.java.JavaParser$ClassCreatorRestContext) -> exitClassCreatorRest
    void enterExplicitGenericInvocation(parser.java.JavaParser$ExplicitGenericInvocationContext) -> enterExplicitGenericInvocation
    void exitExplicitGenericInvocation(parser.java.JavaParser$ExplicitGenericInvocationContext) -> exitExplicitGenericInvocation
    void enterTypeArgumentsOrDiamond(parser.java.JavaParser$TypeArgumentsOrDiamondContext) -> enterTypeArgumentsOrDiamond
    void exitTypeArgumentsOrDiamond(parser.java.JavaParser$TypeArgumentsOrDiamondContext) -> exitTypeArgumentsOrDiamond
    void enterNonWildcardTypeArgumentsOrDiamond(parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext) -> enterNonWildcardTypeArgumentsOrDiamond
    void exitNonWildcardTypeArgumentsOrDiamond(parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext) -> exitNonWildcardTypeArgumentsOrDiamond
    void enterNonWildcardTypeArguments(parser.java.JavaParser$NonWildcardTypeArgumentsContext) -> enterNonWildcardTypeArguments
    void exitNonWildcardTypeArguments(parser.java.JavaParser$NonWildcardTypeArgumentsContext) -> exitNonWildcardTypeArguments
    void enterTypeList(parser.java.JavaParser$TypeListContext) -> enterTypeList
    void exitTypeList(parser.java.JavaParser$TypeListContext) -> exitTypeList
    void enterTypeType(parser.java.JavaParser$TypeTypeContext) -> enterTypeType
    void exitTypeType(parser.java.JavaParser$TypeTypeContext) -> exitTypeType
    void enterPrimitiveType(parser.java.JavaParser$PrimitiveTypeContext) -> enterPrimitiveType
    void exitPrimitiveType(parser.java.JavaParser$PrimitiveTypeContext) -> exitPrimitiveType
    void enterTypeArguments(parser.java.JavaParser$TypeArgumentsContext) -> enterTypeArguments
    void exitTypeArguments(parser.java.JavaParser$TypeArgumentsContext) -> exitTypeArguments
    void enterSuperSuffix(parser.java.JavaParser$SuperSuffixContext) -> enterSuperSuffix
    void exitSuperSuffix(parser.java.JavaParser$SuperSuffixContext) -> exitSuperSuffix
    void enterExplicitGenericInvocationSuffix(parser.java.JavaParser$ExplicitGenericInvocationSuffixContext) -> enterExplicitGenericInvocationSuffix
    void exitExplicitGenericInvocationSuffix(parser.java.JavaParser$ExplicitGenericInvocationSuffixContext) -> exitExplicitGenericInvocationSuffix
    void enterArguments(parser.java.JavaParser$ArgumentsContext) -> enterArguments
    void exitArguments(parser.java.JavaParser$ArgumentsContext) -> exitArguments
parser.java.JavaParserVisitor -> parser.java.JavaParserVisitor:
    java.lang.Object visitCompilationUnit(parser.java.JavaParser$CompilationUnitContext) -> visitCompilationUnit
    java.lang.Object visitPackageDeclaration(parser.java.JavaParser$PackageDeclarationContext) -> visitPackageDeclaration
    java.lang.Object visitImportDeclaration(parser.java.JavaParser$ImportDeclarationContext) -> visitImportDeclaration
    java.lang.Object visitTypeDeclaration(parser.java.JavaParser$TypeDeclarationContext) -> visitTypeDeclaration
    java.lang.Object visitModifier(parser.java.JavaParser$ModifierContext) -> visitModifier
    java.lang.Object visitClassOrInterfaceModifier(parser.java.JavaParser$ClassOrInterfaceModifierContext) -> visitClassOrInterfaceModifier
    java.lang.Object visitVariableModifier(parser.java.JavaParser$VariableModifierContext) -> visitVariableModifier
    java.lang.Object visitClassDeclaration(parser.java.JavaParser$ClassDeclarationContext) -> visitClassDeclaration
    java.lang.Object visitTypeParameters(parser.java.JavaParser$TypeParametersContext) -> visitTypeParameters
    java.lang.Object visitTypeParameter(parser.java.JavaParser$TypeParameterContext) -> visitTypeParameter
    java.lang.Object visitTypeBound(parser.java.JavaParser$TypeBoundContext) -> visitTypeBound
    java.lang.Object visitEnumDeclaration(parser.java.JavaParser$EnumDeclarationContext) -> visitEnumDeclaration
    java.lang.Object visitEnumConstants(parser.java.JavaParser$EnumConstantsContext) -> visitEnumConstants
    java.lang.Object visitEnumConstant(parser.java.JavaParser$EnumConstantContext) -> visitEnumConstant
    java.lang.Object visitEnumBodyDeclarations(parser.java.JavaParser$EnumBodyDeclarationsContext) -> visitEnumBodyDeclarations
    java.lang.Object visitInterfaceDeclaration(parser.java.JavaParser$InterfaceDeclarationContext) -> visitInterfaceDeclaration
    java.lang.Object visitClassBody(parser.java.JavaParser$ClassBodyContext) -> visitClassBody
    java.lang.Object visitInterfaceBody(parser.java.JavaParser$InterfaceBodyContext) -> visitInterfaceBody
    java.lang.Object visitClassBodyDeclaration(parser.java.JavaParser$ClassBodyDeclarationContext) -> visitClassBodyDeclaration
    java.lang.Object visitMemberDeclaration(parser.java.JavaParser$MemberDeclarationContext) -> visitMemberDeclaration
    java.lang.Object visitMethodDeclaration(parser.java.JavaParser$MethodDeclarationContext) -> visitMethodDeclaration
    java.lang.Object visitMethodBody(parser.java.JavaParser$MethodBodyContext) -> visitMethodBody
    java.lang.Object visitTypeTypeOrVoid(parser.java.JavaParser$TypeTypeOrVoidContext) -> visitTypeTypeOrVoid
    java.lang.Object visitGenericMethodDeclaration(parser.java.JavaParser$GenericMethodDeclarationContext) -> visitGenericMethodDeclaration
    java.lang.Object visitGenericConstructorDeclaration(parser.java.JavaParser$GenericConstructorDeclarationContext) -> visitGenericConstructorDeclaration
    java.lang.Object visitConstructorDeclaration(parser.java.JavaParser$ConstructorDeclarationContext) -> visitConstructorDeclaration
    java.lang.Object visitFieldDeclaration(parser.java.JavaParser$FieldDeclarationContext) -> visitFieldDeclaration
    java.lang.Object visitInterfaceBodyDeclaration(parser.java.JavaParser$InterfaceBodyDeclarationContext) -> visitInterfaceBodyDeclaration
    java.lang.Object visitInterfaceMemberDeclaration(parser.java.JavaParser$InterfaceMemberDeclarationContext) -> visitInterfaceMemberDeclaration
    java.lang.Object visitConstDeclaration(parser.java.JavaParser$ConstDeclarationContext) -> visitConstDeclaration
    java.lang.Object visitConstantDeclarator(parser.java.JavaParser$ConstantDeclaratorContext) -> visitConstantDeclarator
    java.lang.Object visitInterfaceMethodDeclaration(parser.java.JavaParser$InterfaceMethodDeclarationContext) -> visitInterfaceMethodDeclaration
    java.lang.Object visitInterfaceMethodModifier(parser.java.JavaParser$InterfaceMethodModifierContext) -> visitInterfaceMethodModifier
    java.lang.Object visitGenericInterfaceMethodDeclaration(parser.java.JavaParser$GenericInterfaceMethodDeclarationContext) -> visitGenericInterfaceMethodDeclaration
    java.lang.Object visitVariableDeclarators(parser.java.JavaParser$VariableDeclaratorsContext) -> visitVariableDeclarators
    java.lang.Object visitVariableDeclarator(parser.java.JavaParser$VariableDeclaratorContext) -> visitVariableDeclarator
    java.lang.Object visitVariableDeclaratorId(parser.java.JavaParser$VariableDeclaratorIdContext) -> visitVariableDeclaratorId
    java.lang.Object visitVariableInitializer(parser.java.JavaParser$VariableInitializerContext) -> visitVariableInitializer
    java.lang.Object visitArrayInitializer(parser.java.JavaParser$ArrayInitializerContext) -> visitArrayInitializer
    java.lang.Object visitClassOrInterfaceType(parser.java.JavaParser$ClassOrInterfaceTypeContext) -> visitClassOrInterfaceType
    java.lang.Object visitTypeArgument(parser.java.JavaParser$TypeArgumentContext) -> visitTypeArgument
    java.lang.Object visitQualifiedNameList(parser.java.JavaParser$QualifiedNameListContext) -> visitQualifiedNameList
    java.lang.Object visitFormalParameters(parser.java.JavaParser$FormalParametersContext) -> visitFormalParameters
    java.lang.Object visitFormalParameterList(parser.java.JavaParser$FormalParameterListContext) -> visitFormalParameterList
    java.lang.Object visitFormalParameter(parser.java.JavaParser$FormalParameterContext) -> visitFormalParameter
    java.lang.Object visitLastFormalParameter(parser.java.JavaParser$LastFormalParameterContext) -> visitLastFormalParameter
    java.lang.Object visitQualifiedName(parser.java.JavaParser$QualifiedNameContext) -> visitQualifiedName
    java.lang.Object visitLiteral(parser.java.JavaParser$LiteralContext) -> visitLiteral
    java.lang.Object visitIntegerLiteral(parser.java.JavaParser$IntegerLiteralContext) -> visitIntegerLiteral
    java.lang.Object visitFloatLiteral(parser.java.JavaParser$FloatLiteralContext) -> visitFloatLiteral
    java.lang.Object visitAnnotation(parser.java.JavaParser$AnnotationContext) -> visitAnnotation
    java.lang.Object visitElementValuePairs(parser.java.JavaParser$ElementValuePairsContext) -> visitElementValuePairs
    java.lang.Object visitElementValuePair(parser.java.JavaParser$ElementValuePairContext) -> visitElementValuePair
    java.lang.Object visitElementValue(parser.java.JavaParser$ElementValueContext) -> visitElementValue
    java.lang.Object visitElementValueArrayInitializer(parser.java.JavaParser$ElementValueArrayInitializerContext) -> visitElementValueArrayInitializer
    java.lang.Object visitAnnotationTypeDeclaration(parser.java.JavaParser$AnnotationTypeDeclarationContext) -> visitAnnotationTypeDeclaration
    java.lang.Object visitAnnotationTypeBody(parser.java.JavaParser$AnnotationTypeBodyContext) -> visitAnnotationTypeBody
    java.lang.Object visitAnnotationTypeElementDeclaration(parser.java.JavaParser$AnnotationTypeElementDeclarationContext) -> visitAnnotationTypeElementDeclaration
    java.lang.Object visitAnnotationTypeElementRest(parser.java.JavaParser$AnnotationTypeElementRestContext) -> visitAnnotationTypeElementRest
    java.lang.Object visitAnnotationMethodOrConstantRest(parser.java.JavaParser$AnnotationMethodOrConstantRestContext) -> visitAnnotationMethodOrConstantRest
    java.lang.Object visitAnnotationMethodRest(parser.java.JavaParser$AnnotationMethodRestContext) -> visitAnnotationMethodRest
    java.lang.Object visitAnnotationConstantRest(parser.java.JavaParser$AnnotationConstantRestContext) -> visitAnnotationConstantRest
    java.lang.Object visitDefaultValue(parser.java.JavaParser$DefaultValueContext) -> visitDefaultValue
    java.lang.Object visitBlock(parser.java.JavaParser$BlockContext) -> visitBlock
    java.lang.Object visitBlockStatement(parser.java.JavaParser$BlockStatementContext) -> visitBlockStatement
    java.lang.Object visitLocalVariableDeclaration(parser.java.JavaParser$LocalVariableDeclarationContext) -> visitLocalVariableDeclaration
    java.lang.Object visitLocalTypeDeclaration(parser.java.JavaParser$LocalTypeDeclarationContext) -> visitLocalTypeDeclaration
    java.lang.Object visitStmtCase0(parser.java.JavaParser$StmtCase0Context) -> visitStmtCase0
    java.lang.Object visitStmtCase1(parser.java.JavaParser$StmtCase1Context) -> visitStmtCase1
    java.lang.Object visitStmtCase2(parser.java.JavaParser$StmtCase2Context) -> visitStmtCase2
    java.lang.Object visitStmtCase3(parser.java.JavaParser$StmtCase3Context) -> visitStmtCase3
    java.lang.Object visitStmtCase4(parser.java.JavaParser$StmtCase4Context) -> visitStmtCase4
    java.lang.Object visitStmtCase5(parser.java.JavaParser$StmtCase5Context) -> visitStmtCase5
    java.lang.Object visitStmtCase6(parser.java.JavaParser$StmtCase6Context) -> visitStmtCase6
    java.lang.Object visitStmtCase7(parser.java.JavaParser$StmtCase7Context) -> visitStmtCase7
    java.lang.Object visitStmtCase8(parser.java.JavaParser$StmtCase8Context) -> visitStmtCase8
    java.lang.Object visitStmtCase9(parser.java.JavaParser$StmtCase9Context) -> visitStmtCase9
    java.lang.Object visitStmtCase10(parser.java.JavaParser$StmtCase10Context) -> visitStmtCase10
    java.lang.Object visitStmtCase11(parser.java.JavaParser$StmtCase11Context) -> visitStmtCase11
    java.lang.Object visitStmtCase12(parser.java.JavaParser$StmtCase12Context) -> visitStmtCase12
    java.lang.Object visitStmtCase13(parser.java.JavaParser$StmtCase13Context) -> visitStmtCase13
    java.lang.Object visitStmtCase14(parser.java.JavaParser$StmtCase14Context) -> visitStmtCase14
    java.lang.Object visitStmtCase15(parser.java.JavaParser$StmtCase15Context) -> visitStmtCase15
    java.lang.Object visitStmtCase16(parser.java.JavaParser$StmtCase16Context) -> visitStmtCase16
    java.lang.Object visitCatchClause(parser.java.JavaParser$CatchClauseContext) -> visitCatchClause
    java.lang.Object visitCatchType(parser.java.JavaParser$CatchTypeContext) -> visitCatchType
    java.lang.Object visitFinallyBlock(parser.java.JavaParser$FinallyBlockContext) -> visitFinallyBlock
    java.lang.Object visitResourceSpecification(parser.java.JavaParser$ResourceSpecificationContext) -> visitResourceSpecification
    java.lang.Object visitResources(parser.java.JavaParser$ResourcesContext) -> visitResources
    java.lang.Object visitResource(parser.java.JavaParser$ResourceContext) -> visitResource
    java.lang.Object visitSwitchBlockStatementGroup(parser.java.JavaParser$SwitchBlockStatementGroupContext) -> visitSwitchBlockStatementGroup
    java.lang.Object visitSwitchLabel(parser.java.JavaParser$SwitchLabelContext) -> visitSwitchLabel
    java.lang.Object visitForControl(parser.java.JavaParser$ForControlContext) -> visitForControl
    java.lang.Object visitForInit(parser.java.JavaParser$ForInitContext) -> visitForInit
    java.lang.Object visitEnhancedForControl(parser.java.JavaParser$EnhancedForControlContext) -> visitEnhancedForControl
    java.lang.Object visitParExpression(parser.java.JavaParser$ParExpressionContext) -> visitParExpression
    java.lang.Object visitExpressionList(parser.java.JavaParser$ExpressionListContext) -> visitExpressionList
    java.lang.Object visitMethodCall(parser.java.JavaParser$MethodCallContext) -> visitMethodCall
    java.lang.Object visitExprCase15(parser.java.JavaParser$ExprCase15Context) -> visitExprCase15
    java.lang.Object visitExprCase14(parser.java.JavaParser$ExprCase14Context) -> visitExprCase14
    java.lang.Object visitExprCase17(parser.java.JavaParser$ExprCase17Context) -> visitExprCase17
    java.lang.Object visitExprCase16(parser.java.JavaParser$ExprCase16Context) -> visitExprCase16
    java.lang.Object visitExprCase19(parser.java.JavaParser$ExprCase19Context) -> visitExprCase19
    java.lang.Object visitExprCase18(parser.java.JavaParser$ExprCase18Context) -> visitExprCase18
    java.lang.Object visitExprCase11(parser.java.JavaParser$ExprCase11Context) -> visitExprCase11
    java.lang.Object visitExprCase10(parser.java.JavaParser$ExprCase10Context) -> visitExprCase10
    java.lang.Object visitExprCase13(parser.java.JavaParser$ExprCase13Context) -> visitExprCase13
    java.lang.Object visitExprCase12(parser.java.JavaParser$ExprCase12Context) -> visitExprCase12
    java.lang.Object visitExprCase2(parser.java.JavaParser$ExprCase2Context) -> visitExprCase2
    java.lang.Object visitExprCase1(parser.java.JavaParser$ExprCase1Context) -> visitExprCase1
    java.lang.Object visitExprCase4(parser.java.JavaParser$ExprCase4Context) -> visitExprCase4
    java.lang.Object visitExprCase3(parser.java.JavaParser$ExprCase3Context) -> visitExprCase3
    java.lang.Object visitExprCase0(parser.java.JavaParser$ExprCase0Context) -> visitExprCase0
    java.lang.Object visitExprCase25(parser.java.JavaParser$ExprCase25Context) -> visitExprCase25
    java.lang.Object visitExprCase9(parser.java.JavaParser$ExprCase9Context) -> visitExprCase9
    java.lang.Object visitExprCase20(parser.java.JavaParser$ExprCase20Context) -> visitExprCase20
    java.lang.Object visitExprCase22(parser.java.JavaParser$ExprCase22Context) -> visitExprCase22
    java.lang.Object visitExprCase6(parser.java.JavaParser$ExprCase6Context) -> visitExprCase6
    java.lang.Object visitExprCase5(parser.java.JavaParser$ExprCase5Context) -> visitExprCase5
    java.lang.Object visitExprCase21(parser.java.JavaParser$ExprCase21Context) -> visitExprCase21
    java.lang.Object visitExprCase8(parser.java.JavaParser$ExprCase8Context) -> visitExprCase8
    java.lang.Object visitExprCase24(parser.java.JavaParser$ExprCase24Context) -> visitExprCase24
    java.lang.Object visitExprCase7(parser.java.JavaParser$ExprCase7Context) -> visitExprCase7
    java.lang.Object visitExprCase23(parser.java.JavaParser$ExprCase23Context) -> visitExprCase23
    java.lang.Object visitLambdaExpression(parser.java.JavaParser$LambdaExpressionContext) -> visitLambdaExpression
    java.lang.Object visitLambdaParameters(parser.java.JavaParser$LambdaParametersContext) -> visitLambdaParameters
    java.lang.Object visitLambdaBody(parser.java.JavaParser$LambdaBodyContext) -> visitLambdaBody
    java.lang.Object visitPrimary(parser.java.JavaParser$PrimaryContext) -> visitPrimary
    java.lang.Object visitClassType(parser.java.JavaParser$ClassTypeContext) -> visitClassType
    java.lang.Object visitCreator(parser.java.JavaParser$CreatorContext) -> visitCreator
    java.lang.Object visitCreatedName(parser.java.JavaParser$CreatedNameContext) -> visitCreatedName
    java.lang.Object visitInnerCreator(parser.java.JavaParser$InnerCreatorContext) -> visitInnerCreator
    java.lang.Object visitArrayCreatorRest(parser.java.JavaParser$ArrayCreatorRestContext) -> visitArrayCreatorRest
    java.lang.Object visitClassCreatorRest(parser.java.JavaParser$ClassCreatorRestContext) -> visitClassCreatorRest
    java.lang.Object visitExplicitGenericInvocation(parser.java.JavaParser$ExplicitGenericInvocationContext) -> visitExplicitGenericInvocation
    java.lang.Object visitTypeArgumentsOrDiamond(parser.java.JavaParser$TypeArgumentsOrDiamondContext) -> visitTypeArgumentsOrDiamond
    java.lang.Object visitNonWildcardTypeArgumentsOrDiamond(parser.java.JavaParser$NonWildcardTypeArgumentsOrDiamondContext) -> visitNonWildcardTypeArgumentsOrDiamond
    java.lang.Object visitNonWildcardTypeArguments(parser.java.JavaParser$NonWildcardTypeArgumentsContext) -> visitNonWildcardTypeArguments
    java.lang.Object visitTypeList(parser.java.JavaParser$TypeListContext) -> visitTypeList
    java.lang.Object visitTypeType(parser.java.JavaParser$TypeTypeContext) -> visitTypeType
    java.lang.Object visitPrimitiveType(parser.java.JavaParser$PrimitiveTypeContext) -> visitPrimitiveType
    java.lang.Object visitTypeArguments(parser.java.JavaParser$TypeArgumentsContext) -> visitTypeArguments
    java.lang.Object visitSuperSuffix(parser.java.JavaParser$SuperSuffixContext) -> visitSuperSuffix
    java.lang.Object visitExplicitGenericInvocationSuffix(parser.java.JavaParser$ExplicitGenericInvocationSuffixContext) -> visitExplicitGenericInvocationSuffix
    java.lang.Object visitArguments(parser.java.JavaParser$ArgumentsContext) -> visitArguments
parser.objc.ObjectiveCLexer -> parser.objc.ObjectiveCLexer:
    org.antlr.v4.runtime.dfa.DFA[] _decisionToDFA -> _decisionToDFA
    org.antlr.v4.runtime.atn.PredictionContextCache _sharedContextCache -> _sharedContextCache
    int AUTO -> AUTO
    int BREAK -> BREAK
    int CASE -> CASE
    int CHAR -> CHAR
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DEFAULT -> DEFAULT
    int DO -> DO
    int DOUBLE -> DOUBLE
    int ELSE -> ELSE
    int ENUM -> ENUM
    int EXTERN -> EXTERN
    int FLOAT -> FLOAT
    int FOR -> FOR
    int GOTO -> GOTO
    int IF -> IF
    int INLINE -> INLINE
    int INT -> INT
    int LONG -> LONG
    int REGISTER -> REGISTER
    int RESTRICT -> RESTRICT
    int RETURN -> RETURN
    int SHORT -> SHORT
    int SIGNED -> SIGNED
    int SIZEOF -> SIZEOF
    int STATIC -> STATIC
    int STRUCT -> STRUCT
    int SWITCH -> SWITCH
    int TYPEDEF -> TYPEDEF
    int UNION -> UNION
    int UNSIGNED -> UNSIGNED
    int VOID -> VOID
    int VOLATILE -> VOLATILE
    int WHILE -> WHILE
    int BOOL_ -> BOOL_
    int COMPLEX -> COMPLEX
    int IMAGINERY -> IMAGINERY
    int TRUE -> TRUE
    int FALSE -> FALSE
    int BOOL -> BOOL
    int Class -> Class
    int BYCOPY -> BYCOPY
    int BYREF -> BYREF
    int ID -> ID
    int IMP -> IMP
    int IN -> IN
    int INOUT -> INOUT
    int NIL -> NIL
    int NO -> NO
    int NULL -> NULL
    int ONEWAY -> ONEWAY
    int OUT -> OUT
    int PROTOCOL_ -> PROTOCOL_
    int SEL -> SEL
    int SELF -> SELF
    int SUPER -> SUPER
    int YES -> YES
    int AUTORELEASEPOOL -> AUTORELEASEPOOL
    int CATCH -> CATCH
    int CLASS -> CLASS
    int DYNAMIC -> DYNAMIC
    int ENCODE -> ENCODE
    int END -> END
    int FINALLY -> FINALLY
    int IMPLEMENTATION -> IMPLEMENTATION
    int INTERFACE -> INTERFACE
    int IMPORT -> IMPORT
    int PACKAGE -> PACKAGE
    int PROTOCOL -> PROTOCOL
    int OPTIONAL -> OPTIONAL
    int PRIVATE -> PRIVATE
    int PROPERTY -> PROPERTY
    int PROTECTED -> PROTECTED
    int PUBLIC -> PUBLIC
    int REQUIRED -> REQUIRED
    int SELECTOR -> SELECTOR
    int SYNCHRONIZED -> SYNCHRONIZED
    int SYNTHESIZE -> SYNTHESIZE
    int THROW -> THROW
    int TRY -> TRY
    int ATOMIC -> ATOMIC
    int NONATOMIC -> NONATOMIC
    int RETAIN -> RETAIN
    int ATTRIBUTE -> ATTRIBUTE
    int AUTORELEASING_QUALIFIER -> AUTORELEASING_QUALIFIER
    int BLOCK -> BLOCK
    int BRIDGE -> BRIDGE
    int BRIDGE_RETAINED -> BRIDGE_RETAINED
    int BRIDGE_TRANSFER -> BRIDGE_TRANSFER
    int COVARIANT -> COVARIANT
    int CONTRAVARIANT -> CONTRAVARIANT
    int DEPRECATED -> DEPRECATED
    int KINDOF -> KINDOF
    int STRONG_QUALIFIER -> STRONG_QUALIFIER
    int TYPEOF -> TYPEOF
    int UNSAFE_UNRETAINED_QUALIFIER -> UNSAFE_UNRETAINED_QUALIFIER
    int UNUSED -> UNUSED
    int WEAK_QUALIFIER -> WEAK_QUALIFIER
    int NULL_UNSPECIFIED -> NULL_UNSPECIFIED
    int NULLABLE -> NULLABLE
    int NONNULL -> NONNULL
    int NULL_RESETTABLE -> NULL_RESETTABLE
    int NS_INLINE -> NS_INLINE
    int NS_ENUM -> NS_ENUM
    int NS_OPTIONS -> NS_OPTIONS
    int ASSIGN -> ASSIGN
    int COPY -> COPY
    int GETTER -> GETTER
    int SETTER -> SETTER
    int STRONG -> STRONG
    int READONLY -> READONLY
    int READWRITE -> READWRITE
    int WEAK -> WEAK
    int UNSAFE_UNRETAINED -> UNSAFE_UNRETAINED
    int IB_OUTLET -> IB_OUTLET
    int IB_OUTLET_COLLECTION -> IB_OUTLET_COLLECTION
    int IB_INSPECTABLE -> IB_INSPECTABLE
    int IB_DESIGNABLE -> IB_DESIGNABLE
    int NS_ASSUME_NONNULL_BEGIN -> NS_ASSUME_NONNULL_BEGIN
    int NS_ASSUME_NONNULL_END -> NS_ASSUME_NONNULL_END
    int EXTERN_SUFFIX -> EXTERN_SUFFIX
    int IOS_SUFFIX -> IOS_SUFFIX
    int MAC_SUFFIX -> MAC_SUFFIX
    int TVOS_PROHIBITED -> TVOS_PROHIBITED
    int IDENTIFIER -> IDENTIFIER
    int LP -> LP
    int RP -> RP
    int LBRACE -> LBRACE
    int RBRACE -> RBRACE
    int LBRACK -> LBRACK
    int RBRACK -> RBRACK
    int SEMI -> SEMI
    int COMMA -> COMMA
    int DOT -> DOT
    int STRUCTACCESS -> STRUCTACCESS
    int AT -> AT
    int ASSIGNMENT -> ASSIGNMENT
    int GT -> GT
    int LT -> LT
    int BANG -> BANG
    int TILDE -> TILDE
    int QUESTION -> QUESTION
    int COLON -> COLON
    int EQUAL -> EQUAL
    int LE -> LE
    int GE -> GE
    int NOTEQUAL -> NOTEQUAL
    int AND -> AND
    int OR -> OR
    int INC -> INC
    int DEC -> DEC
    int ADD -> ADD
    int SUB -> SUB
    int MUL -> MUL
    int DIV -> DIV
    int BITAND -> BITAND
    int BITOR -> BITOR
    int BITXOR -> BITXOR
    int MOD -> MOD
    int ADD_ASSIGN -> ADD_ASSIGN
    int SUB_ASSIGN -> SUB_ASSIGN
    int MUL_ASSIGN -> MUL_ASSIGN
    int DIV_ASSIGN -> DIV_ASSIGN
    int AND_ASSIGN -> AND_ASSIGN
    int OR_ASSIGN -> OR_ASSIGN
    int XOR_ASSIGN -> XOR_ASSIGN
    int MOD_ASSIGN -> MOD_ASSIGN
    int LSHIFT_ASSIGN -> LSHIFT_ASSIGN
    int RSHIFT_ASSIGN -> RSHIFT_ASSIGN
    int ELIPSIS -> ELIPSIS
    int CHARACTER_LITERAL -> CHARACTER_LITERAL
    int STRING_START -> STRING_START
    int HEX_LITERAL -> HEX_LITERAL
    int OCTAL_LITERAL -> OCTAL_LITERAL
    int BINARY_LITERAL -> BINARY_LITERAL
    int DECIMAL_LITERAL -> DECIMAL_LITERAL
    int FLOATING_POINT_LITERAL -> FLOATING_POINT_LITERAL
    int WS -> WS
    int MULTI_COMMENT -> MULTI_COMMENT
    int SINGLE_COMMENT -> SINGLE_COMMENT
    int BACKSLASH -> BACKSLASH
    int SHARP -> SHARP
    int STRING_NEWLINE -> STRING_NEWLINE
    int STRING_END -> STRING_END
    int STRING_VALUE -> STRING_VALUE
    int DIRECTIVE_IMPORT -> DIRECTIVE_IMPORT
    int DIRECTIVE_INCLUDE -> DIRECTIVE_INCLUDE
    int DIRECTIVE_PRAGMA -> DIRECTIVE_PRAGMA
    int DIRECTIVE_DEFINE -> DIRECTIVE_DEFINE
    int DIRECTIVE_DEFINED -> DIRECTIVE_DEFINED
    int DIRECTIVE_IF -> DIRECTIVE_IF
    int DIRECTIVE_ELIF -> DIRECTIVE_ELIF
    int DIRECTIVE_ELSE -> DIRECTIVE_ELSE
    int DIRECTIVE_UNDEF -> DIRECTIVE_UNDEF
    int DIRECTIVE_IFDEF -> DIRECTIVE_IFDEF
    int DIRECTIVE_IFNDEF -> DIRECTIVE_IFNDEF
    int DIRECTIVE_ENDIF -> DIRECTIVE_ENDIF
    int DIRECTIVE_TRUE -> DIRECTIVE_TRUE
    int DIRECTIVE_FALSE -> DIRECTIVE_FALSE
    int DIRECTIVE_ERROR -> DIRECTIVE_ERROR
    int DIRECTIVE_WARNING -> DIRECTIVE_WARNING
    int DIRECTIVE_BANG -> DIRECTIVE_BANG
    int DIRECTIVE_LP -> DIRECTIVE_LP
    int DIRECTIVE_RP -> DIRECTIVE_RP
    int DIRECTIVE_EQUAL -> DIRECTIVE_EQUAL
    int DIRECTIVE_NOTEQUAL -> DIRECTIVE_NOTEQUAL
    int DIRECTIVE_AND -> DIRECTIVE_AND
    int DIRECTIVE_OR -> DIRECTIVE_OR
    int DIRECTIVE_LT -> DIRECTIVE_LT
    int DIRECTIVE_GT -> DIRECTIVE_GT
    int DIRECTIVE_LE -> DIRECTIVE_LE
    int DIRECTIVE_GE -> DIRECTIVE_GE
    int DIRECTIVE_STRING -> DIRECTIVE_STRING
    int DIRECTIVE_ID -> DIRECTIVE_ID
    int DIRECTIVE_DECIMAL_LITERAL -> DIRECTIVE_DECIMAL_LITERAL
    int DIRECTIVE_FLOAT -> DIRECTIVE_FLOAT
    int DIRECTIVE_NEWLINE -> DIRECTIVE_NEWLINE
    int DIRECTIVE_MULTI_COMMENT -> DIRECTIVE_MULTI_COMMENT
    int DIRECTIVE_SINGLE_COMMENT -> DIRECTIVE_SINGLE_COMMENT
    int DIRECTIVE_BACKSLASH_NEWLINE -> DIRECTIVE_BACKSLASH_NEWLINE
    int DIRECTIVE_TEXT_NEWLINE -> DIRECTIVE_TEXT_NEWLINE
    int DIRECTIVE_TEXT -> DIRECTIVE_TEXT
    int COMMENTS_CHANNEL -> COMMENTS_CHANNEL
    int DIRECTIVE_CHANNEL -> DIRECTIVE_CHANNEL
    int IGNORED_MACROS -> IGNORED_MACROS
    int STRING_MODE -> STRING_MODE
    int DIRECTIVE_MODE -> DIRECTIVE_MODE
    int DEFINE -> DEFINE
    int DIRECTIVE_TEXT_MODE -> DIRECTIVE_TEXT_MODE
    java.lang.String[] channelNames -> channelNames
    java.lang.String[] modeNames -> modeNames
    java.lang.String[] ruleNames -> ruleNames
    java.lang.String[] _LITERAL_NAMES -> _LITERAL_NAMES
    java.lang.String[] _SYMBOLIC_NAMES -> _SYMBOLIC_NAMES
    org.antlr.v4.runtime.Vocabulary VOCABULARY -> VOCABULARY
    java.lang.String[] tokenNames -> tokenNames
    java.lang.String _serializedATN -> _serializedATN
    org.antlr.v4.runtime.atn.ATN _ATN -> _ATN
    java.lang.String[] makeRuleNames() -> makeRuleNames
    java.lang.String[] makeLiteralNames() -> makeLiteralNames
    java.lang.String[] makeSymbolicNames() -> makeSymbolicNames
    java.lang.String[] getTokenNames() -> getTokenNames
    org.antlr.v4.runtime.Vocabulary getVocabulary() -> getVocabulary
    void <init>(org.antlr.v4.runtime.CharStream) -> <init>
    java.lang.String getGrammarFileName() -> getGrammarFileName
    java.lang.String[] getRuleNames() -> getRuleNames
    java.lang.String getSerializedATN() -> getSerializedATN
    java.lang.String[] getChannelNames() -> getChannelNames
    java.lang.String[] getModeNames() -> getModeNames
    org.antlr.v4.runtime.atn.ATN getATN() -> getATN
    void <clinit>() -> <clinit>
parser.objc.ObjectiveCParser -> parser.objc.ObjectiveCParser:
    org.antlr.v4.runtime.dfa.DFA[] _decisionToDFA -> _decisionToDFA
    org.antlr.v4.runtime.atn.PredictionContextCache _sharedContextCache -> _sharedContextCache
    int AUTO -> AUTO
    int BREAK -> BREAK
    int CASE -> CASE
    int CHAR -> CHAR
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DEFAULT -> DEFAULT
    int DO -> DO
    int DOUBLE -> DOUBLE
    int ELSE -> ELSE
    int ENUM -> ENUM
    int EXTERN -> EXTERN
    int FLOAT -> FLOAT
    int FOR -> FOR
    int GOTO -> GOTO
    int IF -> IF
    int INLINE -> INLINE
    int INT -> INT
    int LONG -> LONG
    int REGISTER -> REGISTER
    int RESTRICT -> RESTRICT
    int RETURN -> RETURN
    int SHORT -> SHORT
    int SIGNED -> SIGNED
    int SIZEOF -> SIZEOF
    int STATIC -> STATIC
    int STRUCT -> STRUCT
    int SWITCH -> SWITCH
    int TYPEDEF -> TYPEDEF
    int UNION -> UNION
    int UNSIGNED -> UNSIGNED
    int VOID -> VOID
    int VOLATILE -> VOLATILE
    int WHILE -> WHILE
    int BOOL_ -> BOOL_
    int COMPLEX -> COMPLEX
    int IMAGINERY -> IMAGINERY
    int TRUE -> TRUE
    int FALSE -> FALSE
    int BOOL -> BOOL
    int Class -> Class
    int BYCOPY -> BYCOPY
    int BYREF -> BYREF
    int ID -> ID
    int IMP -> IMP
    int IN -> IN
    int INOUT -> INOUT
    int NIL -> NIL
    int NO -> NO
    int NULL -> NULL
    int ONEWAY -> ONEWAY
    int OUT -> OUT
    int PROTOCOL_ -> PROTOCOL_
    int SEL -> SEL
    int SELF -> SELF
    int SUPER -> SUPER
    int YES -> YES
    int AUTORELEASEPOOL -> AUTORELEASEPOOL
    int CATCH -> CATCH
    int CLASS -> CLASS
    int DYNAMIC -> DYNAMIC
    int ENCODE -> ENCODE
    int END -> END
    int FINALLY -> FINALLY
    int IMPLEMENTATION -> IMPLEMENTATION
    int INTERFACE -> INTERFACE
    int IMPORT -> IMPORT
    int PACKAGE -> PACKAGE
    int PROTOCOL -> PROTOCOL
    int OPTIONAL -> OPTIONAL
    int PRIVATE -> PRIVATE
    int PROPERTY -> PROPERTY
    int PROTECTED -> PROTECTED
    int PUBLIC -> PUBLIC
    int REQUIRED -> REQUIRED
    int SELECTOR -> SELECTOR
    int SYNCHRONIZED -> SYNCHRONIZED
    int SYNTHESIZE -> SYNTHESIZE
    int THROW -> THROW
    int TRY -> TRY
    int ATOMIC -> ATOMIC
    int NONATOMIC -> NONATOMIC
    int RETAIN -> RETAIN
    int ATTRIBUTE -> ATTRIBUTE
    int AUTORELEASING_QUALIFIER -> AUTORELEASING_QUALIFIER
    int BLOCK -> BLOCK
    int BRIDGE -> BRIDGE
    int BRIDGE_RETAINED -> BRIDGE_RETAINED
    int BRIDGE_TRANSFER -> BRIDGE_TRANSFER
    int COVARIANT -> COVARIANT
    int CONTRAVARIANT -> CONTRAVARIANT
    int DEPRECATED -> DEPRECATED
    int KINDOF -> KINDOF
    int STRONG_QUALIFIER -> STRONG_QUALIFIER
    int TYPEOF -> TYPEOF
    int UNSAFE_UNRETAINED_QUALIFIER -> UNSAFE_UNRETAINED_QUALIFIER
    int UNUSED -> UNUSED
    int WEAK_QUALIFIER -> WEAK_QUALIFIER
    int NULL_UNSPECIFIED -> NULL_UNSPECIFIED
    int NULLABLE -> NULLABLE
    int NONNULL -> NONNULL
    int NULL_RESETTABLE -> NULL_RESETTABLE
    int NS_INLINE -> NS_INLINE
    int NS_ENUM -> NS_ENUM
    int NS_OPTIONS -> NS_OPTIONS
    int ASSIGN -> ASSIGN
    int COPY -> COPY
    int GETTER -> GETTER
    int SETTER -> SETTER
    int STRONG -> STRONG
    int READONLY -> READONLY
    int READWRITE -> READWRITE
    int WEAK -> WEAK
    int UNSAFE_UNRETAINED -> UNSAFE_UNRETAINED
    int IB_OUTLET -> IB_OUTLET
    int IB_OUTLET_COLLECTION -> IB_OUTLET_COLLECTION
    int IB_INSPECTABLE -> IB_INSPECTABLE
    int IB_DESIGNABLE -> IB_DESIGNABLE
    int NS_ASSUME_NONNULL_BEGIN -> NS_ASSUME_NONNULL_BEGIN
    int NS_ASSUME_NONNULL_END -> NS_ASSUME_NONNULL_END
    int EXTERN_SUFFIX -> EXTERN_SUFFIX
    int IOS_SUFFIX -> IOS_SUFFIX
    int MAC_SUFFIX -> MAC_SUFFIX
    int TVOS_PROHIBITED -> TVOS_PROHIBITED
    int IDENTIFIER -> IDENTIFIER
    int LP -> LP
    int RP -> RP
    int LBRACE -> LBRACE
    int RBRACE -> RBRACE
    int LBRACK -> LBRACK
    int RBRACK -> RBRACK
    int SEMI -> SEMI
    int COMMA -> COMMA
    int DOT -> DOT
    int STRUCTACCESS -> STRUCTACCESS
    int AT -> AT
    int ASSIGNMENT -> ASSIGNMENT
    int GT -> GT
    int LT -> LT
    int BANG -> BANG
    int TILDE -> TILDE
    int QUESTION -> QUESTION
    int COLON -> COLON
    int EQUAL -> EQUAL
    int LE -> LE
    int GE -> GE
    int NOTEQUAL -> NOTEQUAL
    int AND -> AND
    int OR -> OR
    int INC -> INC
    int DEC -> DEC
    int ADD -> ADD
    int SUB -> SUB
    int MUL -> MUL
    int DIV -> DIV
    int BITAND -> BITAND
    int BITOR -> BITOR
    int BITXOR -> BITXOR
    int MOD -> MOD
    int ADD_ASSIGN -> ADD_ASSIGN
    int SUB_ASSIGN -> SUB_ASSIGN
    int MUL_ASSIGN -> MUL_ASSIGN
    int DIV_ASSIGN -> DIV_ASSIGN
    int AND_ASSIGN -> AND_ASSIGN
    int OR_ASSIGN -> OR_ASSIGN
    int XOR_ASSIGN -> XOR_ASSIGN
    int MOD_ASSIGN -> MOD_ASSIGN
    int LSHIFT_ASSIGN -> LSHIFT_ASSIGN
    int RSHIFT_ASSIGN -> RSHIFT_ASSIGN
    int ELIPSIS -> ELIPSIS
    int CHARACTER_LITERAL -> CHARACTER_LITERAL
    int STRING_START -> STRING_START
    int HEX_LITERAL -> HEX_LITERAL
    int OCTAL_LITERAL -> OCTAL_LITERAL
    int BINARY_LITERAL -> BINARY_LITERAL
    int DECIMAL_LITERAL -> DECIMAL_LITERAL
    int FLOATING_POINT_LITERAL -> FLOATING_POINT_LITERAL
    int WS -> WS
    int MULTI_COMMENT -> MULTI_COMMENT
    int SINGLE_COMMENT -> SINGLE_COMMENT
    int BACKSLASH -> BACKSLASH
    int SHARP -> SHARP
    int STRING_NEWLINE -> STRING_NEWLINE
    int STRING_END -> STRING_END
    int STRING_VALUE -> STRING_VALUE
    int DIRECTIVE_IMPORT -> DIRECTIVE_IMPORT
    int DIRECTIVE_INCLUDE -> DIRECTIVE_INCLUDE
    int DIRECTIVE_PRAGMA -> DIRECTIVE_PRAGMA
    int DIRECTIVE_DEFINE -> DIRECTIVE_DEFINE
    int DIRECTIVE_DEFINED -> DIRECTIVE_DEFINED
    int DIRECTIVE_IF -> DIRECTIVE_IF
    int DIRECTIVE_ELIF -> DIRECTIVE_ELIF
    int DIRECTIVE_ELSE -> DIRECTIVE_ELSE
    int DIRECTIVE_UNDEF -> DIRECTIVE_UNDEF
    int DIRECTIVE_IFDEF -> DIRECTIVE_IFDEF
    int DIRECTIVE_IFNDEF -> DIRECTIVE_IFNDEF
    int DIRECTIVE_ENDIF -> DIRECTIVE_ENDIF
    int DIRECTIVE_TRUE -> DIRECTIVE_TRUE
    int DIRECTIVE_FALSE -> DIRECTIVE_FALSE
    int DIRECTIVE_ERROR -> DIRECTIVE_ERROR
    int DIRECTIVE_WARNING -> DIRECTIVE_WARNING
    int DIRECTIVE_BANG -> DIRECTIVE_BANG
    int DIRECTIVE_LP -> DIRECTIVE_LP
    int DIRECTIVE_RP -> DIRECTIVE_RP
    int DIRECTIVE_EQUAL -> DIRECTIVE_EQUAL
    int DIRECTIVE_NOTEQUAL -> DIRECTIVE_NOTEQUAL
    int DIRECTIVE_AND -> DIRECTIVE_AND
    int DIRECTIVE_OR -> DIRECTIVE_OR
    int DIRECTIVE_LT -> DIRECTIVE_LT
    int DIRECTIVE_GT -> DIRECTIVE_GT
    int DIRECTIVE_LE -> DIRECTIVE_LE
    int DIRECTIVE_GE -> DIRECTIVE_GE
    int DIRECTIVE_STRING -> DIRECTIVE_STRING
    int DIRECTIVE_ID -> DIRECTIVE_ID
    int DIRECTIVE_DECIMAL_LITERAL -> DIRECTIVE_DECIMAL_LITERAL
    int DIRECTIVE_FLOAT -> DIRECTIVE_FLOAT
    int DIRECTIVE_NEWLINE -> DIRECTIVE_NEWLINE
    int DIRECTIVE_MULTI_COMMENT -> DIRECTIVE_MULTI_COMMENT
    int DIRECTIVE_SINGLE_COMMENT -> DIRECTIVE_SINGLE_COMMENT
    int DIRECTIVE_BACKSLASH_NEWLINE -> DIRECTIVE_BACKSLASH_NEWLINE
    int DIRECTIVE_TEXT_NEWLINE -> DIRECTIVE_TEXT_NEWLINE
    int DIRECTIVE_TEXT -> DIRECTIVE_TEXT
    int RULE_translationUnit -> RULE_translationUnit
    int RULE_topLevelDeclaration -> RULE_topLevelDeclaration
    int RULE_importDeclaration -> RULE_importDeclaration
    int RULE_classInterface -> RULE_classInterface
    int RULE_categoryInterface -> RULE_categoryInterface
    int RULE_classImplementation -> RULE_classImplementation
    int RULE_categoryImplementation -> RULE_categoryImplementation
    int RULE_genericTypeSpecifier -> RULE_genericTypeSpecifier
    int RULE_protocolDeclaration -> RULE_protocolDeclaration
    int RULE_protocolDeclarationSection -> RULE_protocolDeclarationSection
    int RULE_protocolDeclarationList -> RULE_protocolDeclarationList
    int RULE_classDeclarationList -> RULE_classDeclarationList
    int RULE_protocolList -> RULE_protocolList
    int RULE_propertyDeclaration -> RULE_propertyDeclaration
    int RULE_propertyAttributesList -> RULE_propertyAttributesList
    int RULE_propertyAttribute -> RULE_propertyAttribute
    int RULE_protocolName -> RULE_protocolName
    int RULE_instanceVariables -> RULE_instanceVariables
    int RULE_visibilitySection -> RULE_visibilitySection
    int RULE_accessModifier -> RULE_accessModifier
    int RULE_interfaceDeclarationList -> RULE_interfaceDeclarationList
    int RULE_classMethodDeclaration -> RULE_classMethodDeclaration
    int RULE_instanceMethodDeclaration -> RULE_instanceMethodDeclaration
    int RULE_methodDeclaration -> RULE_methodDeclaration
    int RULE_implementationDefinitionList -> RULE_implementationDefinitionList
    int RULE_classMethodDefinition -> RULE_classMethodDefinition
    int RULE_instanceMethodDefinition -> RULE_instanceMethodDefinition
    int RULE_methodDefinition -> RULE_methodDefinition
    int RULE_methodSelector -> RULE_methodSelector
    int RULE_keywordDeclarator -> RULE_keywordDeclarator
    int RULE_selector -> RULE_selector
    int RULE_methodType -> RULE_methodType
    int RULE_propertyImplementation -> RULE_propertyImplementation
    int RULE_propertySynthesizeList -> RULE_propertySynthesizeList
    int RULE_propertySynthesizeItem -> RULE_propertySynthesizeItem
    int RULE_blockType -> RULE_blockType
    int RULE_genericsSpecifier -> RULE_genericsSpecifier
    int RULE_typeSpecifierWithPrefixes -> RULE_typeSpecifierWithPrefixes
    int RULE_dictionaryExpression -> RULE_dictionaryExpression
    int RULE_dictionaryPair -> RULE_dictionaryPair
    int RULE_arrayExpression -> RULE_arrayExpression
    int RULE_boxExpression -> RULE_boxExpression
    int RULE_blockParameters -> RULE_blockParameters
    int RULE_typeVariableDeclaratorOrName -> RULE_typeVariableDeclaratorOrName
    int RULE_blockExpression -> RULE_blockExpression
    int RULE_messageExpression -> RULE_messageExpression
    int RULE_receiver -> RULE_receiver
    int RULE_messageSelector -> RULE_messageSelector
    int RULE_keywordArgument -> RULE_keywordArgument
    int RULE_keywordArgumentType -> RULE_keywordArgumentType
    int RULE_selectorExpression -> RULE_selectorExpression
    int RULE_selectorName -> RULE_selectorName
    int RULE_protocolExpression -> RULE_protocolExpression
    int RULE_encodeExpression -> RULE_encodeExpression
    int RULE_typeVariableDeclarator -> RULE_typeVariableDeclarator
    int RULE_throwStatement -> RULE_throwStatement
    int RULE_tryBlock -> RULE_tryBlock
    int RULE_catchStatement -> RULE_catchStatement
    int RULE_synchronizedStatement -> RULE_synchronizedStatement
    int RULE_autoreleaseStatement -> RULE_autoreleaseStatement
    int RULE_functionDeclaration -> RULE_functionDeclaration
    int RULE_functionDefinition -> RULE_functionDefinition
    int RULE_functionSignature -> RULE_functionSignature
    int RULE_attribute -> RULE_attribute
    int RULE_attributeName -> RULE_attributeName
    int RULE_attributeParameters -> RULE_attributeParameters
    int RULE_attributeParameterList -> RULE_attributeParameterList
    int RULE_attributeParameter -> RULE_attributeParameter
    int RULE_attributeParameterAssignment -> RULE_attributeParameterAssignment
    int RULE_declaration -> RULE_declaration
    int RULE_functionCallExpression -> RULE_functionCallExpression
    int RULE_enumDeclaration -> RULE_enumDeclaration
    int RULE_varDeclaration -> RULE_varDeclaration
    int RULE_typedefDeclaration -> RULE_typedefDeclaration
    int RULE_typeDeclaratorList -> RULE_typeDeclaratorList
    int RULE_typeDeclarator -> RULE_typeDeclarator
    int RULE_declarationSpecifiers -> RULE_declarationSpecifiers
    int RULE_attributeSpecifier -> RULE_attributeSpecifier
    int RULE_initDeclaratorList -> RULE_initDeclaratorList
    int RULE_initDeclarator -> RULE_initDeclarator
    int RULE_structOrUnionSpecifier -> RULE_structOrUnionSpecifier
    int RULE_fieldDeclaration -> RULE_fieldDeclaration
    int RULE_specifierQualifierList -> RULE_specifierQualifierList
    int RULE_ibOutletQualifier -> RULE_ibOutletQualifier
    int RULE_arcBehaviourSpecifier -> RULE_arcBehaviourSpecifier
    int RULE_nullabilitySpecifier -> RULE_nullabilitySpecifier
    int RULE_storageClassSpecifier -> RULE_storageClassSpecifier
    int RULE_typePrefix -> RULE_typePrefix
    int RULE_typeQualifier -> RULE_typeQualifier
    int RULE_protocolQualifier -> RULE_protocolQualifier
    int RULE_typeSpecifier -> RULE_typeSpecifier
    int RULE_typeofExpression -> RULE_typeofExpression
    int RULE_fieldDeclaratorList -> RULE_fieldDeclaratorList
    int RULE_fieldDeclarator -> RULE_fieldDeclarator
    int RULE_enumSpecifier -> RULE_enumSpecifier
    int RULE_enumeratorList -> RULE_enumeratorList
    int RULE_enumerator -> RULE_enumerator
    int RULE_enumeratorIdentifier -> RULE_enumeratorIdentifier
    int RULE_directDeclarator -> RULE_directDeclarator
    int RULE_declaratorSuffix -> RULE_declaratorSuffix
    int RULE_parameterList -> RULE_parameterList
    int RULE_pointer -> RULE_pointer
    int RULE_macro -> RULE_macro
    int RULE_arrayInitializer -> RULE_arrayInitializer
    int RULE_structInitializer -> RULE_structInitializer
    int RULE_initializerList -> RULE_initializerList
    int RULE_typeName -> RULE_typeName
    int RULE_abstractDeclarator -> RULE_abstractDeclarator
    int RULE_abstractDeclaratorSuffix -> RULE_abstractDeclaratorSuffix
    int RULE_parameterDeclarationList -> RULE_parameterDeclarationList
    int RULE_parameterDeclaration -> RULE_parameterDeclaration
    int RULE_declarator -> RULE_declarator
    int RULE_statement -> RULE_statement
    int RULE_labeledStatement -> RULE_labeledStatement
    int RULE_rangeExpression -> RULE_rangeExpression
    int RULE_compoundStatement -> RULE_compoundStatement
    int RULE_selectionStatement -> RULE_selectionStatement
    int RULE_switchStatement -> RULE_switchStatement
    int RULE_switchBlock -> RULE_switchBlock
    int RULE_switchSection -> RULE_switchSection
    int RULE_switchLabel -> RULE_switchLabel
    int RULE_iterationStatement -> RULE_iterationStatement
    int RULE_whileStatement -> RULE_whileStatement
    int RULE_doStatement -> RULE_doStatement
    int RULE_forStatement -> RULE_forStatement
    int RULE_forLoopInitializer -> RULE_forLoopInitializer
    int RULE_forInStatement -> RULE_forInStatement
    int RULE_jumpStatement -> RULE_jumpStatement
    int RULE_expressions -> RULE_expressions
    int RULE_expression -> RULE_expression
    int RULE_assignmentOperator -> RULE_assignmentOperator
    int RULE_castExpression -> RULE_castExpression
    int RULE_initializer -> RULE_initializer
    int RULE_constantExpression -> RULE_constantExpression
    int RULE_unaryExpression -> RULE_unaryExpression
    int RULE_unaryOperator -> RULE_unaryOperator
    int RULE_postfixExpression -> RULE_postfixExpression
    int RULE_postfix -> RULE_postfix
    int RULE_argumentExpressionList -> RULE_argumentExpressionList
    int RULE_argumentExpression -> RULE_argumentExpression
    int RULE_primaryExpression -> RULE_primaryExpression
    int RULE_constant -> RULE_constant
    int RULE_stringLiteral -> RULE_stringLiteral
    int RULE_identifier -> RULE_identifier
    java.lang.String[] ruleNames -> ruleNames
    java.lang.String[] _LITERAL_NAMES -> _LITERAL_NAMES
    java.lang.String[] _SYMBOLIC_NAMES -> _SYMBOLIC_NAMES
    org.antlr.v4.runtime.Vocabulary VOCABULARY -> VOCABULARY
    java.lang.String[] tokenNames -> tokenNames
    java.lang.String _serializedATN -> _serializedATN
    org.antlr.v4.runtime.atn.ATN _ATN -> _ATN
    java.lang.String[] makeRuleNames() -> makeRuleNames
    java.lang.String[] makeLiteralNames() -> makeLiteralNames
    java.lang.String[] makeSymbolicNames() -> makeSymbolicNames
    java.lang.String[] getTokenNames() -> getTokenNames
    org.antlr.v4.runtime.Vocabulary getVocabulary() -> getVocabulary
    java.lang.String getGrammarFileName() -> getGrammarFileName
    java.lang.String[] getRuleNames() -> getRuleNames
    java.lang.String getSerializedATN() -> getSerializedATN
    org.antlr.v4.runtime.atn.ATN getATN() -> getATN
    void <init>(org.antlr.v4.runtime.TokenStream) -> <init>
    parser.objc.ObjectiveCParser$TranslationUnitContext translationUnit() -> translationUnit
    parser.objc.ObjectiveCParser$TopLevelDeclarationContext topLevelDeclaration() -> topLevelDeclaration
    parser.objc.ObjectiveCParser$ImportDeclarationContext importDeclaration() -> importDeclaration
    parser.objc.ObjectiveCParser$ClassInterfaceContext classInterface() -> classInterface
    parser.objc.ObjectiveCParser$CategoryInterfaceContext categoryInterface() -> categoryInterface
    parser.objc.ObjectiveCParser$ClassImplementationContext classImplementation() -> classImplementation
    parser.objc.ObjectiveCParser$CategoryImplementationContext categoryImplementation() -> categoryImplementation
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext genericTypeSpecifier() -> genericTypeSpecifier
    parser.objc.ObjectiveCParser$ProtocolDeclarationContext protocolDeclaration() -> protocolDeclaration
    parser.objc.ObjectiveCParser$ProtocolDeclarationSectionContext protocolDeclarationSection() -> protocolDeclarationSection
    parser.objc.ObjectiveCParser$ProtocolDeclarationListContext protocolDeclarationList() -> protocolDeclarationList
    parser.objc.ObjectiveCParser$ClassDeclarationListContext classDeclarationList() -> classDeclarationList
    parser.objc.ObjectiveCParser$ProtocolListContext protocolList() -> protocolList
    parser.objc.ObjectiveCParser$PropertyDeclarationContext propertyDeclaration() -> propertyDeclaration
    parser.objc.ObjectiveCParser$PropertyAttributesListContext propertyAttributesList() -> propertyAttributesList
    parser.objc.ObjectiveCParser$PropertyAttributeContext propertyAttribute() -> propertyAttribute
    parser.objc.ObjectiveCParser$ProtocolNameContext protocolName() -> protocolName
    parser.objc.ObjectiveCParser$InstanceVariablesContext instanceVariables() -> instanceVariables
    parser.objc.ObjectiveCParser$VisibilitySectionContext visibilitySection() -> visibilitySection
    parser.objc.ObjectiveCParser$AccessModifierContext accessModifier() -> accessModifier
    parser.objc.ObjectiveCParser$InterfaceDeclarationListContext interfaceDeclarationList() -> interfaceDeclarationList
    parser.objc.ObjectiveCParser$ClassMethodDeclarationContext classMethodDeclaration() -> classMethodDeclaration
    parser.objc.ObjectiveCParser$InstanceMethodDeclarationContext instanceMethodDeclaration() -> instanceMethodDeclaration
    parser.objc.ObjectiveCParser$MethodDeclarationContext methodDeclaration() -> methodDeclaration
    parser.objc.ObjectiveCParser$ImplementationDefinitionListContext implementationDefinitionList() -> implementationDefinitionList
    parser.objc.ObjectiveCParser$ClassMethodDefinitionContext classMethodDefinition() -> classMethodDefinition
    parser.objc.ObjectiveCParser$InstanceMethodDefinitionContext instanceMethodDefinition() -> instanceMethodDefinition
    parser.objc.ObjectiveCParser$MethodDefinitionContext methodDefinition() -> methodDefinition
    parser.objc.ObjectiveCParser$MethodSelectorContext methodSelector() -> methodSelector
    parser.objc.ObjectiveCParser$KeywordDeclaratorContext keywordDeclarator() -> keywordDeclarator
    parser.objc.ObjectiveCParser$SelectorContext selector() -> selector
    parser.objc.ObjectiveCParser$MethodTypeContext methodType() -> methodType
    parser.objc.ObjectiveCParser$PropertyImplementationContext propertyImplementation() -> propertyImplementation
    parser.objc.ObjectiveCParser$PropertySynthesizeListContext propertySynthesizeList() -> propertySynthesizeList
    parser.objc.ObjectiveCParser$PropertySynthesizeItemContext propertySynthesizeItem() -> propertySynthesizeItem
    parser.objc.ObjectiveCParser$BlockTypeContext blockType() -> blockType
    parser.objc.ObjectiveCParser$GenericsSpecifierContext genericsSpecifier() -> genericsSpecifier
    parser.objc.ObjectiveCParser$TypeSpecifierWithPrefixesContext typeSpecifierWithPrefixes() -> typeSpecifierWithPrefixes
    parser.objc.ObjectiveCParser$DictionaryExpressionContext dictionaryExpression() -> dictionaryExpression
    parser.objc.ObjectiveCParser$DictionaryPairContext dictionaryPair() -> dictionaryPair
    parser.objc.ObjectiveCParser$ArrayExpressionContext arrayExpression() -> arrayExpression
    parser.objc.ObjectiveCParser$BoxExpressionContext boxExpression() -> boxExpression
    parser.objc.ObjectiveCParser$BlockParametersContext blockParameters() -> blockParameters
    parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext typeVariableDeclaratorOrName() -> typeVariableDeclaratorOrName
    parser.objc.ObjectiveCParser$BlockExpressionContext blockExpression() -> blockExpression
    parser.objc.ObjectiveCParser$MessageExpressionContext messageExpression() -> messageExpression
    parser.objc.ObjectiveCParser$ReceiverContext receiver() -> receiver
    parser.objc.ObjectiveCParser$MessageSelectorContext messageSelector() -> messageSelector
    parser.objc.ObjectiveCParser$KeywordArgumentContext keywordArgument() -> keywordArgument
    parser.objc.ObjectiveCParser$KeywordArgumentTypeContext keywordArgumentType() -> keywordArgumentType
    parser.objc.ObjectiveCParser$SelectorExpressionContext selectorExpression() -> selectorExpression
    parser.objc.ObjectiveCParser$SelectorNameContext selectorName() -> selectorName
    parser.objc.ObjectiveCParser$ProtocolExpressionContext protocolExpression() -> protocolExpression
    parser.objc.ObjectiveCParser$EncodeExpressionContext encodeExpression() -> encodeExpression
    parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext typeVariableDeclarator() -> typeVariableDeclarator
    parser.objc.ObjectiveCParser$ThrowStatementContext throwStatement() -> throwStatement
    parser.objc.ObjectiveCParser$TryBlockContext tryBlock() -> tryBlock
    parser.objc.ObjectiveCParser$CatchStatementContext catchStatement() -> catchStatement
    parser.objc.ObjectiveCParser$SynchronizedStatementContext synchronizedStatement() -> synchronizedStatement
    parser.objc.ObjectiveCParser$AutoreleaseStatementContext autoreleaseStatement() -> autoreleaseStatement
    parser.objc.ObjectiveCParser$FunctionDeclarationContext functionDeclaration() -> functionDeclaration
    parser.objc.ObjectiveCParser$FunctionDefinitionContext functionDefinition() -> functionDefinition
    parser.objc.ObjectiveCParser$FunctionSignatureContext functionSignature() -> functionSignature
    parser.objc.ObjectiveCParser$AttributeContext attribute() -> attribute
    parser.objc.ObjectiveCParser$AttributeNameContext attributeName() -> attributeName
    parser.objc.ObjectiveCParser$AttributeParametersContext attributeParameters() -> attributeParameters
    parser.objc.ObjectiveCParser$AttributeParameterListContext attributeParameterList() -> attributeParameterList
    parser.objc.ObjectiveCParser$AttributeParameterContext attributeParameter() -> attributeParameter
    parser.objc.ObjectiveCParser$AttributeParameterAssignmentContext attributeParameterAssignment() -> attributeParameterAssignment
    parser.objc.ObjectiveCParser$DeclarationContext declaration() -> declaration
    parser.objc.ObjectiveCParser$FunctionCallExpressionContext functionCallExpression() -> functionCallExpression
    parser.objc.ObjectiveCParser$EnumDeclarationContext enumDeclaration() -> enumDeclaration
    parser.objc.ObjectiveCParser$VarDeclarationContext varDeclaration() -> varDeclaration
    parser.objc.ObjectiveCParser$TypedefDeclarationContext typedefDeclaration() -> typedefDeclaration
    parser.objc.ObjectiveCParser$TypeDeclaratorListContext typeDeclaratorList() -> typeDeclaratorList
    parser.objc.ObjectiveCParser$TypeDeclaratorContext typeDeclarator() -> typeDeclarator
    parser.objc.ObjectiveCParser$DeclarationSpecifiersContext declarationSpecifiers() -> declarationSpecifiers
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier() -> attributeSpecifier
    parser.objc.ObjectiveCParser$InitDeclaratorListContext initDeclaratorList() -> initDeclaratorList
    parser.objc.ObjectiveCParser$InitDeclaratorContext initDeclarator() -> initDeclarator
    parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext structOrUnionSpecifier() -> structOrUnionSpecifier
    parser.objc.ObjectiveCParser$FieldDeclarationContext fieldDeclaration() -> fieldDeclaration
    parser.objc.ObjectiveCParser$SpecifierQualifierListContext specifierQualifierList() -> specifierQualifierList
    parser.objc.ObjectiveCParser$IbOutletQualifierContext ibOutletQualifier() -> ibOutletQualifier
    parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext arcBehaviourSpecifier() -> arcBehaviourSpecifier
    parser.objc.ObjectiveCParser$NullabilitySpecifierContext nullabilitySpecifier() -> nullabilitySpecifier
    parser.objc.ObjectiveCParser$StorageClassSpecifierContext storageClassSpecifier() -> storageClassSpecifier
    parser.objc.ObjectiveCParser$TypePrefixContext typePrefix() -> typePrefix
    parser.objc.ObjectiveCParser$TypeQualifierContext typeQualifier() -> typeQualifier
    parser.objc.ObjectiveCParser$ProtocolQualifierContext protocolQualifier() -> protocolQualifier
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier() -> typeSpecifier
    parser.objc.ObjectiveCParser$TypeofExpressionContext typeofExpression() -> typeofExpression
    parser.objc.ObjectiveCParser$FieldDeclaratorListContext fieldDeclaratorList() -> fieldDeclaratorList
    parser.objc.ObjectiveCParser$FieldDeclaratorContext fieldDeclarator() -> fieldDeclarator
    parser.objc.ObjectiveCParser$EnumSpecifierContext enumSpecifier() -> enumSpecifier
    parser.objc.ObjectiveCParser$EnumeratorListContext enumeratorList() -> enumeratorList
    parser.objc.ObjectiveCParser$EnumeratorContext enumerator() -> enumerator
    parser.objc.ObjectiveCParser$EnumeratorIdentifierContext enumeratorIdentifier() -> enumeratorIdentifier
    parser.objc.ObjectiveCParser$DirectDeclaratorContext directDeclarator() -> directDeclarator
    parser.objc.ObjectiveCParser$DeclaratorSuffixContext declaratorSuffix() -> declaratorSuffix
    parser.objc.ObjectiveCParser$ParameterListContext parameterList() -> parameterList
    parser.objc.ObjectiveCParser$PointerContext pointer() -> pointer
    parser.objc.ObjectiveCParser$MacroContext macro() -> macro
    parser.objc.ObjectiveCParser$ArrayInitializerContext arrayInitializer() -> arrayInitializer
    parser.objc.ObjectiveCParser$StructInitializerContext structInitializer() -> structInitializer
    parser.objc.ObjectiveCParser$InitializerListContext initializerList() -> initializerList
    parser.objc.ObjectiveCParser$TypeNameContext typeName() -> typeName
    parser.objc.ObjectiveCParser$AbstractDeclaratorContext abstractDeclarator() -> abstractDeclarator
    parser.objc.ObjectiveCParser$AbstractDeclaratorSuffixContext abstractDeclaratorSuffix() -> abstractDeclaratorSuffix
    parser.objc.ObjectiveCParser$ParameterDeclarationListContext parameterDeclarationList() -> parameterDeclarationList
    parser.objc.ObjectiveCParser$ParameterDeclarationContext parameterDeclaration() -> parameterDeclaration
    parser.objc.ObjectiveCParser$DeclaratorContext declarator() -> declarator
    parser.objc.ObjectiveCParser$StatementContext statement() -> statement
    parser.objc.ObjectiveCParser$LabeledStatementContext labeledStatement() -> labeledStatement
    parser.objc.ObjectiveCParser$RangeExpressionContext rangeExpression() -> rangeExpression
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    parser.objc.ObjectiveCParser$SelectionStatementContext selectionStatement() -> selectionStatement
    parser.objc.ObjectiveCParser$SwitchStatementContext switchStatement() -> switchStatement
    parser.objc.ObjectiveCParser$SwitchBlockContext switchBlock() -> switchBlock
    parser.objc.ObjectiveCParser$SwitchSectionContext switchSection() -> switchSection
    parser.objc.ObjectiveCParser$SwitchLabelContext switchLabel() -> switchLabel
    parser.objc.ObjectiveCParser$IterationStatementContext iterationStatement() -> iterationStatement
    parser.objc.ObjectiveCParser$WhileStatementContext whileStatement() -> whileStatement
    parser.objc.ObjectiveCParser$DoStatementContext doStatement() -> doStatement
    parser.objc.ObjectiveCParser$ForStatementContext forStatement() -> forStatement
    parser.objc.ObjectiveCParser$ForLoopInitializerContext forLoopInitializer() -> forLoopInitializer
    parser.objc.ObjectiveCParser$ForInStatementContext forInStatement() -> forInStatement
    parser.objc.ObjectiveCParser$JumpStatementContext jumpStatement() -> jumpStatement
    parser.objc.ObjectiveCParser$ExpressionsContext expressions() -> expressions
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    parser.objc.ObjectiveCParser$ExpressionContext expression(int) -> expression
    parser.objc.ObjectiveCParser$AssignmentOperatorContext assignmentOperator() -> assignmentOperator
    parser.objc.ObjectiveCParser$CastExpressionContext castExpression() -> castExpression
    parser.objc.ObjectiveCParser$InitializerContext initializer() -> initializer
    parser.objc.ObjectiveCParser$ConstantExpressionContext constantExpression() -> constantExpression
    parser.objc.ObjectiveCParser$UnaryExpressionContext unaryExpression() -> unaryExpression
    parser.objc.ObjectiveCParser$UnaryOperatorContext unaryOperator() -> unaryOperator
    parser.objc.ObjectiveCParser$PostfixExpressionContext postfixExpression() -> postfixExpression
    parser.objc.ObjectiveCParser$PostfixExpressionContext postfixExpression(int) -> postfixExpression
    parser.objc.ObjectiveCParser$PostfixContext postfix() -> postfix
    parser.objc.ObjectiveCParser$ArgumentExpressionListContext argumentExpressionList() -> argumentExpressionList
    parser.objc.ObjectiveCParser$ArgumentExpressionContext argumentExpression() -> argumentExpression
    parser.objc.ObjectiveCParser$PrimaryExpressionContext primaryExpression() -> primaryExpression
    parser.objc.ObjectiveCParser$ConstantContext constant() -> constant
    parser.objc.ObjectiveCParser$StringLiteralContext stringLiteral() -> stringLiteral
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    boolean sempred(org.antlr.v4.runtime.RuleContext,int,int) -> sempred
    boolean expression_sempred(parser.objc.ObjectiveCParser$ExpressionContext,int) -> expression_sempred
    boolean postfixExpression_sempred(parser.objc.ObjectiveCParser$PostfixExpressionContext,int) -> postfixExpression_sempred
    void <clinit>() -> <clinit>
parser.objc.ObjectiveCParser$AbstractDeclaratorContext -> parser.objc.ObjectiveCParser$AbstractDeclaratorContext:
    parser.objc.ObjectiveCParser$PointerContext pointer() -> pointer
    parser.objc.ObjectiveCParser$AbstractDeclaratorContext abstractDeclarator() -> abstractDeclarator
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    java.util.List abstractDeclaratorSuffix() -> abstractDeclaratorSuffix
    parser.objc.ObjectiveCParser$AbstractDeclaratorSuffixContext abstractDeclaratorSuffix(int) -> abstractDeclaratorSuffix
    java.util.List LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode LBRACK(int) -> LBRACK
    java.util.List RBRACK() -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK(int) -> RBRACK
    java.util.List constantExpression() -> constantExpression
    parser.objc.ObjectiveCParser$ConstantExpressionContext constantExpression(int) -> constantExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AbstractDeclaratorSuffixContext -> parser.objc.ObjectiveCParser$AbstractDeclaratorSuffixContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK() -> RBRACK
    parser.objc.ObjectiveCParser$ConstantExpressionContext constantExpression() -> constantExpression
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$ParameterDeclarationListContext parameterDeclarationList() -> parameterDeclarationList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AccessModifierContext -> parser.objc.ObjectiveCParser$AccessModifierContext:
    org.antlr.v4.runtime.tree.TerminalNode PRIVATE() -> PRIVATE
    org.antlr.v4.runtime.tree.TerminalNode PROTECTED() -> PROTECTED
    org.antlr.v4.runtime.tree.TerminalNode PACKAGE() -> PACKAGE
    org.antlr.v4.runtime.tree.TerminalNode PUBLIC() -> PUBLIC
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext -> parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext:
    org.antlr.v4.runtime.tree.TerminalNode WEAK_QUALIFIER() -> WEAK_QUALIFIER
    org.antlr.v4.runtime.tree.TerminalNode STRONG_QUALIFIER() -> STRONG_QUALIFIER
    org.antlr.v4.runtime.tree.TerminalNode AUTORELEASING_QUALIFIER() -> AUTORELEASING_QUALIFIER
    org.antlr.v4.runtime.tree.TerminalNode UNSAFE_UNRETAINED_QUALIFIER() -> UNSAFE_UNRETAINED_QUALIFIER
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ArgumentExpressionContext -> parser.objc.ObjectiveCParser$ArgumentExpressionContext:
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier() -> typeSpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ArgumentExpressionListContext -> parser.objc.ObjectiveCParser$ArgumentExpressionListContext:
    java.util.List argumentExpression() -> argumentExpression
    parser.objc.ObjectiveCParser$ArgumentExpressionContext argumentExpression(int) -> argumentExpression
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ArrayExpressionContext -> parser.objc.ObjectiveCParser$ArrayExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode AT() -> AT
    org.antlr.v4.runtime.tree.TerminalNode LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK() -> RBRACK
    parser.objc.ObjectiveCParser$ExpressionsContext expressions() -> expressions
    org.antlr.v4.runtime.tree.TerminalNode COMMA() -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ArrayInitializerContext -> parser.objc.ObjectiveCParser$ArrayInitializerContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    parser.objc.ObjectiveCParser$ExpressionsContext expressions() -> expressions
    org.antlr.v4.runtime.tree.TerminalNode COMMA() -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AssignmentOperatorContext -> parser.objc.ObjectiveCParser$AssignmentOperatorContext:
    org.antlr.v4.runtime.tree.TerminalNode ASSIGNMENT() -> ASSIGNMENT
    org.antlr.v4.runtime.tree.TerminalNode MUL_ASSIGN() -> MUL_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode DIV_ASSIGN() -> DIV_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode MOD_ASSIGN() -> MOD_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode ADD_ASSIGN() -> ADD_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode SUB_ASSIGN() -> SUB_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode LSHIFT_ASSIGN() -> LSHIFT_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode RSHIFT_ASSIGN() -> RSHIFT_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode AND_ASSIGN() -> AND_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode XOR_ASSIGN() -> XOR_ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode OR_ASSIGN() -> OR_ASSIGN
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AttributeContext -> parser.objc.ObjectiveCParser$AttributeContext:
    parser.objc.ObjectiveCParser$AttributeNameContext attributeName() -> attributeName
    parser.objc.ObjectiveCParser$AttributeParametersContext attributeParameters() -> attributeParameters
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AttributeNameContext -> parser.objc.ObjectiveCParser$AttributeNameContext:
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AttributeParameterAssignmentContext -> parser.objc.ObjectiveCParser$AttributeParameterAssignmentContext:
    java.util.List attributeName() -> attributeName
    parser.objc.ObjectiveCParser$AttributeNameContext attributeName(int) -> attributeName
    org.antlr.v4.runtime.tree.TerminalNode ASSIGNMENT() -> ASSIGNMENT
    parser.objc.ObjectiveCParser$ConstantContext constant() -> constant
    parser.objc.ObjectiveCParser$StringLiteralContext stringLiteral() -> stringLiteral
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AttributeParameterContext -> parser.objc.ObjectiveCParser$AttributeParameterContext:
    parser.objc.ObjectiveCParser$AttributeContext attribute() -> attribute
    parser.objc.ObjectiveCParser$ConstantContext constant() -> constant
    parser.objc.ObjectiveCParser$StringLiteralContext stringLiteral() -> stringLiteral
    parser.objc.ObjectiveCParser$AttributeParameterAssignmentContext attributeParameterAssignment() -> attributeParameterAssignment
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AttributeParameterListContext -> parser.objc.ObjectiveCParser$AttributeParameterListContext:
    java.util.List attributeParameter() -> attributeParameter
    parser.objc.ObjectiveCParser$AttributeParameterContext attributeParameter(int) -> attributeParameter
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AttributeParametersContext -> parser.objc.ObjectiveCParser$AttributeParametersContext:
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$AttributeParameterListContext attributeParameterList() -> attributeParameterList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AttributeSpecifierContext -> parser.objc.ObjectiveCParser$AttributeSpecifierContext:
    org.antlr.v4.runtime.tree.TerminalNode ATTRIBUTE() -> ATTRIBUTE
    java.util.List LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode LP(int) -> LP
    java.util.List attribute() -> attribute
    parser.objc.ObjectiveCParser$AttributeContext attribute(int) -> attribute
    java.util.List RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode RP(int) -> RP
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$AutoreleaseStatementContext -> parser.objc.ObjectiveCParser$AutoreleaseStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode AUTORELEASEPOOL() -> AUTORELEASEPOOL
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$BlockExpressionContext -> parser.objc.ObjectiveCParser$BlockExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode BITXOR() -> BITXOR
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier() -> typeSpecifier
    parser.objc.ObjectiveCParser$NullabilitySpecifierContext nullabilitySpecifier() -> nullabilitySpecifier
    parser.objc.ObjectiveCParser$BlockParametersContext blockParameters() -> blockParameters
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$BlockParametersContext -> parser.objc.ObjectiveCParser$BlockParametersContext:
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    java.util.List typeVariableDeclaratorOrName() -> typeVariableDeclaratorOrName
    parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext typeVariableDeclaratorOrName(int) -> typeVariableDeclaratorOrName
    org.antlr.v4.runtime.tree.TerminalNode VOID() -> VOID
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$BlockTypeContext -> parser.objc.ObjectiveCParser$BlockTypeContext:
    java.util.List typeSpecifier() -> typeSpecifier
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier(int) -> typeSpecifier
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode BITXOR() -> BITXOR
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    java.util.List nullabilitySpecifier() -> nullabilitySpecifier
    parser.objc.ObjectiveCParser$NullabilitySpecifierContext nullabilitySpecifier(int) -> nullabilitySpecifier
    parser.objc.ObjectiveCParser$BlockParametersContext blockParameters() -> blockParameters
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$BoxExpressionContext -> parser.objc.ObjectiveCParser$BoxExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode AT() -> AT
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$ConstantContext constant() -> constant
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$CastExpressionContext -> parser.objc.ObjectiveCParser$CastExpressionContext:
    parser.objc.ObjectiveCParser$UnaryExpressionContext unaryExpression() -> unaryExpression
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$TypeNameContext typeName() -> typeName
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$CastExpressionContext castExpression() -> castExpression
    parser.objc.ObjectiveCParser$InitializerContext initializer() -> initializer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$CatchStatementContext -> parser.objc.ObjectiveCParser$CatchStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode CATCH() -> CATCH
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext typeVariableDeclarator() -> typeVariableDeclarator
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$CategoryImplementationContext -> parser.objc.ObjectiveCParser$CategoryImplementationContext:
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext categoryName -> categoryName
    parser.objc.ObjectiveCParser$IdentifierContext className -> className
    org.antlr.v4.runtime.tree.TerminalNode IMPLEMENTATION() -> IMPLEMENTATION
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode END() -> END
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext genericTypeSpecifier() -> genericTypeSpecifier
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    parser.objc.ObjectiveCParser$ImplementationDefinitionListContext implementationDefinitionList() -> implementationDefinitionList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$CategoryInterfaceContext -> parser.objc.ObjectiveCParser$CategoryInterfaceContext:
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext categoryName -> categoryName
    parser.objc.ObjectiveCParser$IdentifierContext className -> className
    org.antlr.v4.runtime.tree.TerminalNode INTERFACE() -> INTERFACE
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode END() -> END
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext genericTypeSpecifier() -> genericTypeSpecifier
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    parser.objc.ObjectiveCParser$ProtocolListContext protocolList() -> protocolList
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    parser.objc.ObjectiveCParser$InstanceVariablesContext instanceVariables() -> instanceVariables
    parser.objc.ObjectiveCParser$InterfaceDeclarationListContext interfaceDeclarationList() -> interfaceDeclarationList
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ClassDeclarationListContext -> parser.objc.ObjectiveCParser$ClassDeclarationListContext:
    org.antlr.v4.runtime.tree.TerminalNode CLASS() -> CLASS
    java.util.List identifier() -> identifier
    parser.objc.ObjectiveCParser$IdentifierContext identifier(int) -> identifier
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ClassImplementationContext -> parser.objc.ObjectiveCParser$ClassImplementationContext:
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext className -> className
    parser.objc.ObjectiveCParser$IdentifierContext superclassName -> superclassName
    org.antlr.v4.runtime.tree.TerminalNode IMPLEMENTATION() -> IMPLEMENTATION
    org.antlr.v4.runtime.tree.TerminalNode END() -> END
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext genericTypeSpecifier() -> genericTypeSpecifier
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.objc.ObjectiveCParser$InstanceVariablesContext instanceVariables() -> instanceVariables
    parser.objc.ObjectiveCParser$ImplementationDefinitionListContext implementationDefinitionList() -> implementationDefinitionList
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ClassInterfaceContext -> parser.objc.ObjectiveCParser$ClassInterfaceContext:
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext className -> className
    parser.objc.ObjectiveCParser$IdentifierContext superclassName -> superclassName
    org.antlr.v4.runtime.tree.TerminalNode INTERFACE() -> INTERFACE
    org.antlr.v4.runtime.tree.TerminalNode END() -> END
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext genericTypeSpecifier() -> genericTypeSpecifier
    org.antlr.v4.runtime.tree.TerminalNode IB_DESIGNABLE() -> IB_DESIGNABLE
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    parser.objc.ObjectiveCParser$ProtocolListContext protocolList() -> protocolList
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    parser.objc.ObjectiveCParser$InstanceVariablesContext instanceVariables() -> instanceVariables
    parser.objc.ObjectiveCParser$InterfaceDeclarationListContext interfaceDeclarationList() -> interfaceDeclarationList
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ClassMethodDeclarationContext -> parser.objc.ObjectiveCParser$ClassMethodDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode ADD() -> ADD
    parser.objc.ObjectiveCParser$MethodDeclarationContext methodDeclaration() -> methodDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ClassMethodDefinitionContext -> parser.objc.ObjectiveCParser$ClassMethodDefinitionContext:
    org.antlr.v4.runtime.tree.TerminalNode ADD() -> ADD
    parser.objc.ObjectiveCParser$MethodDefinitionContext methodDefinition() -> methodDefinition
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$CompoundStatementContext -> parser.objc.ObjectiveCParser$CompoundStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List declaration() -> declaration
    parser.objc.ObjectiveCParser$DeclarationContext declaration(int) -> declaration
    java.util.List statement() -> statement
    parser.objc.ObjectiveCParser$StatementContext statement(int) -> statement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ConstantContext -> parser.objc.ObjectiveCParser$ConstantContext:
    org.antlr.v4.runtime.tree.TerminalNode HEX_LITERAL() -> HEX_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode OCTAL_LITERAL() -> OCTAL_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode BINARY_LITERAL() -> BINARY_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode DECIMAL_LITERAL() -> DECIMAL_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode ADD() -> ADD
    org.antlr.v4.runtime.tree.TerminalNode SUB() -> SUB
    org.antlr.v4.runtime.tree.TerminalNode FLOATING_POINT_LITERAL() -> FLOATING_POINT_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode CHARACTER_LITERAL() -> CHARACTER_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode NIL() -> NIL
    org.antlr.v4.runtime.tree.TerminalNode NULL() -> NULL
    org.antlr.v4.runtime.tree.TerminalNode YES() -> YES
    org.antlr.v4.runtime.tree.TerminalNode NO() -> NO
    org.antlr.v4.runtime.tree.TerminalNode TRUE() -> TRUE
    org.antlr.v4.runtime.tree.TerminalNode FALSE() -> FALSE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ConstantExpressionContext -> parser.objc.ObjectiveCParser$ConstantExpressionContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    parser.objc.ObjectiveCParser$ConstantContext constant() -> constant
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$DeclarationContext -> parser.objc.ObjectiveCParser$DeclarationContext:
    parser.objc.ObjectiveCParser$FunctionCallExpressionContext functionCallExpression() -> functionCallExpression
    parser.objc.ObjectiveCParser$EnumDeclarationContext enumDeclaration() -> enumDeclaration
    parser.objc.ObjectiveCParser$VarDeclarationContext varDeclaration() -> varDeclaration
    parser.objc.ObjectiveCParser$TypedefDeclarationContext typedefDeclaration() -> typedefDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$DeclarationSpecifiersContext -> parser.objc.ObjectiveCParser$DeclarationSpecifiersContext:
    java.util.List storageClassSpecifier() -> storageClassSpecifier
    parser.objc.ObjectiveCParser$StorageClassSpecifierContext storageClassSpecifier(int) -> storageClassSpecifier
    java.util.List attributeSpecifier() -> attributeSpecifier
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier(int) -> attributeSpecifier
    java.util.List arcBehaviourSpecifier() -> arcBehaviourSpecifier
    parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext arcBehaviourSpecifier(int) -> arcBehaviourSpecifier
    java.util.List nullabilitySpecifier() -> nullabilitySpecifier
    parser.objc.ObjectiveCParser$NullabilitySpecifierContext nullabilitySpecifier(int) -> nullabilitySpecifier
    java.util.List ibOutletQualifier() -> ibOutletQualifier
    parser.objc.ObjectiveCParser$IbOutletQualifierContext ibOutletQualifier(int) -> ibOutletQualifier
    java.util.List typePrefix() -> typePrefix
    parser.objc.ObjectiveCParser$TypePrefixContext typePrefix(int) -> typePrefix
    java.util.List typeQualifier() -> typeQualifier
    parser.objc.ObjectiveCParser$TypeQualifierContext typeQualifier(int) -> typeQualifier
    java.util.List typeSpecifier() -> typeSpecifier
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier(int) -> typeSpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$DeclaratorContext -> parser.objc.ObjectiveCParser$DeclaratorContext:
    parser.objc.ObjectiveCParser$DirectDeclaratorContext directDeclarator() -> directDeclarator
    parser.objc.ObjectiveCParser$PointerContext pointer() -> pointer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$DeclaratorSuffixContext -> parser.objc.ObjectiveCParser$DeclaratorSuffixContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACK() -> LBRACK
    org.antlr.v4.runtime.tree.TerminalNode RBRACK() -> RBRACK
    parser.objc.ObjectiveCParser$ConstantExpressionContext constantExpression() -> constantExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$DictionaryExpressionContext -> parser.objc.ObjectiveCParser$DictionaryExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode AT() -> AT
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List dictionaryPair() -> dictionaryPair
    parser.objc.ObjectiveCParser$DictionaryPairContext dictionaryPair(int) -> dictionaryPair
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$DictionaryPairContext -> parser.objc.ObjectiveCParser$DictionaryPairContext:
    parser.objc.ObjectiveCParser$CastExpressionContext castExpression() -> castExpression
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$DirectDeclaratorContext -> parser.objc.ObjectiveCParser$DirectDeclaratorContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$DeclaratorContext declarator() -> declarator
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    java.util.List declaratorSuffix() -> declaratorSuffix
    parser.objc.ObjectiveCParser$DeclaratorSuffixContext declaratorSuffix(int) -> declaratorSuffix
    org.antlr.v4.runtime.tree.TerminalNode BITXOR() -> BITXOR
    parser.objc.ObjectiveCParser$BlockParametersContext blockParameters() -> blockParameters
    parser.objc.ObjectiveCParser$NullabilitySpecifierContext nullabilitySpecifier() -> nullabilitySpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$DoStatementContext -> parser.objc.ObjectiveCParser$DoStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode DO() -> DO
    parser.objc.ObjectiveCParser$StatementContext statement() -> statement
    org.antlr.v4.runtime.tree.TerminalNode WHILE() -> WHILE
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$EncodeExpressionContext -> parser.objc.ObjectiveCParser$EncodeExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode ENCODE() -> ENCODE
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$TypeNameContext typeName() -> typeName
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$EnumDeclarationContext -> parser.objc.ObjectiveCParser$EnumDeclarationContext:
    parser.objc.ObjectiveCParser$EnumSpecifierContext enumSpecifier() -> enumSpecifier
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier() -> attributeSpecifier
    org.antlr.v4.runtime.tree.TerminalNode TYPEDEF() -> TYPEDEF
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$EnumSpecifierContext -> parser.objc.ObjectiveCParser$EnumSpecifierContext:
    org.antlr.v4.runtime.tree.TerminalNode ENUM() -> ENUM
    java.util.List identifier() -> identifier
    parser.objc.ObjectiveCParser$IdentifierContext identifier(int) -> identifier
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    parser.objc.ObjectiveCParser$EnumeratorListContext enumeratorList() -> enumeratorList
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.objc.ObjectiveCParser$TypeNameContext typeName() -> typeName
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode NS_OPTIONS() -> NS_OPTIONS
    org.antlr.v4.runtime.tree.TerminalNode NS_ENUM() -> NS_ENUM
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$EnumeratorContext -> parser.objc.ObjectiveCParser$EnumeratorContext:
    parser.objc.ObjectiveCParser$EnumeratorIdentifierContext enumeratorIdentifier() -> enumeratorIdentifier
    org.antlr.v4.runtime.tree.TerminalNode ASSIGNMENT() -> ASSIGNMENT
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$EnumeratorIdentifierContext -> parser.objc.ObjectiveCParser$EnumeratorIdentifierContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier() -> attributeSpecifier
    org.antlr.v4.runtime.tree.TerminalNode DEFAULT() -> DEFAULT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$EnumeratorListContext -> parser.objc.ObjectiveCParser$EnumeratorListContext:
    java.util.List enumerator() -> enumerator
    parser.objc.ObjectiveCParser$EnumeratorContext enumerator(int) -> enumerator
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ExpressionContext -> parser.objc.ObjectiveCParser$ExpressionContext:
    parser.objc.ObjectiveCParser$ExpressionContext assignmentExpression -> assignmentExpression
    org.antlr.v4.runtime.Token op -> op
    parser.objc.ObjectiveCParser$ExpressionContext trueExpression -> trueExpression
    parser.objc.ObjectiveCParser$ExpressionContext falseExpression -> falseExpression
    parser.objc.ObjectiveCParser$CastExpressionContext castExpression() -> castExpression
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$UnaryExpressionContext unaryExpression() -> unaryExpression
    parser.objc.ObjectiveCParser$AssignmentOperatorContext assignmentOperator() -> assignmentOperator
    java.util.List expression() -> expression
    parser.objc.ObjectiveCParser$ExpressionContext expression(int) -> expression
    org.antlr.v4.runtime.tree.TerminalNode MUL() -> MUL
    org.antlr.v4.runtime.tree.TerminalNode DIV() -> DIV
    org.antlr.v4.runtime.tree.TerminalNode MOD() -> MOD
    org.antlr.v4.runtime.tree.TerminalNode ADD() -> ADD
    org.antlr.v4.runtime.tree.TerminalNode SUB() -> SUB
    java.util.List LT() -> LT
    org.antlr.v4.runtime.tree.TerminalNode LT(int) -> LT
    java.util.List GT() -> GT
    org.antlr.v4.runtime.tree.TerminalNode GT(int) -> GT
    org.antlr.v4.runtime.tree.TerminalNode LE() -> LE
    org.antlr.v4.runtime.tree.TerminalNode GE() -> GE
    org.antlr.v4.runtime.tree.TerminalNode NOTEQUAL() -> NOTEQUAL
    org.antlr.v4.runtime.tree.TerminalNode EQUAL() -> EQUAL
    org.antlr.v4.runtime.tree.TerminalNode BITAND() -> BITAND
    org.antlr.v4.runtime.tree.TerminalNode BITXOR() -> BITXOR
    org.antlr.v4.runtime.tree.TerminalNode BITOR() -> BITOR
    org.antlr.v4.runtime.tree.TerminalNode AND() -> AND
    org.antlr.v4.runtime.tree.TerminalNode OR() -> OR
    org.antlr.v4.runtime.tree.TerminalNode QUESTION() -> QUESTION
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ExpressionsContext -> parser.objc.ObjectiveCParser$ExpressionsContext:
    java.util.List expression() -> expression
    parser.objc.ObjectiveCParser$ExpressionContext expression(int) -> expression
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$FieldDeclarationContext -> parser.objc.ObjectiveCParser$FieldDeclarationContext:
    parser.objc.ObjectiveCParser$SpecifierQualifierListContext specifierQualifierList() -> specifierQualifierList
    parser.objc.ObjectiveCParser$FieldDeclaratorListContext fieldDeclaratorList() -> fieldDeclaratorList
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier() -> attributeSpecifier
    parser.objc.ObjectiveCParser$MacroContext macro() -> macro
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$FieldDeclaratorContext -> parser.objc.ObjectiveCParser$FieldDeclaratorContext:
    parser.objc.ObjectiveCParser$DeclaratorContext declarator() -> declarator
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.objc.ObjectiveCParser$ConstantContext constant() -> constant
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$FieldDeclaratorListContext -> parser.objc.ObjectiveCParser$FieldDeclaratorListContext:
    java.util.List fieldDeclarator() -> fieldDeclarator
    parser.objc.ObjectiveCParser$FieldDeclaratorContext fieldDeclarator(int) -> fieldDeclarator
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ForInStatementContext -> parser.objc.ObjectiveCParser$ForInStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode FOR() -> FOR
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext typeVariableDeclarator() -> typeVariableDeclarator
    org.antlr.v4.runtime.tree.TerminalNode IN() -> IN
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$StatementContext statement() -> statement
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ForLoopInitializerContext -> parser.objc.ObjectiveCParser$ForLoopInitializerContext:
    parser.objc.ObjectiveCParser$DeclarationSpecifiersContext declarationSpecifiers() -> declarationSpecifiers
    parser.objc.ObjectiveCParser$InitDeclaratorListContext initDeclaratorList() -> initDeclaratorList
    parser.objc.ObjectiveCParser$ExpressionsContext expressions() -> expressions
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ForStatementContext -> parser.objc.ObjectiveCParser$ForStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode FOR() -> FOR
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    java.util.List SEMI() -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode SEMI(int) -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$StatementContext statement() -> statement
    parser.objc.ObjectiveCParser$ForLoopInitializerContext forLoopInitializer() -> forLoopInitializer
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    parser.objc.ObjectiveCParser$ExpressionsContext expressions() -> expressions
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$FunctionCallExpressionContext -> parser.objc.ObjectiveCParser$FunctionCallExpressionContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$DirectDeclaratorContext directDeclarator() -> directDeclarator
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    java.util.List attributeSpecifier() -> attributeSpecifier
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier(int) -> attributeSpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$FunctionDeclarationContext -> parser.objc.ObjectiveCParser$FunctionDeclarationContext:
    parser.objc.ObjectiveCParser$FunctionSignatureContext functionSignature() -> functionSignature
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$FunctionDefinitionContext -> parser.objc.ObjectiveCParser$FunctionDefinitionContext:
    parser.objc.ObjectiveCParser$FunctionSignatureContext functionSignature() -> functionSignature
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$FunctionSignatureContext -> parser.objc.ObjectiveCParser$FunctionSignatureContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$DeclarationSpecifiersContext declarationSpecifiers() -> declarationSpecifiers
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier() -> attributeSpecifier
    parser.objc.ObjectiveCParser$ParameterListContext parameterList() -> parameterList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$GenericTypeSpecifierContext -> parser.objc.ObjectiveCParser$GenericTypeSpecifierContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    parser.objc.ObjectiveCParser$GenericsSpecifierContext genericsSpecifier() -> genericsSpecifier
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    parser.objc.ObjectiveCParser$ProtocolListContext protocolList() -> protocolList
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$GenericsSpecifierContext -> parser.objc.ObjectiveCParser$GenericsSpecifierContext:
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    java.util.List typeSpecifierWithPrefixes() -> typeSpecifierWithPrefixes
    parser.objc.ObjectiveCParser$TypeSpecifierWithPrefixesContext typeSpecifierWithPrefixes(int) -> typeSpecifierWithPrefixes
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$IbOutletQualifierContext -> parser.objc.ObjectiveCParser$IbOutletQualifierContext:
    org.antlr.v4.runtime.tree.TerminalNode IB_OUTLET_COLLECTION() -> IB_OUTLET_COLLECTION
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode IB_OUTLET() -> IB_OUTLET
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$IdentifierContext -> parser.objc.ObjectiveCParser$IdentifierContext:
    org.antlr.v4.runtime.tree.TerminalNode IDENTIFIER() -> IDENTIFIER
    org.antlr.v4.runtime.tree.TerminalNode BOOL() -> BOOL
    org.antlr.v4.runtime.tree.TerminalNode Class() -> Class
    org.antlr.v4.runtime.tree.TerminalNode BYCOPY() -> BYCOPY
    org.antlr.v4.runtime.tree.TerminalNode BYREF() -> BYREF
    org.antlr.v4.runtime.tree.TerminalNode ID() -> ID
    org.antlr.v4.runtime.tree.TerminalNode IMP() -> IMP
    org.antlr.v4.runtime.tree.TerminalNode IN() -> IN
    org.antlr.v4.runtime.tree.TerminalNode INOUT() -> INOUT
    org.antlr.v4.runtime.tree.TerminalNode ONEWAY() -> ONEWAY
    org.antlr.v4.runtime.tree.TerminalNode OUT() -> OUT
    org.antlr.v4.runtime.tree.TerminalNode PROTOCOL_() -> PROTOCOL_
    org.antlr.v4.runtime.tree.TerminalNode SEL() -> SEL
    org.antlr.v4.runtime.tree.TerminalNode SELF() -> SELF
    org.antlr.v4.runtime.tree.TerminalNode SUPER() -> SUPER
    org.antlr.v4.runtime.tree.TerminalNode ATOMIC() -> ATOMIC
    org.antlr.v4.runtime.tree.TerminalNode NONATOMIC() -> NONATOMIC
    org.antlr.v4.runtime.tree.TerminalNode RETAIN() -> RETAIN
    org.antlr.v4.runtime.tree.TerminalNode AUTORELEASING_QUALIFIER() -> AUTORELEASING_QUALIFIER
    org.antlr.v4.runtime.tree.TerminalNode BLOCK() -> BLOCK
    org.antlr.v4.runtime.tree.TerminalNode BRIDGE_RETAINED() -> BRIDGE_RETAINED
    org.antlr.v4.runtime.tree.TerminalNode BRIDGE_TRANSFER() -> BRIDGE_TRANSFER
    org.antlr.v4.runtime.tree.TerminalNode COVARIANT() -> COVARIANT
    org.antlr.v4.runtime.tree.TerminalNode CONTRAVARIANT() -> CONTRAVARIANT
    org.antlr.v4.runtime.tree.TerminalNode DEPRECATED() -> DEPRECATED
    org.antlr.v4.runtime.tree.TerminalNode KINDOF() -> KINDOF
    org.antlr.v4.runtime.tree.TerminalNode UNUSED() -> UNUSED
    org.antlr.v4.runtime.tree.TerminalNode NS_INLINE() -> NS_INLINE
    org.antlr.v4.runtime.tree.TerminalNode NS_ENUM() -> NS_ENUM
    org.antlr.v4.runtime.tree.TerminalNode NS_OPTIONS() -> NS_OPTIONS
    org.antlr.v4.runtime.tree.TerminalNode NULL_UNSPECIFIED() -> NULL_UNSPECIFIED
    org.antlr.v4.runtime.tree.TerminalNode NULLABLE() -> NULLABLE
    org.antlr.v4.runtime.tree.TerminalNode NONNULL() -> NONNULL
    org.antlr.v4.runtime.tree.TerminalNode NULL_RESETTABLE() -> NULL_RESETTABLE
    org.antlr.v4.runtime.tree.TerminalNode ASSIGN() -> ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode COPY() -> COPY
    org.antlr.v4.runtime.tree.TerminalNode GETTER() -> GETTER
    org.antlr.v4.runtime.tree.TerminalNode SETTER() -> SETTER
    org.antlr.v4.runtime.tree.TerminalNode STRONG() -> STRONG
    org.antlr.v4.runtime.tree.TerminalNode READONLY() -> READONLY
    org.antlr.v4.runtime.tree.TerminalNode READWRITE() -> READWRITE
    org.antlr.v4.runtime.tree.TerminalNode WEAK() -> WEAK
    org.antlr.v4.runtime.tree.TerminalNode UNSAFE_UNRETAINED() -> UNSAFE_UNRETAINED
    org.antlr.v4.runtime.tree.TerminalNode IB_OUTLET() -> IB_OUTLET
    org.antlr.v4.runtime.tree.TerminalNode IB_OUTLET_COLLECTION() -> IB_OUTLET_COLLECTION
    org.antlr.v4.runtime.tree.TerminalNode IB_INSPECTABLE() -> IB_INSPECTABLE
    org.antlr.v4.runtime.tree.TerminalNode IB_DESIGNABLE() -> IB_DESIGNABLE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ImplementationDefinitionListContext -> parser.objc.ObjectiveCParser$ImplementationDefinitionListContext:
    java.util.List functionDefinition() -> functionDefinition
    parser.objc.ObjectiveCParser$FunctionDefinitionContext functionDefinition(int) -> functionDefinition
    java.util.List declaration() -> declaration
    parser.objc.ObjectiveCParser$DeclarationContext declaration(int) -> declaration
    java.util.List classMethodDefinition() -> classMethodDefinition
    parser.objc.ObjectiveCParser$ClassMethodDefinitionContext classMethodDefinition(int) -> classMethodDefinition
    java.util.List instanceMethodDefinition() -> instanceMethodDefinition
    parser.objc.ObjectiveCParser$InstanceMethodDefinitionContext instanceMethodDefinition(int) -> instanceMethodDefinition
    java.util.List propertyImplementation() -> propertyImplementation
    parser.objc.ObjectiveCParser$PropertyImplementationContext propertyImplementation(int) -> propertyImplementation
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ImportDeclarationContext -> parser.objc.ObjectiveCParser$ImportDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode IMPORT() -> IMPORT
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$InitDeclaratorContext -> parser.objc.ObjectiveCParser$InitDeclaratorContext:
    parser.objc.ObjectiveCParser$DeclaratorContext declarator() -> declarator
    org.antlr.v4.runtime.tree.TerminalNode ASSIGNMENT() -> ASSIGNMENT
    parser.objc.ObjectiveCParser$InitializerContext initializer() -> initializer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$InitDeclaratorListContext -> parser.objc.ObjectiveCParser$InitDeclaratorListContext:
    java.util.List initDeclarator() -> initDeclarator
    parser.objc.ObjectiveCParser$InitDeclaratorContext initDeclarator(int) -> initDeclarator
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$InitializerContext -> parser.objc.ObjectiveCParser$InitializerContext:
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    parser.objc.ObjectiveCParser$ArrayInitializerContext arrayInitializer() -> arrayInitializer
    parser.objc.ObjectiveCParser$StructInitializerContext structInitializer() -> structInitializer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$InitializerListContext -> parser.objc.ObjectiveCParser$InitializerListContext:
    java.util.List initializer() -> initializer
    parser.objc.ObjectiveCParser$InitializerContext initializer(int) -> initializer
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$InstanceMethodDeclarationContext -> parser.objc.ObjectiveCParser$InstanceMethodDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode SUB() -> SUB
    parser.objc.ObjectiveCParser$MethodDeclarationContext methodDeclaration() -> methodDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$InstanceMethodDefinitionContext -> parser.objc.ObjectiveCParser$InstanceMethodDefinitionContext:
    org.antlr.v4.runtime.tree.TerminalNode SUB() -> SUB
    parser.objc.ObjectiveCParser$MethodDefinitionContext methodDefinition() -> methodDefinition
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$InstanceVariablesContext -> parser.objc.ObjectiveCParser$InstanceVariablesContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List visibilitySection() -> visibilitySection
    parser.objc.ObjectiveCParser$VisibilitySectionContext visibilitySection(int) -> visibilitySection
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$InterfaceDeclarationListContext -> parser.objc.ObjectiveCParser$InterfaceDeclarationListContext:
    java.util.List declaration() -> declaration
    parser.objc.ObjectiveCParser$DeclarationContext declaration(int) -> declaration
    java.util.List classMethodDeclaration() -> classMethodDeclaration
    parser.objc.ObjectiveCParser$ClassMethodDeclarationContext classMethodDeclaration(int) -> classMethodDeclaration
    java.util.List instanceMethodDeclaration() -> instanceMethodDeclaration
    parser.objc.ObjectiveCParser$InstanceMethodDeclarationContext instanceMethodDeclaration(int) -> instanceMethodDeclaration
    java.util.List propertyDeclaration() -> propertyDeclaration
    parser.objc.ObjectiveCParser$PropertyDeclarationContext propertyDeclaration(int) -> propertyDeclaration
    java.util.List functionDeclaration() -> functionDeclaration
    parser.objc.ObjectiveCParser$FunctionDeclarationContext functionDeclaration(int) -> functionDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$IterationStatementContext -> parser.objc.ObjectiveCParser$IterationStatementContext:
    parser.objc.ObjectiveCParser$WhileStatementContext whileStatement() -> whileStatement
    parser.objc.ObjectiveCParser$DoStatementContext doStatement() -> doStatement
    parser.objc.ObjectiveCParser$ForStatementContext forStatement() -> forStatement
    parser.objc.ObjectiveCParser$ForInStatementContext forInStatement() -> forInStatement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$JumpStatementContext -> parser.objc.ObjectiveCParser$JumpStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode GOTO() -> GOTO
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode CONTINUE() -> CONTINUE
    org.antlr.v4.runtime.tree.TerminalNode BREAK() -> BREAK
    org.antlr.v4.runtime.tree.TerminalNode RETURN() -> RETURN
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$KeywordArgumentContext -> parser.objc.ObjectiveCParser$KeywordArgumentContext:
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    java.util.List keywordArgumentType() -> keywordArgumentType
    parser.objc.ObjectiveCParser$KeywordArgumentTypeContext keywordArgumentType(int) -> keywordArgumentType
    parser.objc.ObjectiveCParser$SelectorContext selector() -> selector
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$KeywordArgumentTypeContext -> parser.objc.ObjectiveCParser$KeywordArgumentTypeContext:
    parser.objc.ObjectiveCParser$ExpressionsContext expressions() -> expressions
    parser.objc.ObjectiveCParser$NullabilitySpecifierContext nullabilitySpecifier() -> nullabilitySpecifier
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    parser.objc.ObjectiveCParser$InitializerListContext initializerList() -> initializerList
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$KeywordDeclaratorContext -> parser.objc.ObjectiveCParser$KeywordDeclaratorContext:
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    parser.objc.ObjectiveCParser$SelectorContext selector() -> selector
    java.util.List methodType() -> methodType
    parser.objc.ObjectiveCParser$MethodTypeContext methodType(int) -> methodType
    parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext arcBehaviourSpecifier() -> arcBehaviourSpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$LabeledStatementContext -> parser.objc.ObjectiveCParser$LabeledStatementContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.objc.ObjectiveCParser$StatementContext statement() -> statement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$MacroContext -> parser.objc.ObjectiveCParser$MacroContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    java.util.List primaryExpression() -> primaryExpression
    parser.objc.ObjectiveCParser$PrimaryExpressionContext primaryExpression(int) -> primaryExpression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$MessageExpressionContext -> parser.objc.ObjectiveCParser$MessageExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACK() -> LBRACK
    parser.objc.ObjectiveCParser$ReceiverContext receiver() -> receiver
    parser.objc.ObjectiveCParser$MessageSelectorContext messageSelector() -> messageSelector
    org.antlr.v4.runtime.tree.TerminalNode RBRACK() -> RBRACK
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$MessageSelectorContext -> parser.objc.ObjectiveCParser$MessageSelectorContext:
    parser.objc.ObjectiveCParser$SelectorContext selector() -> selector
    java.util.List keywordArgument() -> keywordArgument
    parser.objc.ObjectiveCParser$KeywordArgumentContext keywordArgument(int) -> keywordArgument
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$MethodDeclarationContext -> parser.objc.ObjectiveCParser$MethodDeclarationContext:
    parser.objc.ObjectiveCParser$MethodSelectorContext methodSelector() -> methodSelector
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.objc.ObjectiveCParser$MethodTypeContext methodType() -> methodType
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier() -> attributeSpecifier
    parser.objc.ObjectiveCParser$MacroContext macro() -> macro
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$MethodDefinitionContext -> parser.objc.ObjectiveCParser$MethodDefinitionContext:
    parser.objc.ObjectiveCParser$MethodSelectorContext methodSelector() -> methodSelector
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    parser.objc.ObjectiveCParser$MethodTypeContext methodType() -> methodType
    parser.objc.ObjectiveCParser$InitDeclaratorListContext initDeclaratorList() -> initDeclaratorList
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$MethodSelectorContext -> parser.objc.ObjectiveCParser$MethodSelectorContext:
    parser.objc.ObjectiveCParser$SelectorContext selector() -> selector
    java.util.List keywordDeclarator() -> keywordDeclarator
    parser.objc.ObjectiveCParser$KeywordDeclaratorContext keywordDeclarator(int) -> keywordDeclarator
    org.antlr.v4.runtime.tree.TerminalNode COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode ELIPSIS() -> ELIPSIS
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$MethodTypeContext -> parser.objc.ObjectiveCParser$MethodTypeContext:
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$TypeNameContext typeName() -> typeName
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$NullabilitySpecifierContext -> parser.objc.ObjectiveCParser$NullabilitySpecifierContext:
    org.antlr.v4.runtime.tree.TerminalNode NULL_UNSPECIFIED() -> NULL_UNSPECIFIED
    org.antlr.v4.runtime.tree.TerminalNode NULLABLE() -> NULLABLE
    org.antlr.v4.runtime.tree.TerminalNode NONNULL() -> NONNULL
    org.antlr.v4.runtime.tree.TerminalNode NULL_RESETTABLE() -> NULL_RESETTABLE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ParameterDeclarationContext -> parser.objc.ObjectiveCParser$ParameterDeclarationContext:
    parser.objc.ObjectiveCParser$DeclarationSpecifiersContext declarationSpecifiers() -> declarationSpecifiers
    parser.objc.ObjectiveCParser$DeclaratorContext declarator() -> declarator
    org.antlr.v4.runtime.tree.TerminalNode VOID() -> VOID
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ParameterDeclarationListContext -> parser.objc.ObjectiveCParser$ParameterDeclarationListContext:
    java.util.List parameterDeclaration() -> parameterDeclaration
    parser.objc.ObjectiveCParser$ParameterDeclarationContext parameterDeclaration(int) -> parameterDeclaration
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ParameterListContext -> parser.objc.ObjectiveCParser$ParameterListContext:
    parser.objc.ObjectiveCParser$ParameterDeclarationListContext parameterDeclarationList() -> parameterDeclarationList
    org.antlr.v4.runtime.tree.TerminalNode COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode ELIPSIS() -> ELIPSIS
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PointerContext -> parser.objc.ObjectiveCParser$PointerContext:
    org.antlr.v4.runtime.tree.TerminalNode MUL() -> MUL
    parser.objc.ObjectiveCParser$DeclarationSpecifiersContext declarationSpecifiers() -> declarationSpecifiers
    parser.objc.ObjectiveCParser$PointerContext pointer() -> pointer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PostfixContext -> parser.objc.ObjectiveCParser$PostfixContext:
    org.antlr.v4.runtime.Token RP -> RP
    java.util.List macroArguments -> macroArguments
    org.antlr.v4.runtime.Token _tset3119 -> _tset3119
    org.antlr.v4.runtime.Token op -> op
    org.antlr.v4.runtime.tree.TerminalNode LBRACK() -> LBRACK
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RBRACK() -> RBRACK
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    java.util.List RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode RP(int) -> RP
    parser.objc.ObjectiveCParser$ArgumentExpressionListContext argumentExpressionList() -> argumentExpressionList
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode INC() -> INC
    org.antlr.v4.runtime.tree.TerminalNode DEC() -> DEC
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PostfixExpressionContext -> parser.objc.ObjectiveCParser$PostfixExpressionContext:
    parser.objc.ObjectiveCParser$PrimaryExpressionContext primaryExpression() -> primaryExpression
    java.util.List postfix() -> postfix
    parser.objc.ObjectiveCParser$PostfixContext postfix(int) -> postfix
    parser.objc.ObjectiveCParser$PostfixExpressionContext postfixExpression() -> postfixExpression
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode STRUCTACCESS() -> STRUCTACCESS
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PrimaryExpressionContext -> parser.objc.ObjectiveCParser$PrimaryExpressionContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    parser.objc.ObjectiveCParser$ConstantContext constant() -> constant
    parser.objc.ObjectiveCParser$StringLiteralContext stringLiteral() -> stringLiteral
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$MessageExpressionContext messageExpression() -> messageExpression
    parser.objc.ObjectiveCParser$SelectorExpressionContext selectorExpression() -> selectorExpression
    parser.objc.ObjectiveCParser$ProtocolExpressionContext protocolExpression() -> protocolExpression
    parser.objc.ObjectiveCParser$EncodeExpressionContext encodeExpression() -> encodeExpression
    parser.objc.ObjectiveCParser$DictionaryExpressionContext dictionaryExpression() -> dictionaryExpression
    parser.objc.ObjectiveCParser$ArrayExpressionContext arrayExpression() -> arrayExpression
    parser.objc.ObjectiveCParser$BoxExpressionContext boxExpression() -> boxExpression
    parser.objc.ObjectiveCParser$BlockExpressionContext blockExpression() -> blockExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PropertyAttributeContext -> parser.objc.ObjectiveCParser$PropertyAttributeContext:
    org.antlr.v4.runtime.tree.TerminalNode ATOMIC() -> ATOMIC
    org.antlr.v4.runtime.tree.TerminalNode NONATOMIC() -> NONATOMIC
    org.antlr.v4.runtime.tree.TerminalNode STRONG() -> STRONG
    org.antlr.v4.runtime.tree.TerminalNode WEAK() -> WEAK
    org.antlr.v4.runtime.tree.TerminalNode RETAIN() -> RETAIN
    org.antlr.v4.runtime.tree.TerminalNode ASSIGN() -> ASSIGN
    org.antlr.v4.runtime.tree.TerminalNode UNSAFE_UNRETAINED() -> UNSAFE_UNRETAINED
    org.antlr.v4.runtime.tree.TerminalNode COPY() -> COPY
    org.antlr.v4.runtime.tree.TerminalNode READONLY() -> READONLY
    org.antlr.v4.runtime.tree.TerminalNode READWRITE() -> READWRITE
    org.antlr.v4.runtime.tree.TerminalNode GETTER() -> GETTER
    org.antlr.v4.runtime.tree.TerminalNode ASSIGNMENT() -> ASSIGNMENT
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode SETTER() -> SETTER
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.objc.ObjectiveCParser$NullabilitySpecifierContext nullabilitySpecifier() -> nullabilitySpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PropertyAttributesListContext -> parser.objc.ObjectiveCParser$PropertyAttributesListContext:
    java.util.List propertyAttribute() -> propertyAttribute
    parser.objc.ObjectiveCParser$PropertyAttributeContext propertyAttribute(int) -> propertyAttribute
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PropertyDeclarationContext -> parser.objc.ObjectiveCParser$PropertyDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode PROPERTY() -> PROPERTY
    parser.objc.ObjectiveCParser$FieldDeclarationContext fieldDeclaration() -> fieldDeclaration
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$PropertyAttributesListContext propertyAttributesList() -> propertyAttributesList
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$IbOutletQualifierContext ibOutletQualifier() -> ibOutletQualifier
    org.antlr.v4.runtime.tree.TerminalNode IB_INSPECTABLE() -> IB_INSPECTABLE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PropertyImplementationContext -> parser.objc.ObjectiveCParser$PropertyImplementationContext:
    org.antlr.v4.runtime.tree.TerminalNode SYNTHESIZE() -> SYNTHESIZE
    parser.objc.ObjectiveCParser$PropertySynthesizeListContext propertySynthesizeList() -> propertySynthesizeList
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    org.antlr.v4.runtime.tree.TerminalNode DYNAMIC() -> DYNAMIC
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PropertySynthesizeItemContext -> parser.objc.ObjectiveCParser$PropertySynthesizeItemContext:
    java.util.List identifier() -> identifier
    parser.objc.ObjectiveCParser$IdentifierContext identifier(int) -> identifier
    org.antlr.v4.runtime.tree.TerminalNode ASSIGNMENT() -> ASSIGNMENT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$PropertySynthesizeListContext -> parser.objc.ObjectiveCParser$PropertySynthesizeListContext:
    java.util.List propertySynthesizeItem() -> propertySynthesizeItem
    parser.objc.ObjectiveCParser$PropertySynthesizeItemContext propertySynthesizeItem(int) -> propertySynthesizeItem
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ProtocolDeclarationContext -> parser.objc.ObjectiveCParser$ProtocolDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode PROTOCOL() -> PROTOCOL
    parser.objc.ObjectiveCParser$ProtocolNameContext protocolName() -> protocolName
    org.antlr.v4.runtime.tree.TerminalNode END() -> END
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    parser.objc.ObjectiveCParser$ProtocolListContext protocolList() -> protocolList
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    java.util.List protocolDeclarationSection() -> protocolDeclarationSection
    parser.objc.ObjectiveCParser$ProtocolDeclarationSectionContext protocolDeclarationSection(int) -> protocolDeclarationSection
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ProtocolDeclarationListContext -> parser.objc.ObjectiveCParser$ProtocolDeclarationListContext:
    org.antlr.v4.runtime.tree.TerminalNode PROTOCOL() -> PROTOCOL
    parser.objc.ObjectiveCParser$ProtocolListContext protocolList() -> protocolList
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ProtocolDeclarationSectionContext -> parser.objc.ObjectiveCParser$ProtocolDeclarationSectionContext:
    org.antlr.v4.runtime.Token modifier -> modifier
    org.antlr.v4.runtime.tree.TerminalNode REQUIRED() -> REQUIRED
    org.antlr.v4.runtime.tree.TerminalNode OPTIONAL() -> OPTIONAL
    java.util.List interfaceDeclarationList() -> interfaceDeclarationList
    parser.objc.ObjectiveCParser$InterfaceDeclarationListContext interfaceDeclarationList(int) -> interfaceDeclarationList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ProtocolExpressionContext -> parser.objc.ObjectiveCParser$ProtocolExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode PROTOCOL() -> PROTOCOL
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ProtocolNameContext protocolName() -> protocolName
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ProtocolListContext -> parser.objc.ObjectiveCParser$ProtocolListContext:
    java.util.List protocolName() -> protocolName
    parser.objc.ObjectiveCParser$ProtocolNameContext protocolName(int) -> protocolName
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ProtocolNameContext -> parser.objc.ObjectiveCParser$ProtocolNameContext:
    org.antlr.v4.runtime.tree.TerminalNode LT() -> LT
    parser.objc.ObjectiveCParser$ProtocolListContext protocolList() -> protocolList
    org.antlr.v4.runtime.tree.TerminalNode GT() -> GT
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode COVARIANT() -> COVARIANT
    org.antlr.v4.runtime.tree.TerminalNode CONTRAVARIANT() -> CONTRAVARIANT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ProtocolQualifierContext -> parser.objc.ObjectiveCParser$ProtocolQualifierContext:
    org.antlr.v4.runtime.tree.TerminalNode IN() -> IN
    org.antlr.v4.runtime.tree.TerminalNode OUT() -> OUT
    org.antlr.v4.runtime.tree.TerminalNode INOUT() -> INOUT
    org.antlr.v4.runtime.tree.TerminalNode BYCOPY() -> BYCOPY
    org.antlr.v4.runtime.tree.TerminalNode BYREF() -> BYREF
    org.antlr.v4.runtime.tree.TerminalNode ONEWAY() -> ONEWAY
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$RangeExpressionContext -> parser.objc.ObjectiveCParser$RangeExpressionContext:
    java.util.List constantExpression() -> constantExpression
    parser.objc.ObjectiveCParser$ConstantExpressionContext constantExpression(int) -> constantExpression
    org.antlr.v4.runtime.tree.TerminalNode ELIPSIS() -> ELIPSIS
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ReceiverContext -> parser.objc.ObjectiveCParser$ReceiverContext:
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier() -> typeSpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SelectionStatementContext -> parser.objc.ObjectiveCParser$SelectionStatementContext:
    parser.objc.ObjectiveCParser$StatementContext ifBody -> ifBody
    parser.objc.ObjectiveCParser$StatementContext elseBody -> elseBody
    org.antlr.v4.runtime.tree.TerminalNode IF() -> IF
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    java.util.List statement() -> statement
    parser.objc.ObjectiveCParser$StatementContext statement(int) -> statement
    org.antlr.v4.runtime.tree.TerminalNode ELSE() -> ELSE
    parser.objc.ObjectiveCParser$SwitchStatementContext switchStatement() -> switchStatement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SelectorContext -> parser.objc.ObjectiveCParser$SelectorContext:
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode RETURN() -> RETURN
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SelectorExpressionContext -> parser.objc.ObjectiveCParser$SelectorExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode SELECTOR() -> SELECTOR
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$SelectorNameContext selectorName() -> selectorName
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SelectorNameContext -> parser.objc.ObjectiveCParser$SelectorNameContext:
    java.util.List selector() -> selector
    parser.objc.ObjectiveCParser$SelectorContext selector(int) -> selector
    java.util.List COLON() -> COLON
    org.antlr.v4.runtime.tree.TerminalNode COLON(int) -> COLON
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SpecifierQualifierListContext -> parser.objc.ObjectiveCParser$SpecifierQualifierListContext:
    java.util.List arcBehaviourSpecifier() -> arcBehaviourSpecifier
    parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext arcBehaviourSpecifier(int) -> arcBehaviourSpecifier
    java.util.List nullabilitySpecifier() -> nullabilitySpecifier
    parser.objc.ObjectiveCParser$NullabilitySpecifierContext nullabilitySpecifier(int) -> nullabilitySpecifier
    java.util.List ibOutletQualifier() -> ibOutletQualifier
    parser.objc.ObjectiveCParser$IbOutletQualifierContext ibOutletQualifier(int) -> ibOutletQualifier
    java.util.List typePrefix() -> typePrefix
    parser.objc.ObjectiveCParser$TypePrefixContext typePrefix(int) -> typePrefix
    java.util.List typeQualifier() -> typeQualifier
    parser.objc.ObjectiveCParser$TypeQualifierContext typeQualifier(int) -> typeQualifier
    java.util.List typeSpecifier() -> typeSpecifier
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier(int) -> typeSpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$StatementContext -> parser.objc.ObjectiveCParser$StatementContext:
    parser.objc.ObjectiveCParser$LabeledStatementContext labeledStatement() -> labeledStatement
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    parser.objc.ObjectiveCParser$SelectionStatementContext selectionStatement() -> selectionStatement
    parser.objc.ObjectiveCParser$IterationStatementContext iterationStatement() -> iterationStatement
    parser.objc.ObjectiveCParser$JumpStatementContext jumpStatement() -> jumpStatement
    parser.objc.ObjectiveCParser$SynchronizedStatementContext synchronizedStatement() -> synchronizedStatement
    parser.objc.ObjectiveCParser$AutoreleaseStatementContext autoreleaseStatement() -> autoreleaseStatement
    parser.objc.ObjectiveCParser$ThrowStatementContext throwStatement() -> throwStatement
    parser.objc.ObjectiveCParser$TryBlockContext tryBlock() -> tryBlock
    parser.objc.ObjectiveCParser$ExpressionsContext expressions() -> expressions
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$StorageClassSpecifierContext -> parser.objc.ObjectiveCParser$StorageClassSpecifierContext:
    org.antlr.v4.runtime.tree.TerminalNode AUTO() -> AUTO
    org.antlr.v4.runtime.tree.TerminalNode REGISTER() -> REGISTER
    org.antlr.v4.runtime.tree.TerminalNode STATIC() -> STATIC
    org.antlr.v4.runtime.tree.TerminalNode EXTERN() -> EXTERN
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$StringLiteralContext -> parser.objc.ObjectiveCParser$StringLiteralContext:
    java.util.List STRING_START() -> STRING_START
    org.antlr.v4.runtime.tree.TerminalNode STRING_START(int) -> STRING_START
    java.util.List STRING_END() -> STRING_END
    org.antlr.v4.runtime.tree.TerminalNode STRING_END(int) -> STRING_END
    java.util.List STRING_VALUE() -> STRING_VALUE
    org.antlr.v4.runtime.tree.TerminalNode STRING_VALUE(int) -> STRING_VALUE
    java.util.List STRING_NEWLINE() -> STRING_NEWLINE
    org.antlr.v4.runtime.tree.TerminalNode STRING_NEWLINE(int) -> STRING_NEWLINE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$StructInitializerContext -> parser.objc.ObjectiveCParser$StructInitializerContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List DOT() -> DOT
    org.antlr.v4.runtime.tree.TerminalNode DOT(int) -> DOT
    java.util.List expression() -> expression
    parser.objc.ObjectiveCParser$ExpressionContext expression(int) -> expression
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext -> parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext:
    org.antlr.v4.runtime.tree.TerminalNode STRUCT() -> STRUCT
    org.antlr.v4.runtime.tree.TerminalNode UNION() -> UNION
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List fieldDeclaration() -> fieldDeclaration
    parser.objc.ObjectiveCParser$FieldDeclarationContext fieldDeclaration(int) -> fieldDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SwitchBlockContext -> parser.objc.ObjectiveCParser$SwitchBlockContext:
    org.antlr.v4.runtime.tree.TerminalNode LBRACE() -> LBRACE
    org.antlr.v4.runtime.tree.TerminalNode RBRACE() -> RBRACE
    java.util.List switchSection() -> switchSection
    parser.objc.ObjectiveCParser$SwitchSectionContext switchSection(int) -> switchSection
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SwitchLabelContext -> parser.objc.ObjectiveCParser$SwitchLabelContext:
    org.antlr.v4.runtime.tree.TerminalNode CASE() -> CASE
    org.antlr.v4.runtime.tree.TerminalNode COLON() -> COLON
    parser.objc.ObjectiveCParser$RangeExpressionContext rangeExpression() -> rangeExpression
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode DEFAULT() -> DEFAULT
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SwitchSectionContext -> parser.objc.ObjectiveCParser$SwitchSectionContext:
    java.util.List switchLabel() -> switchLabel
    parser.objc.ObjectiveCParser$SwitchLabelContext switchLabel(int) -> switchLabel
    java.util.List statement() -> statement
    parser.objc.ObjectiveCParser$StatementContext statement(int) -> statement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SwitchStatementContext -> parser.objc.ObjectiveCParser$SwitchStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode SWITCH() -> SWITCH
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$SwitchBlockContext switchBlock() -> switchBlock
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$SynchronizedStatementContext -> parser.objc.ObjectiveCParser$SynchronizedStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode SYNCHRONIZED() -> SYNCHRONIZED
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement() -> compoundStatement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$ThrowStatementContext -> parser.objc.ObjectiveCParser$ThrowStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode THROW() -> THROW
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TopLevelDeclarationContext -> parser.objc.ObjectiveCParser$TopLevelDeclarationContext:
    parser.objc.ObjectiveCParser$ImportDeclarationContext importDeclaration() -> importDeclaration
    parser.objc.ObjectiveCParser$FunctionDeclarationContext functionDeclaration() -> functionDeclaration
    parser.objc.ObjectiveCParser$DeclarationContext declaration() -> declaration
    parser.objc.ObjectiveCParser$ClassInterfaceContext classInterface() -> classInterface
    parser.objc.ObjectiveCParser$ClassImplementationContext classImplementation() -> classImplementation
    parser.objc.ObjectiveCParser$CategoryInterfaceContext categoryInterface() -> categoryInterface
    parser.objc.ObjectiveCParser$CategoryImplementationContext categoryImplementation() -> categoryImplementation
    parser.objc.ObjectiveCParser$ProtocolDeclarationContext protocolDeclaration() -> protocolDeclaration
    parser.objc.ObjectiveCParser$ProtocolDeclarationListContext protocolDeclarationList() -> protocolDeclarationList
    parser.objc.ObjectiveCParser$ClassDeclarationListContext classDeclarationList() -> classDeclarationList
    parser.objc.ObjectiveCParser$FunctionDefinitionContext functionDefinition() -> functionDefinition
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TranslationUnitContext -> parser.objc.ObjectiveCParser$TranslationUnitContext:
    org.antlr.v4.runtime.tree.TerminalNode EOF() -> EOF
    java.util.List topLevelDeclaration() -> topLevelDeclaration
    parser.objc.ObjectiveCParser$TopLevelDeclarationContext topLevelDeclaration(int) -> topLevelDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TryBlockContext -> parser.objc.ObjectiveCParser$TryBlockContext:
    parser.objc.ObjectiveCParser$CompoundStatementContext tryStatement -> tryStatement
    parser.objc.ObjectiveCParser$CompoundStatementContext finallyStatement -> finallyStatement
    org.antlr.v4.runtime.tree.TerminalNode TRY() -> TRY
    java.util.List compoundStatement() -> compoundStatement
    parser.objc.ObjectiveCParser$CompoundStatementContext compoundStatement(int) -> compoundStatement
    java.util.List catchStatement() -> catchStatement
    parser.objc.ObjectiveCParser$CatchStatementContext catchStatement(int) -> catchStatement
    org.antlr.v4.runtime.tree.TerminalNode FINALLY() -> FINALLY
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeDeclaratorContext -> parser.objc.ObjectiveCParser$TypeDeclaratorContext:
    parser.objc.ObjectiveCParser$DirectDeclaratorContext directDeclarator() -> directDeclarator
    parser.objc.ObjectiveCParser$PointerContext pointer() -> pointer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeDeclaratorListContext -> parser.objc.ObjectiveCParser$TypeDeclaratorListContext:
    java.util.List typeDeclarator() -> typeDeclarator
    parser.objc.ObjectiveCParser$TypeDeclaratorContext typeDeclarator(int) -> typeDeclarator
    java.util.List COMMA() -> COMMA
    org.antlr.v4.runtime.tree.TerminalNode COMMA(int) -> COMMA
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeNameContext -> parser.objc.ObjectiveCParser$TypeNameContext:
    parser.objc.ObjectiveCParser$SpecifierQualifierListContext specifierQualifierList() -> specifierQualifierList
    parser.objc.ObjectiveCParser$AbstractDeclaratorContext abstractDeclarator() -> abstractDeclarator
    parser.objc.ObjectiveCParser$BlockTypeContext blockType() -> blockType
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypePrefixContext -> parser.objc.ObjectiveCParser$TypePrefixContext:
    org.antlr.v4.runtime.tree.TerminalNode BRIDGE() -> BRIDGE
    org.antlr.v4.runtime.tree.TerminalNode BRIDGE_TRANSFER() -> BRIDGE_TRANSFER
    org.antlr.v4.runtime.tree.TerminalNode BRIDGE_RETAINED() -> BRIDGE_RETAINED
    org.antlr.v4.runtime.tree.TerminalNode BLOCK() -> BLOCK
    org.antlr.v4.runtime.tree.TerminalNode INLINE() -> INLINE
    org.antlr.v4.runtime.tree.TerminalNode NS_INLINE() -> NS_INLINE
    org.antlr.v4.runtime.tree.TerminalNode KINDOF() -> KINDOF
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeQualifierContext -> parser.objc.ObjectiveCParser$TypeQualifierContext:
    org.antlr.v4.runtime.tree.TerminalNode CONST() -> CONST
    org.antlr.v4.runtime.tree.TerminalNode VOLATILE() -> VOLATILE
    org.antlr.v4.runtime.tree.TerminalNode RESTRICT() -> RESTRICT
    parser.objc.ObjectiveCParser$ProtocolQualifierContext protocolQualifier() -> protocolQualifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeSpecifierContext -> parser.objc.ObjectiveCParser$TypeSpecifierContext:
    org.antlr.v4.runtime.tree.TerminalNode VOID() -> VOID
    org.antlr.v4.runtime.tree.TerminalNode CHAR() -> CHAR
    org.antlr.v4.runtime.tree.TerminalNode SHORT() -> SHORT
    org.antlr.v4.runtime.tree.TerminalNode INT() -> INT
    org.antlr.v4.runtime.tree.TerminalNode LONG() -> LONG
    org.antlr.v4.runtime.tree.TerminalNode FLOAT() -> FLOAT
    org.antlr.v4.runtime.tree.TerminalNode DOUBLE() -> DOUBLE
    org.antlr.v4.runtime.tree.TerminalNode SIGNED() -> SIGNED
    org.antlr.v4.runtime.tree.TerminalNode UNSIGNED() -> UNSIGNED
    parser.objc.ObjectiveCParser$TypeofExpressionContext typeofExpression() -> typeofExpression
    parser.objc.ObjectiveCParser$GenericTypeSpecifierContext genericTypeSpecifier() -> genericTypeSpecifier
    parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext structOrUnionSpecifier() -> structOrUnionSpecifier
    parser.objc.ObjectiveCParser$EnumSpecifierContext enumSpecifier() -> enumSpecifier
    parser.objc.ObjectiveCParser$IdentifierContext identifier() -> identifier
    parser.objc.ObjectiveCParser$PointerContext pointer() -> pointer
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeSpecifierWithPrefixesContext -> parser.objc.ObjectiveCParser$TypeSpecifierWithPrefixesContext:
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier() -> typeSpecifier
    java.util.List typePrefix() -> typePrefix
    parser.objc.ObjectiveCParser$TypePrefixContext typePrefix(int) -> typePrefix
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext -> parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext:
    parser.objc.ObjectiveCParser$DeclarationSpecifiersContext declarationSpecifiers() -> declarationSpecifiers
    parser.objc.ObjectiveCParser$DeclaratorContext declarator() -> declarator
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext -> parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext:
    parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext typeVariableDeclarator() -> typeVariableDeclarator
    parser.objc.ObjectiveCParser$TypeNameContext typeName() -> typeName
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypedefDeclarationContext -> parser.objc.ObjectiveCParser$TypedefDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode TYPEDEF() -> TYPEDEF
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.objc.ObjectiveCParser$DeclarationSpecifiersContext declarationSpecifiers() -> declarationSpecifiers
    parser.objc.ObjectiveCParser$TypeDeclaratorListContext typeDeclaratorList() -> typeDeclaratorList
    parser.objc.ObjectiveCParser$AttributeSpecifierContext attributeSpecifier() -> attributeSpecifier
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$TypeofExpressionContext -> parser.objc.ObjectiveCParser$TypeofExpressionContext:
    org.antlr.v4.runtime.tree.TerminalNode TYPEOF() -> TYPEOF
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$UnaryExpressionContext -> parser.objc.ObjectiveCParser$UnaryExpressionContext:
    org.antlr.v4.runtime.Token op -> op
    parser.objc.ObjectiveCParser$PostfixExpressionContext postfixExpression() -> postfixExpression
    org.antlr.v4.runtime.tree.TerminalNode SIZEOF() -> SIZEOF
    parser.objc.ObjectiveCParser$UnaryExpressionContext unaryExpression() -> unaryExpression
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$TypeSpecifierContext typeSpecifier() -> typeSpecifier
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    org.antlr.v4.runtime.tree.TerminalNode INC() -> INC
    org.antlr.v4.runtime.tree.TerminalNode DEC() -> DEC
    parser.objc.ObjectiveCParser$UnaryOperatorContext unaryOperator() -> unaryOperator
    parser.objc.ObjectiveCParser$CastExpressionContext castExpression() -> castExpression
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$UnaryOperatorContext -> parser.objc.ObjectiveCParser$UnaryOperatorContext:
    org.antlr.v4.runtime.tree.TerminalNode BITAND() -> BITAND
    org.antlr.v4.runtime.tree.TerminalNode MUL() -> MUL
    org.antlr.v4.runtime.tree.TerminalNode ADD() -> ADD
    org.antlr.v4.runtime.tree.TerminalNode SUB() -> SUB
    org.antlr.v4.runtime.tree.TerminalNode TILDE() -> TILDE
    org.antlr.v4.runtime.tree.TerminalNode BANG() -> BANG
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$VarDeclarationContext -> parser.objc.ObjectiveCParser$VarDeclarationContext:
    org.antlr.v4.runtime.tree.TerminalNode SEMI() -> SEMI
    parser.objc.ObjectiveCParser$DeclarationSpecifiersContext declarationSpecifiers() -> declarationSpecifiers
    parser.objc.ObjectiveCParser$InitDeclaratorListContext initDeclaratorList() -> initDeclaratorList
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$VisibilitySectionContext -> parser.objc.ObjectiveCParser$VisibilitySectionContext:
    parser.objc.ObjectiveCParser$AccessModifierContext accessModifier() -> accessModifier
    java.util.List fieldDeclaration() -> fieldDeclaration
    parser.objc.ObjectiveCParser$FieldDeclarationContext fieldDeclaration(int) -> fieldDeclaration
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParser$WhileStatementContext -> parser.objc.ObjectiveCParser$WhileStatementContext:
    org.antlr.v4.runtime.tree.TerminalNode WHILE() -> WHILE
    org.antlr.v4.runtime.tree.TerminalNode LP() -> LP
    parser.objc.ObjectiveCParser$ExpressionContext expression() -> expression
    org.antlr.v4.runtime.tree.TerminalNode RP() -> RP
    parser.objc.ObjectiveCParser$StatementContext statement() -> statement
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCParserBaseListener -> parser.objc.ObjectiveCParserBaseListener:
    void <init>() -> <init>
    void enterTranslationUnit(parser.objc.ObjectiveCParser$TranslationUnitContext) -> enterTranslationUnit
    void exitTranslationUnit(parser.objc.ObjectiveCParser$TranslationUnitContext) -> exitTranslationUnit
    void enterTopLevelDeclaration(parser.objc.ObjectiveCParser$TopLevelDeclarationContext) -> enterTopLevelDeclaration
    void exitTopLevelDeclaration(parser.objc.ObjectiveCParser$TopLevelDeclarationContext) -> exitTopLevelDeclaration
    void enterImportDeclaration(parser.objc.ObjectiveCParser$ImportDeclarationContext) -> enterImportDeclaration
    void exitImportDeclaration(parser.objc.ObjectiveCParser$ImportDeclarationContext) -> exitImportDeclaration
    void enterClassInterface(parser.objc.ObjectiveCParser$ClassInterfaceContext) -> enterClassInterface
    void exitClassInterface(parser.objc.ObjectiveCParser$ClassInterfaceContext) -> exitClassInterface
    void enterCategoryInterface(parser.objc.ObjectiveCParser$CategoryInterfaceContext) -> enterCategoryInterface
    void exitCategoryInterface(parser.objc.ObjectiveCParser$CategoryInterfaceContext) -> exitCategoryInterface
    void enterClassImplementation(parser.objc.ObjectiveCParser$ClassImplementationContext) -> enterClassImplementation
    void exitClassImplementation(parser.objc.ObjectiveCParser$ClassImplementationContext) -> exitClassImplementation
    void enterCategoryImplementation(parser.objc.ObjectiveCParser$CategoryImplementationContext) -> enterCategoryImplementation
    void exitCategoryImplementation(parser.objc.ObjectiveCParser$CategoryImplementationContext) -> exitCategoryImplementation
    void enterGenericTypeSpecifier(parser.objc.ObjectiveCParser$GenericTypeSpecifierContext) -> enterGenericTypeSpecifier
    void exitGenericTypeSpecifier(parser.objc.ObjectiveCParser$GenericTypeSpecifierContext) -> exitGenericTypeSpecifier
    void enterProtocolDeclaration(parser.objc.ObjectiveCParser$ProtocolDeclarationContext) -> enterProtocolDeclaration
    void exitProtocolDeclaration(parser.objc.ObjectiveCParser$ProtocolDeclarationContext) -> exitProtocolDeclaration
    void enterProtocolDeclarationSection(parser.objc.ObjectiveCParser$ProtocolDeclarationSectionContext) -> enterProtocolDeclarationSection
    void exitProtocolDeclarationSection(parser.objc.ObjectiveCParser$ProtocolDeclarationSectionContext) -> exitProtocolDeclarationSection
    void enterProtocolDeclarationList(parser.objc.ObjectiveCParser$ProtocolDeclarationListContext) -> enterProtocolDeclarationList
    void exitProtocolDeclarationList(parser.objc.ObjectiveCParser$ProtocolDeclarationListContext) -> exitProtocolDeclarationList
    void enterClassDeclarationList(parser.objc.ObjectiveCParser$ClassDeclarationListContext) -> enterClassDeclarationList
    void exitClassDeclarationList(parser.objc.ObjectiveCParser$ClassDeclarationListContext) -> exitClassDeclarationList
    void enterProtocolList(parser.objc.ObjectiveCParser$ProtocolListContext) -> enterProtocolList
    void exitProtocolList(parser.objc.ObjectiveCParser$ProtocolListContext) -> exitProtocolList
    void enterPropertyDeclaration(parser.objc.ObjectiveCParser$PropertyDeclarationContext) -> enterPropertyDeclaration
    void exitPropertyDeclaration(parser.objc.ObjectiveCParser$PropertyDeclarationContext) -> exitPropertyDeclaration
    void enterPropertyAttributesList(parser.objc.ObjectiveCParser$PropertyAttributesListContext) -> enterPropertyAttributesList
    void exitPropertyAttributesList(parser.objc.ObjectiveCParser$PropertyAttributesListContext) -> exitPropertyAttributesList
    void enterPropertyAttribute(parser.objc.ObjectiveCParser$PropertyAttributeContext) -> enterPropertyAttribute
    void exitPropertyAttribute(parser.objc.ObjectiveCParser$PropertyAttributeContext) -> exitPropertyAttribute
    void enterProtocolName(parser.objc.ObjectiveCParser$ProtocolNameContext) -> enterProtocolName
    void exitProtocolName(parser.objc.ObjectiveCParser$ProtocolNameContext) -> exitProtocolName
    void enterInstanceVariables(parser.objc.ObjectiveCParser$InstanceVariablesContext) -> enterInstanceVariables
    void exitInstanceVariables(parser.objc.ObjectiveCParser$InstanceVariablesContext) -> exitInstanceVariables
    void enterVisibilitySection(parser.objc.ObjectiveCParser$VisibilitySectionContext) -> enterVisibilitySection
    void exitVisibilitySection(parser.objc.ObjectiveCParser$VisibilitySectionContext) -> exitVisibilitySection
    void enterAccessModifier(parser.objc.ObjectiveCParser$AccessModifierContext) -> enterAccessModifier
    void exitAccessModifier(parser.objc.ObjectiveCParser$AccessModifierContext) -> exitAccessModifier
    void enterInterfaceDeclarationList(parser.objc.ObjectiveCParser$InterfaceDeclarationListContext) -> enterInterfaceDeclarationList
    void exitInterfaceDeclarationList(parser.objc.ObjectiveCParser$InterfaceDeclarationListContext) -> exitInterfaceDeclarationList
    void enterClassMethodDeclaration(parser.objc.ObjectiveCParser$ClassMethodDeclarationContext) -> enterClassMethodDeclaration
    void exitClassMethodDeclaration(parser.objc.ObjectiveCParser$ClassMethodDeclarationContext) -> exitClassMethodDeclaration
    void enterInstanceMethodDeclaration(parser.objc.ObjectiveCParser$InstanceMethodDeclarationContext) -> enterInstanceMethodDeclaration
    void exitInstanceMethodDeclaration(parser.objc.ObjectiveCParser$InstanceMethodDeclarationContext) -> exitInstanceMethodDeclaration
    void enterMethodDeclaration(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> enterMethodDeclaration
    void exitMethodDeclaration(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> exitMethodDeclaration
    void enterImplementationDefinitionList(parser.objc.ObjectiveCParser$ImplementationDefinitionListContext) -> enterImplementationDefinitionList
    void exitImplementationDefinitionList(parser.objc.ObjectiveCParser$ImplementationDefinitionListContext) -> exitImplementationDefinitionList
    void enterClassMethodDefinition(parser.objc.ObjectiveCParser$ClassMethodDefinitionContext) -> enterClassMethodDefinition
    void exitClassMethodDefinition(parser.objc.ObjectiveCParser$ClassMethodDefinitionContext) -> exitClassMethodDefinition
    void enterInstanceMethodDefinition(parser.objc.ObjectiveCParser$InstanceMethodDefinitionContext) -> enterInstanceMethodDefinition
    void exitInstanceMethodDefinition(parser.objc.ObjectiveCParser$InstanceMethodDefinitionContext) -> exitInstanceMethodDefinition
    void enterMethodDefinition(parser.objc.ObjectiveCParser$MethodDefinitionContext) -> enterMethodDefinition
    void exitMethodDefinition(parser.objc.ObjectiveCParser$MethodDefinitionContext) -> exitMethodDefinition
    void enterMethodSelector(parser.objc.ObjectiveCParser$MethodSelectorContext) -> enterMethodSelector
    void exitMethodSelector(parser.objc.ObjectiveCParser$MethodSelectorContext) -> exitMethodSelector
    void enterKeywordDeclarator(parser.objc.ObjectiveCParser$KeywordDeclaratorContext) -> enterKeywordDeclarator
    void exitKeywordDeclarator(parser.objc.ObjectiveCParser$KeywordDeclaratorContext) -> exitKeywordDeclarator
    void enterSelector(parser.objc.ObjectiveCParser$SelectorContext) -> enterSelector
    void exitSelector(parser.objc.ObjectiveCParser$SelectorContext) -> exitSelector
    void enterMethodType(parser.objc.ObjectiveCParser$MethodTypeContext) -> enterMethodType
    void exitMethodType(parser.objc.ObjectiveCParser$MethodTypeContext) -> exitMethodType
    void enterPropertyImplementation(parser.objc.ObjectiveCParser$PropertyImplementationContext) -> enterPropertyImplementation
    void exitPropertyImplementation(parser.objc.ObjectiveCParser$PropertyImplementationContext) -> exitPropertyImplementation
    void enterPropertySynthesizeList(parser.objc.ObjectiveCParser$PropertySynthesizeListContext) -> enterPropertySynthesizeList
    void exitPropertySynthesizeList(parser.objc.ObjectiveCParser$PropertySynthesizeListContext) -> exitPropertySynthesizeList
    void enterPropertySynthesizeItem(parser.objc.ObjectiveCParser$PropertySynthesizeItemContext) -> enterPropertySynthesizeItem
    void exitPropertySynthesizeItem(parser.objc.ObjectiveCParser$PropertySynthesizeItemContext) -> exitPropertySynthesizeItem
    void enterBlockType(parser.objc.ObjectiveCParser$BlockTypeContext) -> enterBlockType
    void exitBlockType(parser.objc.ObjectiveCParser$BlockTypeContext) -> exitBlockType
    void enterGenericsSpecifier(parser.objc.ObjectiveCParser$GenericsSpecifierContext) -> enterGenericsSpecifier
    void exitGenericsSpecifier(parser.objc.ObjectiveCParser$GenericsSpecifierContext) -> exitGenericsSpecifier
    void enterTypeSpecifierWithPrefixes(parser.objc.ObjectiveCParser$TypeSpecifierWithPrefixesContext) -> enterTypeSpecifierWithPrefixes
    void exitTypeSpecifierWithPrefixes(parser.objc.ObjectiveCParser$TypeSpecifierWithPrefixesContext) -> exitTypeSpecifierWithPrefixes
    void enterDictionaryExpression(parser.objc.ObjectiveCParser$DictionaryExpressionContext) -> enterDictionaryExpression
    void exitDictionaryExpression(parser.objc.ObjectiveCParser$DictionaryExpressionContext) -> exitDictionaryExpression
    void enterDictionaryPair(parser.objc.ObjectiveCParser$DictionaryPairContext) -> enterDictionaryPair
    void exitDictionaryPair(parser.objc.ObjectiveCParser$DictionaryPairContext) -> exitDictionaryPair
    void enterArrayExpression(parser.objc.ObjectiveCParser$ArrayExpressionContext) -> enterArrayExpression
    void exitArrayExpression(parser.objc.ObjectiveCParser$ArrayExpressionContext) -> exitArrayExpression
    void enterBoxExpression(parser.objc.ObjectiveCParser$BoxExpressionContext) -> enterBoxExpression
    void exitBoxExpression(parser.objc.ObjectiveCParser$BoxExpressionContext) -> exitBoxExpression
    void enterBlockParameters(parser.objc.ObjectiveCParser$BlockParametersContext) -> enterBlockParameters
    void exitBlockParameters(parser.objc.ObjectiveCParser$BlockParametersContext) -> exitBlockParameters
    void enterTypeVariableDeclaratorOrName(parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext) -> enterTypeVariableDeclaratorOrName
    void exitTypeVariableDeclaratorOrName(parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext) -> exitTypeVariableDeclaratorOrName
    void enterBlockExpression(parser.objc.ObjectiveCParser$BlockExpressionContext) -> enterBlockExpression
    void exitBlockExpression(parser.objc.ObjectiveCParser$BlockExpressionContext) -> exitBlockExpression
    void enterMessageExpression(parser.objc.ObjectiveCParser$MessageExpressionContext) -> enterMessageExpression
    void exitMessageExpression(parser.objc.ObjectiveCParser$MessageExpressionContext) -> exitMessageExpression
    void enterReceiver(parser.objc.ObjectiveCParser$ReceiverContext) -> enterReceiver
    void exitReceiver(parser.objc.ObjectiveCParser$ReceiverContext) -> exitReceiver
    void enterMessageSelector(parser.objc.ObjectiveCParser$MessageSelectorContext) -> enterMessageSelector
    void exitMessageSelector(parser.objc.ObjectiveCParser$MessageSelectorContext) -> exitMessageSelector
    void enterKeywordArgument(parser.objc.ObjectiveCParser$KeywordArgumentContext) -> enterKeywordArgument
    void exitKeywordArgument(parser.objc.ObjectiveCParser$KeywordArgumentContext) -> exitKeywordArgument
    void enterKeywordArgumentType(parser.objc.ObjectiveCParser$KeywordArgumentTypeContext) -> enterKeywordArgumentType
    void exitKeywordArgumentType(parser.objc.ObjectiveCParser$KeywordArgumentTypeContext) -> exitKeywordArgumentType
    void enterSelectorExpression(parser.objc.ObjectiveCParser$SelectorExpressionContext) -> enterSelectorExpression
    void exitSelectorExpression(parser.objc.ObjectiveCParser$SelectorExpressionContext) -> exitSelectorExpression
    void enterSelectorName(parser.objc.ObjectiveCParser$SelectorNameContext) -> enterSelectorName
    void exitSelectorName(parser.objc.ObjectiveCParser$SelectorNameContext) -> exitSelectorName
    void enterProtocolExpression(parser.objc.ObjectiveCParser$ProtocolExpressionContext) -> enterProtocolExpression
    void exitProtocolExpression(parser.objc.ObjectiveCParser$ProtocolExpressionContext) -> exitProtocolExpression
    void enterEncodeExpression(parser.objc.ObjectiveCParser$EncodeExpressionContext) -> enterEncodeExpression
    void exitEncodeExpression(parser.objc.ObjectiveCParser$EncodeExpressionContext) -> exitEncodeExpression
    void enterTypeVariableDeclarator(parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext) -> enterTypeVariableDeclarator
    void exitTypeVariableDeclarator(parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext) -> exitTypeVariableDeclarator
    void enterThrowStatement(parser.objc.ObjectiveCParser$ThrowStatementContext) -> enterThrowStatement
    void exitThrowStatement(parser.objc.ObjectiveCParser$ThrowStatementContext) -> exitThrowStatement
    void enterTryBlock(parser.objc.ObjectiveCParser$TryBlockContext) -> enterTryBlock
    void exitTryBlock(parser.objc.ObjectiveCParser$TryBlockContext) -> exitTryBlock
    void enterCatchStatement(parser.objc.ObjectiveCParser$CatchStatementContext) -> enterCatchStatement
    void exitCatchStatement(parser.objc.ObjectiveCParser$CatchStatementContext) -> exitCatchStatement
    void enterSynchronizedStatement(parser.objc.ObjectiveCParser$SynchronizedStatementContext) -> enterSynchronizedStatement
    void exitSynchronizedStatement(parser.objc.ObjectiveCParser$SynchronizedStatementContext) -> exitSynchronizedStatement
    void enterAutoreleaseStatement(parser.objc.ObjectiveCParser$AutoreleaseStatementContext) -> enterAutoreleaseStatement
    void exitAutoreleaseStatement(parser.objc.ObjectiveCParser$AutoreleaseStatementContext) -> exitAutoreleaseStatement
    void enterFunctionDeclaration(parser.objc.ObjectiveCParser$FunctionDeclarationContext) -> enterFunctionDeclaration
    void exitFunctionDeclaration(parser.objc.ObjectiveCParser$FunctionDeclarationContext) -> exitFunctionDeclaration
    void enterFunctionDefinition(parser.objc.ObjectiveCParser$FunctionDefinitionContext) -> enterFunctionDefinition
    void exitFunctionDefinition(parser.objc.ObjectiveCParser$FunctionDefinitionContext) -> exitFunctionDefinition
    void enterFunctionSignature(parser.objc.ObjectiveCParser$FunctionSignatureContext) -> enterFunctionSignature
    void exitFunctionSignature(parser.objc.ObjectiveCParser$FunctionSignatureContext) -> exitFunctionSignature
    void enterAttribute(parser.objc.ObjectiveCParser$AttributeContext) -> enterAttribute
    void exitAttribute(parser.objc.ObjectiveCParser$AttributeContext) -> exitAttribute
    void enterAttributeName(parser.objc.ObjectiveCParser$AttributeNameContext) -> enterAttributeName
    void exitAttributeName(parser.objc.ObjectiveCParser$AttributeNameContext) -> exitAttributeName
    void enterAttributeParameters(parser.objc.ObjectiveCParser$AttributeParametersContext) -> enterAttributeParameters
    void exitAttributeParameters(parser.objc.ObjectiveCParser$AttributeParametersContext) -> exitAttributeParameters
    void enterAttributeParameterList(parser.objc.ObjectiveCParser$AttributeParameterListContext) -> enterAttributeParameterList
    void exitAttributeParameterList(parser.objc.ObjectiveCParser$AttributeParameterListContext) -> exitAttributeParameterList
    void enterAttributeParameter(parser.objc.ObjectiveCParser$AttributeParameterContext) -> enterAttributeParameter
    void exitAttributeParameter(parser.objc.ObjectiveCParser$AttributeParameterContext) -> exitAttributeParameter
    void enterAttributeParameterAssignment(parser.objc.ObjectiveCParser$AttributeParameterAssignmentContext) -> enterAttributeParameterAssignment
    void exitAttributeParameterAssignment(parser.objc.ObjectiveCParser$AttributeParameterAssignmentContext) -> exitAttributeParameterAssignment
    void enterDeclaration(parser.objc.ObjectiveCParser$DeclarationContext) -> enterDeclaration
    void exitDeclaration(parser.objc.ObjectiveCParser$DeclarationContext) -> exitDeclaration
    void enterFunctionCallExpression(parser.objc.ObjectiveCParser$FunctionCallExpressionContext) -> enterFunctionCallExpression
    void exitFunctionCallExpression(parser.objc.ObjectiveCParser$FunctionCallExpressionContext) -> exitFunctionCallExpression
    void enterEnumDeclaration(parser.objc.ObjectiveCParser$EnumDeclarationContext) -> enterEnumDeclaration
    void exitEnumDeclaration(parser.objc.ObjectiveCParser$EnumDeclarationContext) -> exitEnumDeclaration
    void enterVarDeclaration(parser.objc.ObjectiveCParser$VarDeclarationContext) -> enterVarDeclaration
    void exitVarDeclaration(parser.objc.ObjectiveCParser$VarDeclarationContext) -> exitVarDeclaration
    void enterTypedefDeclaration(parser.objc.ObjectiveCParser$TypedefDeclarationContext) -> enterTypedefDeclaration
    void exitTypedefDeclaration(parser.objc.ObjectiveCParser$TypedefDeclarationContext) -> exitTypedefDeclaration
    void enterTypeDeclaratorList(parser.objc.ObjectiveCParser$TypeDeclaratorListContext) -> enterTypeDeclaratorList
    void exitTypeDeclaratorList(parser.objc.ObjectiveCParser$TypeDeclaratorListContext) -> exitTypeDeclaratorList
    void enterTypeDeclarator(parser.objc.ObjectiveCParser$TypeDeclaratorContext) -> enterTypeDeclarator
    void exitTypeDeclarator(parser.objc.ObjectiveCParser$TypeDeclaratorContext) -> exitTypeDeclarator
    void enterDeclarationSpecifiers(parser.objc.ObjectiveCParser$DeclarationSpecifiersContext) -> enterDeclarationSpecifiers
    void exitDeclarationSpecifiers(parser.objc.ObjectiveCParser$DeclarationSpecifiersContext) -> exitDeclarationSpecifiers
    void enterAttributeSpecifier(parser.objc.ObjectiveCParser$AttributeSpecifierContext) -> enterAttributeSpecifier
    void exitAttributeSpecifier(parser.objc.ObjectiveCParser$AttributeSpecifierContext) -> exitAttributeSpecifier
    void enterInitDeclaratorList(parser.objc.ObjectiveCParser$InitDeclaratorListContext) -> enterInitDeclaratorList
    void exitInitDeclaratorList(parser.objc.ObjectiveCParser$InitDeclaratorListContext) -> exitInitDeclaratorList
    void enterInitDeclarator(parser.objc.ObjectiveCParser$InitDeclaratorContext) -> enterInitDeclarator
    void exitInitDeclarator(parser.objc.ObjectiveCParser$InitDeclaratorContext) -> exitInitDeclarator
    void enterStructOrUnionSpecifier(parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext) -> enterStructOrUnionSpecifier
    void exitStructOrUnionSpecifier(parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext) -> exitStructOrUnionSpecifier
    void enterFieldDeclaration(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> enterFieldDeclaration
    void exitFieldDeclaration(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> exitFieldDeclaration
    void enterSpecifierQualifierList(parser.objc.ObjectiveCParser$SpecifierQualifierListContext) -> enterSpecifierQualifierList
    void exitSpecifierQualifierList(parser.objc.ObjectiveCParser$SpecifierQualifierListContext) -> exitSpecifierQualifierList
    void enterIbOutletQualifier(parser.objc.ObjectiveCParser$IbOutletQualifierContext) -> enterIbOutletQualifier
    void exitIbOutletQualifier(parser.objc.ObjectiveCParser$IbOutletQualifierContext) -> exitIbOutletQualifier
    void enterArcBehaviourSpecifier(parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext) -> enterArcBehaviourSpecifier
    void exitArcBehaviourSpecifier(parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext) -> exitArcBehaviourSpecifier
    void enterNullabilitySpecifier(parser.objc.ObjectiveCParser$NullabilitySpecifierContext) -> enterNullabilitySpecifier
    void exitNullabilitySpecifier(parser.objc.ObjectiveCParser$NullabilitySpecifierContext) -> exitNullabilitySpecifier
    void enterStorageClassSpecifier(parser.objc.ObjectiveCParser$StorageClassSpecifierContext) -> enterStorageClassSpecifier
    void exitStorageClassSpecifier(parser.objc.ObjectiveCParser$StorageClassSpecifierContext) -> exitStorageClassSpecifier
    void enterTypePrefix(parser.objc.ObjectiveCParser$TypePrefixContext) -> enterTypePrefix
    void exitTypePrefix(parser.objc.ObjectiveCParser$TypePrefixContext) -> exitTypePrefix
    void enterTypeQualifier(parser.objc.ObjectiveCParser$TypeQualifierContext) -> enterTypeQualifier
    void exitTypeQualifier(parser.objc.ObjectiveCParser$TypeQualifierContext) -> exitTypeQualifier
    void enterProtocolQualifier(parser.objc.ObjectiveCParser$ProtocolQualifierContext) -> enterProtocolQualifier
    void exitProtocolQualifier(parser.objc.ObjectiveCParser$ProtocolQualifierContext) -> exitProtocolQualifier
    void enterTypeSpecifier(parser.objc.ObjectiveCParser$TypeSpecifierContext) -> enterTypeSpecifier
    void exitTypeSpecifier(parser.objc.ObjectiveCParser$TypeSpecifierContext) -> exitTypeSpecifier
    void enterTypeofExpression(parser.objc.ObjectiveCParser$TypeofExpressionContext) -> enterTypeofExpression
    void exitTypeofExpression(parser.objc.ObjectiveCParser$TypeofExpressionContext) -> exitTypeofExpression
    void enterFieldDeclaratorList(parser.objc.ObjectiveCParser$FieldDeclaratorListContext) -> enterFieldDeclaratorList
    void exitFieldDeclaratorList(parser.objc.ObjectiveCParser$FieldDeclaratorListContext) -> exitFieldDeclaratorList
    void enterFieldDeclarator(parser.objc.ObjectiveCParser$FieldDeclaratorContext) -> enterFieldDeclarator
    void exitFieldDeclarator(parser.objc.ObjectiveCParser$FieldDeclaratorContext) -> exitFieldDeclarator
    void enterEnumSpecifier(parser.objc.ObjectiveCParser$EnumSpecifierContext) -> enterEnumSpecifier
    void exitEnumSpecifier(parser.objc.ObjectiveCParser$EnumSpecifierContext) -> exitEnumSpecifier
    void enterEnumeratorList(parser.objc.ObjectiveCParser$EnumeratorListContext) -> enterEnumeratorList
    void exitEnumeratorList(parser.objc.ObjectiveCParser$EnumeratorListContext) -> exitEnumeratorList
    void enterEnumerator(parser.objc.ObjectiveCParser$EnumeratorContext) -> enterEnumerator
    void exitEnumerator(parser.objc.ObjectiveCParser$EnumeratorContext) -> exitEnumerator
    void enterEnumeratorIdentifier(parser.objc.ObjectiveCParser$EnumeratorIdentifierContext) -> enterEnumeratorIdentifier
    void exitEnumeratorIdentifier(parser.objc.ObjectiveCParser$EnumeratorIdentifierContext) -> exitEnumeratorIdentifier
    void enterDirectDeclarator(parser.objc.ObjectiveCParser$DirectDeclaratorContext) -> enterDirectDeclarator
    void exitDirectDeclarator(parser.objc.ObjectiveCParser$DirectDeclaratorContext) -> exitDirectDeclarator
    void enterDeclaratorSuffix(parser.objc.ObjectiveCParser$DeclaratorSuffixContext) -> enterDeclaratorSuffix
    void exitDeclaratorSuffix(parser.objc.ObjectiveCParser$DeclaratorSuffixContext) -> exitDeclaratorSuffix
    void enterParameterList(parser.objc.ObjectiveCParser$ParameterListContext) -> enterParameterList
    void exitParameterList(parser.objc.ObjectiveCParser$ParameterListContext) -> exitParameterList
    void enterPointer(parser.objc.ObjectiveCParser$PointerContext) -> enterPointer
    void exitPointer(parser.objc.ObjectiveCParser$PointerContext) -> exitPointer
    void enterMacro(parser.objc.ObjectiveCParser$MacroContext) -> enterMacro
    void exitMacro(parser.objc.ObjectiveCParser$MacroContext) -> exitMacro
    void enterArrayInitializer(parser.objc.ObjectiveCParser$ArrayInitializerContext) -> enterArrayInitializer
    void exitArrayInitializer(parser.objc.ObjectiveCParser$ArrayInitializerContext) -> exitArrayInitializer
    void enterStructInitializer(parser.objc.ObjectiveCParser$StructInitializerContext) -> enterStructInitializer
    void exitStructInitializer(parser.objc.ObjectiveCParser$StructInitializerContext) -> exitStructInitializer
    void enterInitializerList(parser.objc.ObjectiveCParser$InitializerListContext) -> enterInitializerList
    void exitInitializerList(parser.objc.ObjectiveCParser$InitializerListContext) -> exitInitializerList
    void enterTypeName(parser.objc.ObjectiveCParser$TypeNameContext) -> enterTypeName
    void exitTypeName(parser.objc.ObjectiveCParser$TypeNameContext) -> exitTypeName
    void enterAbstractDeclarator(parser.objc.ObjectiveCParser$AbstractDeclaratorContext) -> enterAbstractDeclarator
    void exitAbstractDeclarator(parser.objc.ObjectiveCParser$AbstractDeclaratorContext) -> exitAbstractDeclarator
    void enterAbstractDeclaratorSuffix(parser.objc.ObjectiveCParser$AbstractDeclaratorSuffixContext) -> enterAbstractDeclaratorSuffix
    void exitAbstractDeclaratorSuffix(parser.objc.ObjectiveCParser$AbstractDeclaratorSuffixContext) -> exitAbstractDeclaratorSuffix
    void enterParameterDeclarationList(parser.objc.ObjectiveCParser$ParameterDeclarationListContext) -> enterParameterDeclarationList
    void exitParameterDeclarationList(parser.objc.ObjectiveCParser$ParameterDeclarationListContext) -> exitParameterDeclarationList
    void enterParameterDeclaration(parser.objc.ObjectiveCParser$ParameterDeclarationContext) -> enterParameterDeclaration
    void exitParameterDeclaration(parser.objc.ObjectiveCParser$ParameterDeclarationContext) -> exitParameterDeclaration
    void enterDeclarator(parser.objc.ObjectiveCParser$DeclaratorContext) -> enterDeclarator
    void exitDeclarator(parser.objc.ObjectiveCParser$DeclaratorContext) -> exitDeclarator
    void enterStatement(parser.objc.ObjectiveCParser$StatementContext) -> enterStatement
    void exitStatement(parser.objc.ObjectiveCParser$StatementContext) -> exitStatement
    void enterLabeledStatement(parser.objc.ObjectiveCParser$LabeledStatementContext) -> enterLabeledStatement
    void exitLabeledStatement(parser.objc.ObjectiveCParser$LabeledStatementContext) -> exitLabeledStatement
    void enterRangeExpression(parser.objc.ObjectiveCParser$RangeExpressionContext) -> enterRangeExpression
    void exitRangeExpression(parser.objc.ObjectiveCParser$RangeExpressionContext) -> exitRangeExpression
    void enterCompoundStatement(parser.objc.ObjectiveCParser$CompoundStatementContext) -> enterCompoundStatement
    void exitCompoundStatement(parser.objc.ObjectiveCParser$CompoundStatementContext) -> exitCompoundStatement
    void enterSelectionStatement(parser.objc.ObjectiveCParser$SelectionStatementContext) -> enterSelectionStatement
    void exitSelectionStatement(parser.objc.ObjectiveCParser$SelectionStatementContext) -> exitSelectionStatement
    void enterSwitchStatement(parser.objc.ObjectiveCParser$SwitchStatementContext) -> enterSwitchStatement
    void exitSwitchStatement(parser.objc.ObjectiveCParser$SwitchStatementContext) -> exitSwitchStatement
    void enterSwitchBlock(parser.objc.ObjectiveCParser$SwitchBlockContext) -> enterSwitchBlock
    void exitSwitchBlock(parser.objc.ObjectiveCParser$SwitchBlockContext) -> exitSwitchBlock
    void enterSwitchSection(parser.objc.ObjectiveCParser$SwitchSectionContext) -> enterSwitchSection
    void exitSwitchSection(parser.objc.ObjectiveCParser$SwitchSectionContext) -> exitSwitchSection
    void enterSwitchLabel(parser.objc.ObjectiveCParser$SwitchLabelContext) -> enterSwitchLabel
    void exitSwitchLabel(parser.objc.ObjectiveCParser$SwitchLabelContext) -> exitSwitchLabel
    void enterIterationStatement(parser.objc.ObjectiveCParser$IterationStatementContext) -> enterIterationStatement
    void exitIterationStatement(parser.objc.ObjectiveCParser$IterationStatementContext) -> exitIterationStatement
    void enterWhileStatement(parser.objc.ObjectiveCParser$WhileStatementContext) -> enterWhileStatement
    void exitWhileStatement(parser.objc.ObjectiveCParser$WhileStatementContext) -> exitWhileStatement
    void enterDoStatement(parser.objc.ObjectiveCParser$DoStatementContext) -> enterDoStatement
    void exitDoStatement(parser.objc.ObjectiveCParser$DoStatementContext) -> exitDoStatement
    void enterForStatement(parser.objc.ObjectiveCParser$ForStatementContext) -> enterForStatement
    void exitForStatement(parser.objc.ObjectiveCParser$ForStatementContext) -> exitForStatement
    void enterForLoopInitializer(parser.objc.ObjectiveCParser$ForLoopInitializerContext) -> enterForLoopInitializer
    void exitForLoopInitializer(parser.objc.ObjectiveCParser$ForLoopInitializerContext) -> exitForLoopInitializer
    void enterForInStatement(parser.objc.ObjectiveCParser$ForInStatementContext) -> enterForInStatement
    void exitForInStatement(parser.objc.ObjectiveCParser$ForInStatementContext) -> exitForInStatement
    void enterJumpStatement(parser.objc.ObjectiveCParser$JumpStatementContext) -> enterJumpStatement
    void exitJumpStatement(parser.objc.ObjectiveCParser$JumpStatementContext) -> exitJumpStatement
    void enterExpressions(parser.objc.ObjectiveCParser$ExpressionsContext) -> enterExpressions
    void exitExpressions(parser.objc.ObjectiveCParser$ExpressionsContext) -> exitExpressions
    void enterExpression(parser.objc.ObjectiveCParser$ExpressionContext) -> enterExpression
    void exitExpression(parser.objc.ObjectiveCParser$ExpressionContext) -> exitExpression
    void enterAssignmentOperator(parser.objc.ObjectiveCParser$AssignmentOperatorContext) -> enterAssignmentOperator
    void exitAssignmentOperator(parser.objc.ObjectiveCParser$AssignmentOperatorContext) -> exitAssignmentOperator
    void enterCastExpression(parser.objc.ObjectiveCParser$CastExpressionContext) -> enterCastExpression
    void exitCastExpression(parser.objc.ObjectiveCParser$CastExpressionContext) -> exitCastExpression
    void enterInitializer(parser.objc.ObjectiveCParser$InitializerContext) -> enterInitializer
    void exitInitializer(parser.objc.ObjectiveCParser$InitializerContext) -> exitInitializer
    void enterConstantExpression(parser.objc.ObjectiveCParser$ConstantExpressionContext) -> enterConstantExpression
    void exitConstantExpression(parser.objc.ObjectiveCParser$ConstantExpressionContext) -> exitConstantExpression
    void enterUnaryExpression(parser.objc.ObjectiveCParser$UnaryExpressionContext) -> enterUnaryExpression
    void exitUnaryExpression(parser.objc.ObjectiveCParser$UnaryExpressionContext) -> exitUnaryExpression
    void enterUnaryOperator(parser.objc.ObjectiveCParser$UnaryOperatorContext) -> enterUnaryOperator
    void exitUnaryOperator(parser.objc.ObjectiveCParser$UnaryOperatorContext) -> exitUnaryOperator
    void enterPostfixExpression(parser.objc.ObjectiveCParser$PostfixExpressionContext) -> enterPostfixExpression
    void exitPostfixExpression(parser.objc.ObjectiveCParser$PostfixExpressionContext) -> exitPostfixExpression
    void enterPostfix(parser.objc.ObjectiveCParser$PostfixContext) -> enterPostfix
    void exitPostfix(parser.objc.ObjectiveCParser$PostfixContext) -> exitPostfix
    void enterArgumentExpressionList(parser.objc.ObjectiveCParser$ArgumentExpressionListContext) -> enterArgumentExpressionList
    void exitArgumentExpressionList(parser.objc.ObjectiveCParser$ArgumentExpressionListContext) -> exitArgumentExpressionList
    void enterArgumentExpression(parser.objc.ObjectiveCParser$ArgumentExpressionContext) -> enterArgumentExpression
    void exitArgumentExpression(parser.objc.ObjectiveCParser$ArgumentExpressionContext) -> exitArgumentExpression
    void enterPrimaryExpression(parser.objc.ObjectiveCParser$PrimaryExpressionContext) -> enterPrimaryExpression
    void exitPrimaryExpression(parser.objc.ObjectiveCParser$PrimaryExpressionContext) -> exitPrimaryExpression
    void enterConstant(parser.objc.ObjectiveCParser$ConstantContext) -> enterConstant
    void exitConstant(parser.objc.ObjectiveCParser$ConstantContext) -> exitConstant
    void enterStringLiteral(parser.objc.ObjectiveCParser$StringLiteralContext) -> enterStringLiteral
    void exitStringLiteral(parser.objc.ObjectiveCParser$StringLiteralContext) -> exitStringLiteral
    void enterIdentifier(parser.objc.ObjectiveCParser$IdentifierContext) -> enterIdentifier
    void exitIdentifier(parser.objc.ObjectiveCParser$IdentifierContext) -> exitIdentifier
    void enterEveryRule(org.antlr.v4.runtime.ParserRuleContext) -> enterEveryRule
    void exitEveryRule(org.antlr.v4.runtime.ParserRuleContext) -> exitEveryRule
    void visitTerminal(org.antlr.v4.runtime.tree.TerminalNode) -> visitTerminal
    void visitErrorNode(org.antlr.v4.runtime.tree.ErrorNode) -> visitErrorNode
parser.objc.ObjectiveCParserListener -> parser.objc.ObjectiveCParserListener:
    void enterTranslationUnit(parser.objc.ObjectiveCParser$TranslationUnitContext) -> enterTranslationUnit
    void exitTranslationUnit(parser.objc.ObjectiveCParser$TranslationUnitContext) -> exitTranslationUnit
    void enterTopLevelDeclaration(parser.objc.ObjectiveCParser$TopLevelDeclarationContext) -> enterTopLevelDeclaration
    void exitTopLevelDeclaration(parser.objc.ObjectiveCParser$TopLevelDeclarationContext) -> exitTopLevelDeclaration
    void enterImportDeclaration(parser.objc.ObjectiveCParser$ImportDeclarationContext) -> enterImportDeclaration
    void exitImportDeclaration(parser.objc.ObjectiveCParser$ImportDeclarationContext) -> exitImportDeclaration
    void enterClassInterface(parser.objc.ObjectiveCParser$ClassInterfaceContext) -> enterClassInterface
    void exitClassInterface(parser.objc.ObjectiveCParser$ClassInterfaceContext) -> exitClassInterface
    void enterCategoryInterface(parser.objc.ObjectiveCParser$CategoryInterfaceContext) -> enterCategoryInterface
    void exitCategoryInterface(parser.objc.ObjectiveCParser$CategoryInterfaceContext) -> exitCategoryInterface
    void enterClassImplementation(parser.objc.ObjectiveCParser$ClassImplementationContext) -> enterClassImplementation
    void exitClassImplementation(parser.objc.ObjectiveCParser$ClassImplementationContext) -> exitClassImplementation
    void enterCategoryImplementation(parser.objc.ObjectiveCParser$CategoryImplementationContext) -> enterCategoryImplementation
    void exitCategoryImplementation(parser.objc.ObjectiveCParser$CategoryImplementationContext) -> exitCategoryImplementation
    void enterGenericTypeSpecifier(parser.objc.ObjectiveCParser$GenericTypeSpecifierContext) -> enterGenericTypeSpecifier
    void exitGenericTypeSpecifier(parser.objc.ObjectiveCParser$GenericTypeSpecifierContext) -> exitGenericTypeSpecifier
    void enterProtocolDeclaration(parser.objc.ObjectiveCParser$ProtocolDeclarationContext) -> enterProtocolDeclaration
    void exitProtocolDeclaration(parser.objc.ObjectiveCParser$ProtocolDeclarationContext) -> exitProtocolDeclaration
    void enterProtocolDeclarationSection(parser.objc.ObjectiveCParser$ProtocolDeclarationSectionContext) -> enterProtocolDeclarationSection
    void exitProtocolDeclarationSection(parser.objc.ObjectiveCParser$ProtocolDeclarationSectionContext) -> exitProtocolDeclarationSection
    void enterProtocolDeclarationList(parser.objc.ObjectiveCParser$ProtocolDeclarationListContext) -> enterProtocolDeclarationList
    void exitProtocolDeclarationList(parser.objc.ObjectiveCParser$ProtocolDeclarationListContext) -> exitProtocolDeclarationList
    void enterClassDeclarationList(parser.objc.ObjectiveCParser$ClassDeclarationListContext) -> enterClassDeclarationList
    void exitClassDeclarationList(parser.objc.ObjectiveCParser$ClassDeclarationListContext) -> exitClassDeclarationList
    void enterProtocolList(parser.objc.ObjectiveCParser$ProtocolListContext) -> enterProtocolList
    void exitProtocolList(parser.objc.ObjectiveCParser$ProtocolListContext) -> exitProtocolList
    void enterPropertyDeclaration(parser.objc.ObjectiveCParser$PropertyDeclarationContext) -> enterPropertyDeclaration
    void exitPropertyDeclaration(parser.objc.ObjectiveCParser$PropertyDeclarationContext) -> exitPropertyDeclaration
    void enterPropertyAttributesList(parser.objc.ObjectiveCParser$PropertyAttributesListContext) -> enterPropertyAttributesList
    void exitPropertyAttributesList(parser.objc.ObjectiveCParser$PropertyAttributesListContext) -> exitPropertyAttributesList
    void enterPropertyAttribute(parser.objc.ObjectiveCParser$PropertyAttributeContext) -> enterPropertyAttribute
    void exitPropertyAttribute(parser.objc.ObjectiveCParser$PropertyAttributeContext) -> exitPropertyAttribute
    void enterProtocolName(parser.objc.ObjectiveCParser$ProtocolNameContext) -> enterProtocolName
    void exitProtocolName(parser.objc.ObjectiveCParser$ProtocolNameContext) -> exitProtocolName
    void enterInstanceVariables(parser.objc.ObjectiveCParser$InstanceVariablesContext) -> enterInstanceVariables
    void exitInstanceVariables(parser.objc.ObjectiveCParser$InstanceVariablesContext) -> exitInstanceVariables
    void enterVisibilitySection(parser.objc.ObjectiveCParser$VisibilitySectionContext) -> enterVisibilitySection
    void exitVisibilitySection(parser.objc.ObjectiveCParser$VisibilitySectionContext) -> exitVisibilitySection
    void enterAccessModifier(parser.objc.ObjectiveCParser$AccessModifierContext) -> enterAccessModifier
    void exitAccessModifier(parser.objc.ObjectiveCParser$AccessModifierContext) -> exitAccessModifier
    void enterInterfaceDeclarationList(parser.objc.ObjectiveCParser$InterfaceDeclarationListContext) -> enterInterfaceDeclarationList
    void exitInterfaceDeclarationList(parser.objc.ObjectiveCParser$InterfaceDeclarationListContext) -> exitInterfaceDeclarationList
    void enterClassMethodDeclaration(parser.objc.ObjectiveCParser$ClassMethodDeclarationContext) -> enterClassMethodDeclaration
    void exitClassMethodDeclaration(parser.objc.ObjectiveCParser$ClassMethodDeclarationContext) -> exitClassMethodDeclaration
    void enterInstanceMethodDeclaration(parser.objc.ObjectiveCParser$InstanceMethodDeclarationContext) -> enterInstanceMethodDeclaration
    void exitInstanceMethodDeclaration(parser.objc.ObjectiveCParser$InstanceMethodDeclarationContext) -> exitInstanceMethodDeclaration
    void enterMethodDeclaration(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> enterMethodDeclaration
    void exitMethodDeclaration(parser.objc.ObjectiveCParser$MethodDeclarationContext) -> exitMethodDeclaration
    void enterImplementationDefinitionList(parser.objc.ObjectiveCParser$ImplementationDefinitionListContext) -> enterImplementationDefinitionList
    void exitImplementationDefinitionList(parser.objc.ObjectiveCParser$ImplementationDefinitionListContext) -> exitImplementationDefinitionList
    void enterClassMethodDefinition(parser.objc.ObjectiveCParser$ClassMethodDefinitionContext) -> enterClassMethodDefinition
    void exitClassMethodDefinition(parser.objc.ObjectiveCParser$ClassMethodDefinitionContext) -> exitClassMethodDefinition
    void enterInstanceMethodDefinition(parser.objc.ObjectiveCParser$InstanceMethodDefinitionContext) -> enterInstanceMethodDefinition
    void exitInstanceMethodDefinition(parser.objc.ObjectiveCParser$InstanceMethodDefinitionContext) -> exitInstanceMethodDefinition
    void enterMethodDefinition(parser.objc.ObjectiveCParser$MethodDefinitionContext) -> enterMethodDefinition
    void exitMethodDefinition(parser.objc.ObjectiveCParser$MethodDefinitionContext) -> exitMethodDefinition
    void enterMethodSelector(parser.objc.ObjectiveCParser$MethodSelectorContext) -> enterMethodSelector
    void exitMethodSelector(parser.objc.ObjectiveCParser$MethodSelectorContext) -> exitMethodSelector
    void enterKeywordDeclarator(parser.objc.ObjectiveCParser$KeywordDeclaratorContext) -> enterKeywordDeclarator
    void exitKeywordDeclarator(parser.objc.ObjectiveCParser$KeywordDeclaratorContext) -> exitKeywordDeclarator
    void enterSelector(parser.objc.ObjectiveCParser$SelectorContext) -> enterSelector
    void exitSelector(parser.objc.ObjectiveCParser$SelectorContext) -> exitSelector
    void enterMethodType(parser.objc.ObjectiveCParser$MethodTypeContext) -> enterMethodType
    void exitMethodType(parser.objc.ObjectiveCParser$MethodTypeContext) -> exitMethodType
    void enterPropertyImplementation(parser.objc.ObjectiveCParser$PropertyImplementationContext) -> enterPropertyImplementation
    void exitPropertyImplementation(parser.objc.ObjectiveCParser$PropertyImplementationContext) -> exitPropertyImplementation
    void enterPropertySynthesizeList(parser.objc.ObjectiveCParser$PropertySynthesizeListContext) -> enterPropertySynthesizeList
    void exitPropertySynthesizeList(parser.objc.ObjectiveCParser$PropertySynthesizeListContext) -> exitPropertySynthesizeList
    void enterPropertySynthesizeItem(parser.objc.ObjectiveCParser$PropertySynthesizeItemContext) -> enterPropertySynthesizeItem
    void exitPropertySynthesizeItem(parser.objc.ObjectiveCParser$PropertySynthesizeItemContext) -> exitPropertySynthesizeItem
    void enterBlockType(parser.objc.ObjectiveCParser$BlockTypeContext) -> enterBlockType
    void exitBlockType(parser.objc.ObjectiveCParser$BlockTypeContext) -> exitBlockType
    void enterGenericsSpecifier(parser.objc.ObjectiveCParser$GenericsSpecifierContext) -> enterGenericsSpecifier
    void exitGenericsSpecifier(parser.objc.ObjectiveCParser$GenericsSpecifierContext) -> exitGenericsSpecifier
    void enterTypeSpecifierWithPrefixes(parser.objc.ObjectiveCParser$TypeSpecifierWithPrefixesContext) -> enterTypeSpecifierWithPrefixes
    void exitTypeSpecifierWithPrefixes(parser.objc.ObjectiveCParser$TypeSpecifierWithPrefixesContext) -> exitTypeSpecifierWithPrefixes
    void enterDictionaryExpression(parser.objc.ObjectiveCParser$DictionaryExpressionContext) -> enterDictionaryExpression
    void exitDictionaryExpression(parser.objc.ObjectiveCParser$DictionaryExpressionContext) -> exitDictionaryExpression
    void enterDictionaryPair(parser.objc.ObjectiveCParser$DictionaryPairContext) -> enterDictionaryPair
    void exitDictionaryPair(parser.objc.ObjectiveCParser$DictionaryPairContext) -> exitDictionaryPair
    void enterArrayExpression(parser.objc.ObjectiveCParser$ArrayExpressionContext) -> enterArrayExpression
    void exitArrayExpression(parser.objc.ObjectiveCParser$ArrayExpressionContext) -> exitArrayExpression
    void enterBoxExpression(parser.objc.ObjectiveCParser$BoxExpressionContext) -> enterBoxExpression
    void exitBoxExpression(parser.objc.ObjectiveCParser$BoxExpressionContext) -> exitBoxExpression
    void enterBlockParameters(parser.objc.ObjectiveCParser$BlockParametersContext) -> enterBlockParameters
    void exitBlockParameters(parser.objc.ObjectiveCParser$BlockParametersContext) -> exitBlockParameters
    void enterTypeVariableDeclaratorOrName(parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext) -> enterTypeVariableDeclaratorOrName
    void exitTypeVariableDeclaratorOrName(parser.objc.ObjectiveCParser$TypeVariableDeclaratorOrNameContext) -> exitTypeVariableDeclaratorOrName
    void enterBlockExpression(parser.objc.ObjectiveCParser$BlockExpressionContext) -> enterBlockExpression
    void exitBlockExpression(parser.objc.ObjectiveCParser$BlockExpressionContext) -> exitBlockExpression
    void enterMessageExpression(parser.objc.ObjectiveCParser$MessageExpressionContext) -> enterMessageExpression
    void exitMessageExpression(parser.objc.ObjectiveCParser$MessageExpressionContext) -> exitMessageExpression
    void enterReceiver(parser.objc.ObjectiveCParser$ReceiverContext) -> enterReceiver
    void exitReceiver(parser.objc.ObjectiveCParser$ReceiverContext) -> exitReceiver
    void enterMessageSelector(parser.objc.ObjectiveCParser$MessageSelectorContext) -> enterMessageSelector
    void exitMessageSelector(parser.objc.ObjectiveCParser$MessageSelectorContext) -> exitMessageSelector
    void enterKeywordArgument(parser.objc.ObjectiveCParser$KeywordArgumentContext) -> enterKeywordArgument
    void exitKeywordArgument(parser.objc.ObjectiveCParser$KeywordArgumentContext) -> exitKeywordArgument
    void enterKeywordArgumentType(parser.objc.ObjectiveCParser$KeywordArgumentTypeContext) -> enterKeywordArgumentType
    void exitKeywordArgumentType(parser.objc.ObjectiveCParser$KeywordArgumentTypeContext) -> exitKeywordArgumentType
    void enterSelectorExpression(parser.objc.ObjectiveCParser$SelectorExpressionContext) -> enterSelectorExpression
    void exitSelectorExpression(parser.objc.ObjectiveCParser$SelectorExpressionContext) -> exitSelectorExpression
    void enterSelectorName(parser.objc.ObjectiveCParser$SelectorNameContext) -> enterSelectorName
    void exitSelectorName(parser.objc.ObjectiveCParser$SelectorNameContext) -> exitSelectorName
    void enterProtocolExpression(parser.objc.ObjectiveCParser$ProtocolExpressionContext) -> enterProtocolExpression
    void exitProtocolExpression(parser.objc.ObjectiveCParser$ProtocolExpressionContext) -> exitProtocolExpression
    void enterEncodeExpression(parser.objc.ObjectiveCParser$EncodeExpressionContext) -> enterEncodeExpression
    void exitEncodeExpression(parser.objc.ObjectiveCParser$EncodeExpressionContext) -> exitEncodeExpression
    void enterTypeVariableDeclarator(parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext) -> enterTypeVariableDeclarator
    void exitTypeVariableDeclarator(parser.objc.ObjectiveCParser$TypeVariableDeclaratorContext) -> exitTypeVariableDeclarator
    void enterThrowStatement(parser.objc.ObjectiveCParser$ThrowStatementContext) -> enterThrowStatement
    void exitThrowStatement(parser.objc.ObjectiveCParser$ThrowStatementContext) -> exitThrowStatement
    void enterTryBlock(parser.objc.ObjectiveCParser$TryBlockContext) -> enterTryBlock
    void exitTryBlock(parser.objc.ObjectiveCParser$TryBlockContext) -> exitTryBlock
    void enterCatchStatement(parser.objc.ObjectiveCParser$CatchStatementContext) -> enterCatchStatement
    void exitCatchStatement(parser.objc.ObjectiveCParser$CatchStatementContext) -> exitCatchStatement
    void enterSynchronizedStatement(parser.objc.ObjectiveCParser$SynchronizedStatementContext) -> enterSynchronizedStatement
    void exitSynchronizedStatement(parser.objc.ObjectiveCParser$SynchronizedStatementContext) -> exitSynchronizedStatement
    void enterAutoreleaseStatement(parser.objc.ObjectiveCParser$AutoreleaseStatementContext) -> enterAutoreleaseStatement
    void exitAutoreleaseStatement(parser.objc.ObjectiveCParser$AutoreleaseStatementContext) -> exitAutoreleaseStatement
    void enterFunctionDeclaration(parser.objc.ObjectiveCParser$FunctionDeclarationContext) -> enterFunctionDeclaration
    void exitFunctionDeclaration(parser.objc.ObjectiveCParser$FunctionDeclarationContext) -> exitFunctionDeclaration
    void enterFunctionDefinition(parser.objc.ObjectiveCParser$FunctionDefinitionContext) -> enterFunctionDefinition
    void exitFunctionDefinition(parser.objc.ObjectiveCParser$FunctionDefinitionContext) -> exitFunctionDefinition
    void enterFunctionSignature(parser.objc.ObjectiveCParser$FunctionSignatureContext) -> enterFunctionSignature
    void exitFunctionSignature(parser.objc.ObjectiveCParser$FunctionSignatureContext) -> exitFunctionSignature
    void enterAttribute(parser.objc.ObjectiveCParser$AttributeContext) -> enterAttribute
    void exitAttribute(parser.objc.ObjectiveCParser$AttributeContext) -> exitAttribute
    void enterAttributeName(parser.objc.ObjectiveCParser$AttributeNameContext) -> enterAttributeName
    void exitAttributeName(parser.objc.ObjectiveCParser$AttributeNameContext) -> exitAttributeName
    void enterAttributeParameters(parser.objc.ObjectiveCParser$AttributeParametersContext) -> enterAttributeParameters
    void exitAttributeParameters(parser.objc.ObjectiveCParser$AttributeParametersContext) -> exitAttributeParameters
    void enterAttributeParameterList(parser.objc.ObjectiveCParser$AttributeParameterListContext) -> enterAttributeParameterList
    void exitAttributeParameterList(parser.objc.ObjectiveCParser$AttributeParameterListContext) -> exitAttributeParameterList
    void enterAttributeParameter(parser.objc.ObjectiveCParser$AttributeParameterContext) -> enterAttributeParameter
    void exitAttributeParameter(parser.objc.ObjectiveCParser$AttributeParameterContext) -> exitAttributeParameter
    void enterAttributeParameterAssignment(parser.objc.ObjectiveCParser$AttributeParameterAssignmentContext) -> enterAttributeParameterAssignment
    void exitAttributeParameterAssignment(parser.objc.ObjectiveCParser$AttributeParameterAssignmentContext) -> exitAttributeParameterAssignment
    void enterDeclaration(parser.objc.ObjectiveCParser$DeclarationContext) -> enterDeclaration
    void exitDeclaration(parser.objc.ObjectiveCParser$DeclarationContext) -> exitDeclaration
    void enterFunctionCallExpression(parser.objc.ObjectiveCParser$FunctionCallExpressionContext) -> enterFunctionCallExpression
    void exitFunctionCallExpression(parser.objc.ObjectiveCParser$FunctionCallExpressionContext) -> exitFunctionCallExpression
    void enterEnumDeclaration(parser.objc.ObjectiveCParser$EnumDeclarationContext) -> enterEnumDeclaration
    void exitEnumDeclaration(parser.objc.ObjectiveCParser$EnumDeclarationContext) -> exitEnumDeclaration
    void enterVarDeclaration(parser.objc.ObjectiveCParser$VarDeclarationContext) -> enterVarDeclaration
    void exitVarDeclaration(parser.objc.ObjectiveCParser$VarDeclarationContext) -> exitVarDeclaration
    void enterTypedefDeclaration(parser.objc.ObjectiveCParser$TypedefDeclarationContext) -> enterTypedefDeclaration
    void exitTypedefDeclaration(parser.objc.ObjectiveCParser$TypedefDeclarationContext) -> exitTypedefDeclaration
    void enterTypeDeclaratorList(parser.objc.ObjectiveCParser$TypeDeclaratorListContext) -> enterTypeDeclaratorList
    void exitTypeDeclaratorList(parser.objc.ObjectiveCParser$TypeDeclaratorListContext) -> exitTypeDeclaratorList
    void enterTypeDeclarator(parser.objc.ObjectiveCParser$TypeDeclaratorContext) -> enterTypeDeclarator
    void exitTypeDeclarator(parser.objc.ObjectiveCParser$TypeDeclaratorContext) -> exitTypeDeclarator
    void enterDeclarationSpecifiers(parser.objc.ObjectiveCParser$DeclarationSpecifiersContext) -> enterDeclarationSpecifiers
    void exitDeclarationSpecifiers(parser.objc.ObjectiveCParser$DeclarationSpecifiersContext) -> exitDeclarationSpecifiers
    void enterAttributeSpecifier(parser.objc.ObjectiveCParser$AttributeSpecifierContext) -> enterAttributeSpecifier
    void exitAttributeSpecifier(parser.objc.ObjectiveCParser$AttributeSpecifierContext) -> exitAttributeSpecifier
    void enterInitDeclaratorList(parser.objc.ObjectiveCParser$InitDeclaratorListContext) -> enterInitDeclaratorList
    void exitInitDeclaratorList(parser.objc.ObjectiveCParser$InitDeclaratorListContext) -> exitInitDeclaratorList
    void enterInitDeclarator(parser.objc.ObjectiveCParser$InitDeclaratorContext) -> enterInitDeclarator
    void exitInitDeclarator(parser.objc.ObjectiveCParser$InitDeclaratorContext) -> exitInitDeclarator
    void enterStructOrUnionSpecifier(parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext) -> enterStructOrUnionSpecifier
    void exitStructOrUnionSpecifier(parser.objc.ObjectiveCParser$StructOrUnionSpecifierContext) -> exitStructOrUnionSpecifier
    void enterFieldDeclaration(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> enterFieldDeclaration
    void exitFieldDeclaration(parser.objc.ObjectiveCParser$FieldDeclarationContext) -> exitFieldDeclaration
    void enterSpecifierQualifierList(parser.objc.ObjectiveCParser$SpecifierQualifierListContext) -> enterSpecifierQualifierList
    void exitSpecifierQualifierList(parser.objc.ObjectiveCParser$SpecifierQualifierListContext) -> exitSpecifierQualifierList
    void enterIbOutletQualifier(parser.objc.ObjectiveCParser$IbOutletQualifierContext) -> enterIbOutletQualifier
    void exitIbOutletQualifier(parser.objc.ObjectiveCParser$IbOutletQualifierContext) -> exitIbOutletQualifier
    void enterArcBehaviourSpecifier(parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext) -> enterArcBehaviourSpecifier
    void exitArcBehaviourSpecifier(parser.objc.ObjectiveCParser$ArcBehaviourSpecifierContext) -> exitArcBehaviourSpecifier
    void enterNullabilitySpecifier(parser.objc.ObjectiveCParser$NullabilitySpecifierContext) -> enterNullabilitySpecifier
    void exitNullabilitySpecifier(parser.objc.ObjectiveCParser$NullabilitySpecifierContext) -> exitNullabilitySpecifier
    void enterStorageClassSpecifier(parser.objc.ObjectiveCParser$StorageClassSpecifierContext) -> enterStorageClassSpecifier
    void exitStorageClassSpecifier(parser.objc.ObjectiveCParser$StorageClassSpecifierContext) -> exitStorageClassSpecifier
    void enterTypePrefix(parser.objc.ObjectiveCParser$TypePrefixContext) -> enterTypePrefix
    void exitTypePrefix(parser.objc.ObjectiveCParser$TypePrefixContext) -> exitTypePrefix
    void enterTypeQualifier(parser.objc.ObjectiveCParser$TypeQualifierContext) -> enterTypeQualifier
    void exitTypeQualifier(parser.objc.ObjectiveCParser$TypeQualifierContext) -> exitTypeQualifier
    void enterProtocolQualifier(parser.objc.ObjectiveCParser$ProtocolQualifierContext) -> enterProtocolQualifier
    void exitProtocolQualifier(parser.objc.ObjectiveCParser$ProtocolQualifierContext) -> exitProtocolQualifier
    void enterTypeSpecifier(parser.objc.ObjectiveCParser$TypeSpecifierContext) -> enterTypeSpecifier
    void exitTypeSpecifier(parser.objc.ObjectiveCParser$TypeSpecifierContext) -> exitTypeSpecifier
    void enterTypeofExpression(parser.objc.ObjectiveCParser$TypeofExpressionContext) -> enterTypeofExpression
    void exitTypeofExpression(parser.objc.ObjectiveCParser$TypeofExpressionContext) -> exitTypeofExpression
    void enterFieldDeclaratorList(parser.objc.ObjectiveCParser$FieldDeclaratorListContext) -> enterFieldDeclaratorList
    void exitFieldDeclaratorList(parser.objc.ObjectiveCParser$FieldDeclaratorListContext) -> exitFieldDeclaratorList
    void enterFieldDeclarator(parser.objc.ObjectiveCParser$FieldDeclaratorContext) -> enterFieldDeclarator
    void exitFieldDeclarator(parser.objc.ObjectiveCParser$FieldDeclaratorContext) -> exitFieldDeclarator
    void enterEnumSpecifier(parser.objc.ObjectiveCParser$EnumSpecifierContext) -> enterEnumSpecifier
    void exitEnumSpecifier(parser.objc.ObjectiveCParser$EnumSpecifierContext) -> exitEnumSpecifier
    void enterEnumeratorList(parser.objc.ObjectiveCParser$EnumeratorListContext) -> enterEnumeratorList
    void exitEnumeratorList(parser.objc.ObjectiveCParser$EnumeratorListContext) -> exitEnumeratorList
    void enterEnumerator(parser.objc.ObjectiveCParser$EnumeratorContext) -> enterEnumerator
    void exitEnumerator(parser.objc.ObjectiveCParser$EnumeratorContext) -> exitEnumerator
    void enterEnumeratorIdentifier(parser.objc.ObjectiveCParser$EnumeratorIdentifierContext) -> enterEnumeratorIdentifier
    void exitEnumeratorIdentifier(parser.objc.ObjectiveCParser$EnumeratorIdentifierContext) -> exitEnumeratorIdentifier
    void enterDirectDeclarator(parser.objc.ObjectiveCParser$DirectDeclaratorContext) -> enterDirectDeclarator
    void exitDirectDeclarator(parser.objc.ObjectiveCParser$DirectDeclaratorContext) -> exitDirectDeclarator
    void enterDeclaratorSuffix(parser.objc.ObjectiveCParser$DeclaratorSuffixContext) -> enterDeclaratorSuffix
    void exitDeclaratorSuffix(parser.objc.ObjectiveCParser$DeclaratorSuffixContext) -> exitDeclaratorSuffix
    void enterParameterList(parser.objc.ObjectiveCParser$ParameterListContext) -> enterParameterList
    void exitParameterList(parser.objc.ObjectiveCParser$ParameterListContext) -> exitParameterList
    void enterPointer(parser.objc.ObjectiveCParser$PointerContext) -> enterPointer
    void exitPointer(parser.objc.ObjectiveCParser$PointerContext) -> exitPointer
    void enterMacro(parser.objc.ObjectiveCParser$MacroContext) -> enterMacro
    void exitMacro(parser.objc.ObjectiveCParser$MacroContext) -> exitMacro
    void enterArrayInitializer(parser.objc.ObjectiveCParser$ArrayInitializerContext) -> enterArrayInitializer
    void exitArrayInitializer(parser.objc.ObjectiveCParser$ArrayInitializerContext) -> exitArrayInitializer
    void enterStructInitializer(parser.objc.ObjectiveCParser$StructInitializerContext) -> enterStructInitializer
    void exitStructInitializer(parser.objc.ObjectiveCParser$StructInitializerContext) -> exitStructInitializer
    void enterInitializerList(parser.objc.ObjectiveCParser$InitializerListContext) -> enterInitializerList
    void exitInitializerList(parser.objc.ObjectiveCParser$InitializerListContext) -> exitInitializerList
    void enterTypeName(parser.objc.ObjectiveCParser$TypeNameContext) -> enterTypeName
    void exitTypeName(parser.objc.ObjectiveCParser$TypeNameContext) -> exitTypeName
    void enterAbstractDeclarator(parser.objc.ObjectiveCParser$AbstractDeclaratorContext) -> enterAbstractDeclarator
    void exitAbstractDeclarator(parser.objc.ObjectiveCParser$AbstractDeclaratorContext) -> exitAbstractDeclarator
    void enterAbstractDeclaratorSuffix(parser.objc.ObjectiveCParser$AbstractDeclaratorSuffixContext) -> enterAbstractDeclaratorSuffix
    void exitAbstractDeclaratorSuffix(parser.objc.ObjectiveCParser$AbstractDeclaratorSuffixContext) -> exitAbstractDeclaratorSuffix
    void enterParameterDeclarationList(parser.objc.ObjectiveCParser$ParameterDeclarationListContext) -> enterParameterDeclarationList
    void exitParameterDeclarationList(parser.objc.ObjectiveCParser$ParameterDeclarationListContext) -> exitParameterDeclarationList
    void enterParameterDeclaration(parser.objc.ObjectiveCParser$ParameterDeclarationContext) -> enterParameterDeclaration
    void exitParameterDeclaration(parser.objc.ObjectiveCParser$ParameterDeclarationContext) -> exitParameterDeclaration
    void enterDeclarator(parser.objc.ObjectiveCParser$DeclaratorContext) -> enterDeclarator
    void exitDeclarator(parser.objc.ObjectiveCParser$DeclaratorContext) -> exitDeclarator
    void enterStatement(parser.objc.ObjectiveCParser$StatementContext) -> enterStatement
    void exitStatement(parser.objc.ObjectiveCParser$StatementContext) -> exitStatement
    void enterLabeledStatement(parser.objc.ObjectiveCParser$LabeledStatementContext) -> enterLabeledStatement
    void exitLabeledStatement(parser.objc.ObjectiveCParser$LabeledStatementContext) -> exitLabeledStatement
    void enterRangeExpression(parser.objc.ObjectiveCParser$RangeExpressionContext) -> enterRangeExpression
    void exitRangeExpression(parser.objc.ObjectiveCParser$RangeExpressionContext) -> exitRangeExpression
    void enterCompoundStatement(parser.objc.ObjectiveCParser$CompoundStatementContext) -> enterCompoundStatement
    void exitCompoundStatement(parser.objc.ObjectiveCParser$CompoundStatementContext) -> exitCompoundStatement
    void enterSelectionStatement(parser.objc.ObjectiveCParser$SelectionStatementContext) -> enterSelectionStatement
    void exitSelectionStatement(parser.objc.ObjectiveCParser$SelectionStatementContext) -> exitSelectionStatement
    void enterSwitchStatement(parser.objc.ObjectiveCParser$SwitchStatementContext) -> enterSwitchStatement
    void exitSwitchStatement(parser.objc.ObjectiveCParser$SwitchStatementContext) -> exitSwitchStatement
    void enterSwitchBlock(parser.objc.ObjectiveCParser$SwitchBlockContext) -> enterSwitchBlock
    void exitSwitchBlock(parser.objc.ObjectiveCParser$SwitchBlockContext) -> exitSwitchBlock
    void enterSwitchSection(parser.objc.ObjectiveCParser$SwitchSectionContext) -> enterSwitchSection
    void exitSwitchSection(parser.objc.ObjectiveCParser$SwitchSectionContext) -> exitSwitchSection
    void enterSwitchLabel(parser.objc.ObjectiveCParser$SwitchLabelContext) -> enterSwitchLabel
    void exitSwitchLabel(parser.objc.ObjectiveCParser$SwitchLabelContext) -> exitSwitchLabel
    void enterIterationStatement(parser.objc.ObjectiveCParser$IterationStatementContext) -> enterIterationStatement
    void exitIterationStatement(parser.objc.ObjectiveCParser$IterationStatementContext) -> exitIterationStatement
    void enterWhileStatement(parser.objc.ObjectiveCParser$WhileStatementContext) -> enterWhileStatement
    void exitWhileStatement(parser.objc.ObjectiveCParser$WhileStatementContext) -> exitWhileStatement
    void enterDoStatement(parser.objc.ObjectiveCParser$DoStatementContext) -> enterDoStatement
    void exitDoStatement(parser.objc.ObjectiveCParser$DoStatementContext) -> exitDoStatement
    void enterForStatement(parser.objc.ObjectiveCParser$ForStatementContext) -> enterForStatement
    void exitForStatement(parser.objc.ObjectiveCParser$ForStatementContext) -> exitForStatement
    void enterForLoopInitializer(parser.objc.ObjectiveCParser$ForLoopInitializerContext) -> enterForLoopInitializer
    void exitForLoopInitializer(parser.objc.ObjectiveCParser$ForLoopInitializerContext) -> exitForLoopInitializer
    void enterForInStatement(parser.objc.ObjectiveCParser$ForInStatementContext) -> enterForInStatement
    void exitForInStatement(parser.objc.ObjectiveCParser$ForInStatementContext) -> exitForInStatement
    void enterJumpStatement(parser.objc.ObjectiveCParser$JumpStatementContext) -> enterJumpStatement
    void exitJumpStatement(parser.objc.ObjectiveCParser$JumpStatementContext) -> exitJumpStatement
    void enterExpressions(parser.objc.ObjectiveCParser$ExpressionsContext) -> enterExpressions
    void exitExpressions(parser.objc.ObjectiveCParser$ExpressionsContext) -> exitExpressions
    void enterExpression(parser.objc.ObjectiveCParser$ExpressionContext) -> enterExpression
    void exitExpression(parser.objc.ObjectiveCParser$ExpressionContext) -> exitExpression
    void enterAssignmentOperator(parser.objc.ObjectiveCParser$AssignmentOperatorContext) -> enterAssignmentOperator
    void exitAssignmentOperator(parser.objc.ObjectiveCParser$AssignmentOperatorContext) -> exitAssignmentOperator
    void enterCastExpression(parser.objc.ObjectiveCParser$CastExpressionContext) -> enterCastExpression
    void exitCastExpression(parser.objc.ObjectiveCParser$CastExpressionContext) -> exitCastExpression
    void enterInitializer(parser.objc.ObjectiveCParser$InitializerContext) -> enterInitializer
    void exitInitializer(parser.objc.ObjectiveCParser$InitializerContext) -> exitInitializer
    void enterConstantExpression(parser.objc.ObjectiveCParser$ConstantExpressionContext) -> enterConstantExpression
    void exitConstantExpression(parser.objc.ObjectiveCParser$ConstantExpressionContext) -> exitConstantExpression
    void enterUnaryExpression(parser.objc.ObjectiveCParser$UnaryExpressionContext) -> enterUnaryExpression
    void exitUnaryExpression(parser.objc.ObjectiveCParser$UnaryExpressionContext) -> exitUnaryExpression
    void enterUnaryOperator(parser.objc.ObjectiveCParser$UnaryOperatorContext) -> enterUnaryOperator
    void exitUnaryOperator(parser.objc.ObjectiveCParser$UnaryOperatorContext) -> exitUnaryOperator
    void enterPostfixExpression(parser.objc.ObjectiveCParser$PostfixExpressionContext) -> enterPostfixExpression
    void exitPostfixExpression(parser.objc.ObjectiveCParser$PostfixExpressionContext) -> exitPostfixExpression
    void enterPostfix(parser.objc.ObjectiveCParser$PostfixContext) -> enterPostfix
    void exitPostfix(parser.objc.ObjectiveCParser$PostfixContext) -> exitPostfix
    void enterArgumentExpressionList(parser.objc.ObjectiveCParser$ArgumentExpressionListContext) -> enterArgumentExpressionList
    void exitArgumentExpressionList(parser.objc.ObjectiveCParser$ArgumentExpressionListContext) -> exitArgumentExpressionList
    void enterArgumentExpression(parser.objc.ObjectiveCParser$ArgumentExpressionContext) -> enterArgumentExpression
    void exitArgumentExpression(parser.objc.ObjectiveCParser$ArgumentExpressionContext) -> exitArgumentExpression
    void enterPrimaryExpression(parser.objc.ObjectiveCParser$PrimaryExpressionContext) -> enterPrimaryExpression
    void exitPrimaryExpression(parser.objc.ObjectiveCParser$PrimaryExpressionContext) -> exitPrimaryExpression
    void enterConstant(parser.objc.ObjectiveCParser$ConstantContext) -> enterConstant
    void exitConstant(parser.objc.ObjectiveCParser$ConstantContext) -> exitConstant
    void enterStringLiteral(parser.objc.ObjectiveCParser$StringLiteralContext) -> enterStringLiteral
    void exitStringLiteral(parser.objc.ObjectiveCParser$StringLiteralContext) -> exitStringLiteral
    void enterIdentifier(parser.objc.ObjectiveCParser$IdentifierContext) -> enterIdentifier
    void exitIdentifier(parser.objc.ObjectiveCParser$IdentifierContext) -> exitIdentifier
parser.objc.ObjectiveCPreprocessorParser -> parser.objc.ObjectiveCPreprocessorParser:
    org.antlr.v4.runtime.dfa.DFA[] _decisionToDFA -> _decisionToDFA
    org.antlr.v4.runtime.atn.PredictionContextCache _sharedContextCache -> _sharedContextCache
    int AUTO -> AUTO
    int BREAK -> BREAK
    int CASE -> CASE
    int CHAR -> CHAR
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DEFAULT -> DEFAULT
    int DO -> DO
    int DOUBLE -> DOUBLE
    int ELSE -> ELSE
    int ENUM -> ENUM
    int EXTERN -> EXTERN
    int FLOAT -> FLOAT
    int FOR -> FOR
    int GOTO -> GOTO
    int IF -> IF
    int INLINE -> INLINE
    int INT -> INT
    int LONG -> LONG
    int REGISTER -> REGISTER
    int RESTRICT -> RESTRICT
    int RETURN -> RETURN
    int SHORT -> SHORT
    int SIGNED -> SIGNED
    int SIZEOF -> SIZEOF
    int STATIC -> STATIC
    int STRUCT -> STRUCT
    int SWITCH -> SWITCH
    int TYPEDEF -> TYPEDEF
    int UNION -> UNION
    int UNSIGNED -> UNSIGNED
    int VOID -> VOID
    int VOLATILE -> VOLATILE
    int WHILE -> WHILE
    int BOOL_ -> BOOL_
    int COMPLEX -> COMPLEX
    int IMAGINERY -> IMAGINERY
    int TRUE -> TRUE
    int FALSE -> FALSE
    int BOOL -> BOOL
    int Class -> Class
    int BYCOPY -> BYCOPY
    int BYREF -> BYREF
    int ID -> ID
    int IMP -> IMP
    int IN -> IN
    int INOUT -> INOUT
    int NIL -> NIL
    int NO -> NO
    int NULL -> NULL
    int ONEWAY -> ONEWAY
    int OUT -> OUT
    int PROTOCOL_ -> PROTOCOL_
    int SEL -> SEL
    int SELF -> SELF
    int SUPER -> SUPER
    int YES -> YES
    int AUTORELEASEPOOL -> AUTORELEASEPOOL
    int CATCH -> CATCH
    int CLASS -> CLASS
    int DYNAMIC -> DYNAMIC
    int ENCODE -> ENCODE
    int END -> END
    int FINALLY -> FINALLY
    int IMPLEMENTATION -> IMPLEMENTATION
    int INTERFACE -> INTERFACE
    int IMPORT -> IMPORT
    int PACKAGE -> PACKAGE
    int PROTOCOL -> PROTOCOL
    int OPTIONAL -> OPTIONAL
    int PRIVATE -> PRIVATE
    int PROPERTY -> PROPERTY
    int PROTECTED -> PROTECTED
    int PUBLIC -> PUBLIC
    int REQUIRED -> REQUIRED
    int SELECTOR -> SELECTOR
    int SYNCHRONIZED -> SYNCHRONIZED
    int SYNTHESIZE -> SYNTHESIZE
    int THROW -> THROW
    int TRY -> TRY
    int ATOMIC -> ATOMIC
    int NONATOMIC -> NONATOMIC
    int RETAIN -> RETAIN
    int ATTRIBUTE -> ATTRIBUTE
    int AUTORELEASING_QUALIFIER -> AUTORELEASING_QUALIFIER
    int BLOCK -> BLOCK
    int BRIDGE -> BRIDGE
    int BRIDGE_RETAINED -> BRIDGE_RETAINED
    int BRIDGE_TRANSFER -> BRIDGE_TRANSFER
    int COVARIANT -> COVARIANT
    int CONTRAVARIANT -> CONTRAVARIANT
    int DEPRECATED -> DEPRECATED
    int KINDOF -> KINDOF
    int STRONG_QUALIFIER -> STRONG_QUALIFIER
    int TYPEOF -> TYPEOF
    int UNSAFE_UNRETAINED_QUALIFIER -> UNSAFE_UNRETAINED_QUALIFIER
    int UNUSED -> UNUSED
    int WEAK_QUALIFIER -> WEAK_QUALIFIER
    int NULL_UNSPECIFIED -> NULL_UNSPECIFIED
    int NULLABLE -> NULLABLE
    int NONNULL -> NONNULL
    int NULL_RESETTABLE -> NULL_RESETTABLE
    int NS_INLINE -> NS_INLINE
    int NS_ENUM -> NS_ENUM
    int NS_OPTIONS -> NS_OPTIONS
    int ASSIGN -> ASSIGN
    int COPY -> COPY
    int GETTER -> GETTER
    int SETTER -> SETTER
    int STRONG -> STRONG
    int READONLY -> READONLY
    int READWRITE -> READWRITE
    int WEAK -> WEAK
    int UNSAFE_UNRETAINED -> UNSAFE_UNRETAINED
    int IB_OUTLET -> IB_OUTLET
    int IB_OUTLET_COLLECTION -> IB_OUTLET_COLLECTION
    int IB_INSPECTABLE -> IB_INSPECTABLE
    int IB_DESIGNABLE -> IB_DESIGNABLE
    int NS_ASSUME_NONNULL_BEGIN -> NS_ASSUME_NONNULL_BEGIN
    int NS_ASSUME_NONNULL_END -> NS_ASSUME_NONNULL_END
    int EXTERN_SUFFIX -> EXTERN_SUFFIX
    int IOS_SUFFIX -> IOS_SUFFIX
    int MAC_SUFFIX -> MAC_SUFFIX
    int TVOS_PROHIBITED -> TVOS_PROHIBITED
    int IDENTIFIER -> IDENTIFIER
    int LP -> LP
    int RP -> RP
    int LBRACE -> LBRACE
    int RBRACE -> RBRACE
    int LBRACK -> LBRACK
    int RBRACK -> RBRACK
    int SEMI -> SEMI
    int COMMA -> COMMA
    int DOT -> DOT
    int STRUCTACCESS -> STRUCTACCESS
    int AT -> AT
    int ASSIGNMENT -> ASSIGNMENT
    int GT -> GT
    int LT -> LT
    int BANG -> BANG
    int TILDE -> TILDE
    int QUESTION -> QUESTION
    int COLON -> COLON
    int EQUAL -> EQUAL
    int LE -> LE
    int GE -> GE
    int NOTEQUAL -> NOTEQUAL
    int AND -> AND
    int OR -> OR
    int INC -> INC
    int DEC -> DEC
    int ADD -> ADD
    int SUB -> SUB
    int MUL -> MUL
    int DIV -> DIV
    int BITAND -> BITAND
    int BITOR -> BITOR
    int BITXOR -> BITXOR
    int MOD -> MOD
    int ADD_ASSIGN -> ADD_ASSIGN
    int SUB_ASSIGN -> SUB_ASSIGN
    int MUL_ASSIGN -> MUL_ASSIGN
    int DIV_ASSIGN -> DIV_ASSIGN
    int AND_ASSIGN -> AND_ASSIGN
    int OR_ASSIGN -> OR_ASSIGN
    int XOR_ASSIGN -> XOR_ASSIGN
    int MOD_ASSIGN -> MOD_ASSIGN
    int LSHIFT_ASSIGN -> LSHIFT_ASSIGN
    int RSHIFT_ASSIGN -> RSHIFT_ASSIGN
    int ELIPSIS -> ELIPSIS
    int CHARACTER_LITERAL -> CHARACTER_LITERAL
    int STRING_START -> STRING_START
    int HEX_LITERAL -> HEX_LITERAL
    int OCTAL_LITERAL -> OCTAL_LITERAL
    int BINARY_LITERAL -> BINARY_LITERAL
    int DECIMAL_LITERAL -> DECIMAL_LITERAL
    int FLOATING_POINT_LITERAL -> FLOATING_POINT_LITERAL
    int WS -> WS
    int MULTI_COMMENT -> MULTI_COMMENT
    int SINGLE_COMMENT -> SINGLE_COMMENT
    int BACKSLASH -> BACKSLASH
    int SHARP -> SHARP
    int STRING_NEWLINE -> STRING_NEWLINE
    int STRING_END -> STRING_END
    int STRING_VALUE -> STRING_VALUE
    int DIRECTIVE_IMPORT -> DIRECTIVE_IMPORT
    int DIRECTIVE_INCLUDE -> DIRECTIVE_INCLUDE
    int DIRECTIVE_PRAGMA -> DIRECTIVE_PRAGMA
    int DIRECTIVE_DEFINE -> DIRECTIVE_DEFINE
    int DIRECTIVE_DEFINED -> DIRECTIVE_DEFINED
    int DIRECTIVE_IF -> DIRECTIVE_IF
    int DIRECTIVE_ELIF -> DIRECTIVE_ELIF
    int DIRECTIVE_ELSE -> DIRECTIVE_ELSE
    int DIRECTIVE_UNDEF -> DIRECTIVE_UNDEF
    int DIRECTIVE_IFDEF -> DIRECTIVE_IFDEF
    int DIRECTIVE_IFNDEF -> DIRECTIVE_IFNDEF
    int DIRECTIVE_ENDIF -> DIRECTIVE_ENDIF
    int DIRECTIVE_TRUE -> DIRECTIVE_TRUE
    int DIRECTIVE_FALSE -> DIRECTIVE_FALSE
    int DIRECTIVE_ERROR -> DIRECTIVE_ERROR
    int DIRECTIVE_WARNING -> DIRECTIVE_WARNING
    int DIRECTIVE_BANG -> DIRECTIVE_BANG
    int DIRECTIVE_LP -> DIRECTIVE_LP
    int DIRECTIVE_RP -> DIRECTIVE_RP
    int DIRECTIVE_EQUAL -> DIRECTIVE_EQUAL
    int DIRECTIVE_NOTEQUAL -> DIRECTIVE_NOTEQUAL
    int DIRECTIVE_AND -> DIRECTIVE_AND
    int DIRECTIVE_OR -> DIRECTIVE_OR
    int DIRECTIVE_LT -> DIRECTIVE_LT
    int DIRECTIVE_GT -> DIRECTIVE_GT
    int DIRECTIVE_LE -> DIRECTIVE_LE
    int DIRECTIVE_GE -> DIRECTIVE_GE
    int DIRECTIVE_STRING -> DIRECTIVE_STRING
    int DIRECTIVE_ID -> DIRECTIVE_ID
    int DIRECTIVE_DECIMAL_LITERAL -> DIRECTIVE_DECIMAL_LITERAL
    int DIRECTIVE_FLOAT -> DIRECTIVE_FLOAT
    int DIRECTIVE_NEWLINE -> DIRECTIVE_NEWLINE
    int DIRECTIVE_MULTI_COMMENT -> DIRECTIVE_MULTI_COMMENT
    int DIRECTIVE_SINGLE_COMMENT -> DIRECTIVE_SINGLE_COMMENT
    int DIRECTIVE_BACKSLASH_NEWLINE -> DIRECTIVE_BACKSLASH_NEWLINE
    int DIRECTIVE_TEXT_NEWLINE -> DIRECTIVE_TEXT_NEWLINE
    int DIRECTIVE_TEXT -> DIRECTIVE_TEXT
    int RULE_directive -> RULE_directive
    int RULE_directiveText -> RULE_directiveText
    int RULE_preprocessorExpression -> RULE_preprocessorExpression
    java.lang.String[] ruleNames -> ruleNames
    java.lang.String[] _LITERAL_NAMES -> _LITERAL_NAMES
    java.lang.String[] _SYMBOLIC_NAMES -> _SYMBOLIC_NAMES
    org.antlr.v4.runtime.Vocabulary VOCABULARY -> VOCABULARY
    java.lang.String[] tokenNames -> tokenNames
    java.lang.String _serializedATN -> _serializedATN
    org.antlr.v4.runtime.atn.ATN _ATN -> _ATN
    java.lang.String[] makeRuleNames() -> makeRuleNames
    java.lang.String[] makeLiteralNames() -> makeLiteralNames
    java.lang.String[] makeSymbolicNames() -> makeSymbolicNames
    java.lang.String[] getTokenNames() -> getTokenNames
    org.antlr.v4.runtime.Vocabulary getVocabulary() -> getVocabulary
    java.lang.String getGrammarFileName() -> getGrammarFileName
    java.lang.String[] getRuleNames() -> getRuleNames
    java.lang.String getSerializedATN() -> getSerializedATN
    org.antlr.v4.runtime.atn.ATN getATN() -> getATN
    void <init>(org.antlr.v4.runtime.TokenStream) -> <init>
    parser.objc.ObjectiveCPreprocessorParser$DirectiveContext directive() -> directive
    parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext directiveText() -> directiveText
    parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext preprocessorExpression() -> preprocessorExpression
    parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext preprocessorExpression(int) -> preprocessorExpression
    boolean sempred(org.antlr.v4.runtime.RuleContext,int,int) -> sempred
    boolean preprocessorExpression_sempred(parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext,int) -> preprocessorExpression_sempred
    void <clinit>() -> <clinit>
parser.objc.ObjectiveCPreprocessorParser$DirectiveContext -> parser.objc.ObjectiveCPreprocessorParser$DirectiveContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void <init>() -> <init>
    void copyFrom(parser.objc.ObjectiveCPreprocessorParser$DirectiveContext) -> copyFrom
parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext -> parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext:
    java.util.List DIRECTIVE_TEXT() -> DIRECTIVE_TEXT
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_TEXT(int) -> DIRECTIVE_TEXT
    java.util.List DIRECTIVE_TEXT_NEWLINE() -> DIRECTIVE_TEXT_NEWLINE
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_TEXT_NEWLINE(int) -> DIRECTIVE_TEXT_NEWLINE
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorBinaryContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorBinaryContext:
    org.antlr.v4.runtime.Token op -> op
    java.util.List preprocessorExpression() -> preprocessorExpression
    parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext preprocessorExpression(int) -> preprocessorExpression
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_EQUAL() -> DIRECTIVE_EQUAL
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_NOTEQUAL() -> DIRECTIVE_NOTEQUAL
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_AND() -> DIRECTIVE_AND
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_OR() -> DIRECTIVE_OR
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_LT() -> DIRECTIVE_LT
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_GT() -> DIRECTIVE_GT
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_LE() -> DIRECTIVE_LE
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_GE() -> DIRECTIVE_GE
    void <init>(parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalContext:
    org.antlr.v4.runtime.tree.TerminalNode SHARP() -> SHARP
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_IF() -> DIRECTIVE_IF
    parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext preprocessorExpression() -> preprocessorExpression
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_ELIF() -> DIRECTIVE_ELIF
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_ELSE() -> DIRECTIVE_ELSE
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_ENDIF() -> DIRECTIVE_ENDIF
    void <init>(parser.objc.ObjectiveCPreprocessorParser$DirectiveContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalSymbolContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalSymbolContext:
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_ID() -> DIRECTIVE_ID
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_LP() -> DIRECTIVE_LP
    parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext preprocessorExpression() -> preprocessorExpression
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_RP() -> DIRECTIVE_RP
    void <init>(parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorConstantContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorConstantContext:
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_TRUE() -> DIRECTIVE_TRUE
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_FALSE() -> DIRECTIVE_FALSE
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_DECIMAL_LITERAL() -> DIRECTIVE_DECIMAL_LITERAL
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_STRING() -> DIRECTIVE_STRING
    void <init>(parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefContext:
    org.antlr.v4.runtime.tree.TerminalNode SHARP() -> SHARP
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_IFDEF() -> DIRECTIVE_IFDEF
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_ID() -> DIRECTIVE_ID
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_IFNDEF() -> DIRECTIVE_IFNDEF
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_UNDEF() -> DIRECTIVE_UNDEF
    void <init>(parser.objc.ObjectiveCPreprocessorParser$DirectiveContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefineContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefineContext:
    org.antlr.v4.runtime.tree.TerminalNode SHARP() -> SHARP
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_DEFINE() -> DIRECTIVE_DEFINE
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_ID() -> DIRECTIVE_ID
    parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext directiveText() -> directiveText
    void <init>(parser.objc.ObjectiveCPreprocessorParser$DirectiveContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefinedContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefinedContext:
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_DEFINED() -> DIRECTIVE_DEFINED
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_ID() -> DIRECTIVE_ID
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_LP() -> DIRECTIVE_LP
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_RP() -> DIRECTIVE_RP
    void <init>(parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorErrorContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorErrorContext:
    org.antlr.v4.runtime.tree.TerminalNode SHARP() -> SHARP
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_ERROR() -> DIRECTIVE_ERROR
    parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext directiveText() -> directiveText
    void <init>(parser.objc.ObjectiveCPreprocessorParser$DirectiveContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext:
    void <init>(org.antlr.v4.runtime.ParserRuleContext,int) -> <init>
    int getRuleIndex() -> getRuleIndex
    void <init>() -> <init>
    void copyFrom(parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext) -> copyFrom
parser.objc.ObjectiveCPreprocessorParser$PreprocessorImportContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorImportContext:
    org.antlr.v4.runtime.tree.TerminalNode SHARP() -> SHARP
    parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext directiveText() -> directiveText
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_IMPORT() -> DIRECTIVE_IMPORT
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_INCLUDE() -> DIRECTIVE_INCLUDE
    void <init>(parser.objc.ObjectiveCPreprocessorParser$DirectiveContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorNotContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorNotContext:
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_BANG() -> DIRECTIVE_BANG
    parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext preprocessorExpression() -> preprocessorExpression
    void <init>(parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorParenthesisContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorParenthesisContext:
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_LP() -> DIRECTIVE_LP
    parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext preprocessorExpression() -> preprocessorExpression
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_RP() -> DIRECTIVE_RP
    void <init>(parser.objc.ObjectiveCPreprocessorParser$PreprocessorExpressionContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorPragmaContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorPragmaContext:
    org.antlr.v4.runtime.tree.TerminalNode SHARP() -> SHARP
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_PRAGMA() -> DIRECTIVE_PRAGMA
    parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext directiveText() -> directiveText
    void <init>(parser.objc.ObjectiveCPreprocessorParser$DirectiveContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParser$PreprocessorWarningContext -> parser.objc.ObjectiveCPreprocessorParser$PreprocessorWarningContext:
    org.antlr.v4.runtime.tree.TerminalNode SHARP() -> SHARP
    org.antlr.v4.runtime.tree.TerminalNode DIRECTIVE_WARNING() -> DIRECTIVE_WARNING
    parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext directiveText() -> directiveText
    void <init>(parser.objc.ObjectiveCPreprocessorParser$DirectiveContext) -> <init>
    void enterRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> enterRule
    void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener) -> exitRule
parser.objc.ObjectiveCPreprocessorParserBaseListener -> parser.objc.ObjectiveCPreprocessorParserBaseListener:
    void <init>() -> <init>
    void enterPreprocessorImport(parser.objc.ObjectiveCPreprocessorParser$PreprocessorImportContext) -> enterPreprocessorImport
    void exitPreprocessorImport(parser.objc.ObjectiveCPreprocessorParser$PreprocessorImportContext) -> exitPreprocessorImport
    void enterPreprocessorConditional(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalContext) -> enterPreprocessorConditional
    void exitPreprocessorConditional(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalContext) -> exitPreprocessorConditional
    void enterPreprocessorDef(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefContext) -> enterPreprocessorDef
    void exitPreprocessorDef(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefContext) -> exitPreprocessorDef
    void enterPreprocessorPragma(parser.objc.ObjectiveCPreprocessorParser$PreprocessorPragmaContext) -> enterPreprocessorPragma
    void exitPreprocessorPragma(parser.objc.ObjectiveCPreprocessorParser$PreprocessorPragmaContext) -> exitPreprocessorPragma
    void enterPreprocessorError(parser.objc.ObjectiveCPreprocessorParser$PreprocessorErrorContext) -> enterPreprocessorError
    void exitPreprocessorError(parser.objc.ObjectiveCPreprocessorParser$PreprocessorErrorContext) -> exitPreprocessorError
    void enterPreprocessorWarning(parser.objc.ObjectiveCPreprocessorParser$PreprocessorWarningContext) -> enterPreprocessorWarning
    void exitPreprocessorWarning(parser.objc.ObjectiveCPreprocessorParser$PreprocessorWarningContext) -> exitPreprocessorWarning
    void enterPreprocessorDefine(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefineContext) -> enterPreprocessorDefine
    void exitPreprocessorDefine(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefineContext) -> exitPreprocessorDefine
    void enterDirectiveText(parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext) -> enterDirectiveText
    void exitDirectiveText(parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext) -> exitDirectiveText
    void enterPreprocessorParenthesis(parser.objc.ObjectiveCPreprocessorParser$PreprocessorParenthesisContext) -> enterPreprocessorParenthesis
    void exitPreprocessorParenthesis(parser.objc.ObjectiveCPreprocessorParser$PreprocessorParenthesisContext) -> exitPreprocessorParenthesis
    void enterPreprocessorNot(parser.objc.ObjectiveCPreprocessorParser$PreprocessorNotContext) -> enterPreprocessorNot
    void exitPreprocessorNot(parser.objc.ObjectiveCPreprocessorParser$PreprocessorNotContext) -> exitPreprocessorNot
    void enterPreprocessorBinary(parser.objc.ObjectiveCPreprocessorParser$PreprocessorBinaryContext) -> enterPreprocessorBinary
    void exitPreprocessorBinary(parser.objc.ObjectiveCPreprocessorParser$PreprocessorBinaryContext) -> exitPreprocessorBinary
    void enterPreprocessorConstant(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConstantContext) -> enterPreprocessorConstant
    void exitPreprocessorConstant(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConstantContext) -> exitPreprocessorConstant
    void enterPreprocessorConditionalSymbol(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalSymbolContext) -> enterPreprocessorConditionalSymbol
    void exitPreprocessorConditionalSymbol(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalSymbolContext) -> exitPreprocessorConditionalSymbol
    void enterPreprocessorDefined(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefinedContext) -> enterPreprocessorDefined
    void exitPreprocessorDefined(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefinedContext) -> exitPreprocessorDefined
    void enterEveryRule(org.antlr.v4.runtime.ParserRuleContext) -> enterEveryRule
    void exitEveryRule(org.antlr.v4.runtime.ParserRuleContext) -> exitEveryRule
    void visitTerminal(org.antlr.v4.runtime.tree.TerminalNode) -> visitTerminal
    void visitErrorNode(org.antlr.v4.runtime.tree.ErrorNode) -> visitErrorNode
parser.objc.ObjectiveCPreprocessorParserListener -> parser.objc.ObjectiveCPreprocessorParserListener:
    void enterPreprocessorImport(parser.objc.ObjectiveCPreprocessorParser$PreprocessorImportContext) -> enterPreprocessorImport
    void exitPreprocessorImport(parser.objc.ObjectiveCPreprocessorParser$PreprocessorImportContext) -> exitPreprocessorImport
    void enterPreprocessorConditional(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalContext) -> enterPreprocessorConditional
    void exitPreprocessorConditional(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalContext) -> exitPreprocessorConditional
    void enterPreprocessorDef(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefContext) -> enterPreprocessorDef
    void exitPreprocessorDef(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefContext) -> exitPreprocessorDef
    void enterPreprocessorPragma(parser.objc.ObjectiveCPreprocessorParser$PreprocessorPragmaContext) -> enterPreprocessorPragma
    void exitPreprocessorPragma(parser.objc.ObjectiveCPreprocessorParser$PreprocessorPragmaContext) -> exitPreprocessorPragma
    void enterPreprocessorError(parser.objc.ObjectiveCPreprocessorParser$PreprocessorErrorContext) -> enterPreprocessorError
    void exitPreprocessorError(parser.objc.ObjectiveCPreprocessorParser$PreprocessorErrorContext) -> exitPreprocessorError
    void enterPreprocessorWarning(parser.objc.ObjectiveCPreprocessorParser$PreprocessorWarningContext) -> enterPreprocessorWarning
    void exitPreprocessorWarning(parser.objc.ObjectiveCPreprocessorParser$PreprocessorWarningContext) -> exitPreprocessorWarning
    void enterPreprocessorDefine(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefineContext) -> enterPreprocessorDefine
    void exitPreprocessorDefine(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefineContext) -> exitPreprocessorDefine
    void enterDirectiveText(parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext) -> enterDirectiveText
    void exitDirectiveText(parser.objc.ObjectiveCPreprocessorParser$DirectiveTextContext) -> exitDirectiveText
    void enterPreprocessorParenthesis(parser.objc.ObjectiveCPreprocessorParser$PreprocessorParenthesisContext) -> enterPreprocessorParenthesis
    void exitPreprocessorParenthesis(parser.objc.ObjectiveCPreprocessorParser$PreprocessorParenthesisContext) -> exitPreprocessorParenthesis
    void enterPreprocessorNot(parser.objc.ObjectiveCPreprocessorParser$PreprocessorNotContext) -> enterPreprocessorNot
    void exitPreprocessorNot(parser.objc.ObjectiveCPreprocessorParser$PreprocessorNotContext) -> exitPreprocessorNot
    void enterPreprocessorBinary(parser.objc.ObjectiveCPreprocessorParser$PreprocessorBinaryContext) -> enterPreprocessorBinary
    void exitPreprocessorBinary(parser.objc.ObjectiveCPreprocessorParser$PreprocessorBinaryContext) -> exitPreprocessorBinary
    void enterPreprocessorConstant(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConstantContext) -> enterPreprocessorConstant
    void exitPreprocessorConstant(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConstantContext) -> exitPreprocessorConstant
    void enterPreprocessorConditionalSymbol(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalSymbolContext) -> enterPreprocessorConditionalSymbol
    void exitPreprocessorConditionalSymbol(parser.objc.ObjectiveCPreprocessorParser$PreprocessorConditionalSymbolContext) -> exitPreprocessorConditionalSymbol
    void enterPreprocessorDefined(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefinedContext) -> enterPreprocessorDefined
    void exitPreprocessorDefined(parser.objc.ObjectiveCPreprocessorParser$PreprocessorDefinedContext) -> exitPreprocessorDefined
