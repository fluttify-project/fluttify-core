package me.yohom.fluttify.tmpl.java.plugin

import me.yohom.fluttify.ext
import me.yohom.fluttify.extensions.getResource
import me.yohom.fluttify.extensions.replaceParagraph
import me.yohom.fluttify.extensions.underscore2Camel
import me.yohom.fluttify.model.Lib
import me.yohom.fluttify.tmpl.java.plugin.register_handler.RegisterHandlerTmpl
import me.yohom.fluttify.tmpl.java.plugin.register_platform_view.RegisterPlatformViewTmpl
import java.io.File

////////////////////////////////////////////////////////////
//// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
////////////////////////////////////////////////////////////
//
//package #__package_name__#;
//
//import android.os.Bundle;
//import android.util.Log;
//
//import java.util.ArrayList;
//import java.util.Collection;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//import androidx.annotation.NonNull;
//import io.flutter.embedding.engine.plugins.FlutterPlugin;
//import io.flutter.plugin.common.BinaryMessenger;
//import io.flutter.plugin.common.MethodCall;
//import io.flutter.plugin.common.MethodChannel;
//import io.flutter.plugin.common.PluginRegistry.Registrar;
//import io.flutter.plugin.platform.PlatformViewRegistry;
//
//import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
//import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;
//
//@SuppressWarnings("ALL")
//public class #__plugin_name__#Plugin implements FlutterPlugin, MethodChannel.MethodCallHandler {
//
//    private BinaryMessenger messenger;
//
//    private static final List<Map<String, Handler>> handlerMapList = new ArrayList<>();
//
//    // v1 android embedding for compatible
//    public static void registerWith(Registrar registrar) {
//        final MethodChannel channel = new MethodChannel(registrar.messenger(), "#__method_channel__#");
//
//        #__plugin_name__#Plugin plugin = new #__plugin_name__#Plugin();
//        BinaryMessenger messenger = registrar.messenger();
//        plugin.messenger = messenger;
//
//        #__register_handler__#
//
//        channel.setMethodCallHandler(plugin);
//
//        // register platform view
//        PlatformViewRegistry platformViewRegistry = registrar.platformViewRegistry();
//        #__register_platform_views__#
//    }
//
//    // v2 android embedding
//    @Override
//    public void onAttachedToEngine(FlutterPluginBinding binding) {
//        final MethodChannel channel = new MethodChannel(binding.getBinaryMessenger(), "#__method_channel__#");
//
//        messenger = binding.getBinaryMessenger();
//
//        #__register_handler__#
//
//        channel.setMethodCallHandler(this);
//
//        // register platform view
//        PlatformViewRegistry platformViewRegistry = binding.getPlatformViewRegistry();
//        #__register_platform_views__#
//    }
//
//    @Override
//    public void onDetachedFromEngine(FlutterPluginBinding binding) {
//
//    }
//
//    @Override
//    public void onMethodCall(@NonNull MethodCall methodCall, @NonNull MethodChannel.Result methodResult) {
//        Map<String, Object> args = (Map<String, Object>) methodCall.arguments;
//
//        Handler handler = null;
//        for (Map<String, Handler> handlerMap : handlerMapList) {
//            if (handlerMap.contains(methodCall.method)) {
//                handler = handlerMap.get(methodCall.method);
//                break;
//            }
//        }
//        if (handler != null) {
//            try {
//                handler.call(args, methodResult);
//            } catch (Exception e) {
//                e.printStackTrace();
//                methodResult.error(e.getMessage(), null, null);
//            }
//        } else {
//            methodResult.notImplemented();
//        }
//    }
//
//    @FunctionalInterface
//    public static interface Handler {
//        void call(Map<String, Object> args, MethodChannel.Result methodResult) throws Exception;
//    }
//}
private val tmpl = getResource("/tmpl/java/plugin.java.tmpl").readText()

fun JavaPluginTmpl(lib: Lib, subHandlerOutputDir: String): String {
    // 包名
    val packageName = "${ext.org}.${ext.projectName}"

    // 插件名称
    val pluginClassName = ext.projectName.underscore2Camel(true)

    // method channel
    val methodChannel = "${ext.org}/${ext.projectName}"

    val subHandlerDir = File(subHandlerOutputDir)
    val registerHandler = if (subHandlerDir.exists()) {
        subHandlerDir
            .list { _, name -> name?.contains("SubHandlerCustom.java") != true }
            ?.mapIndexed { index, _ -> RegisterHandlerTmpl(index) }
            ?.joinToString("\n") ?: ""
    } else {
        ""
    }

    // 注册PlatformView
    val registerPlatformViews = lib
        .types
        .filter { it.isView && !it.isObfuscated }
        .joinToString("\n") { RegisterPlatformViewTmpl(it) }

    return tmpl
        .replace("#__package_name__#", packageName)
        .replace("#__plugin_name__#", pluginClassName)
        .replace("#__method_channel__#", methodChannel)
        .replaceParagraph("#__register_handler__#", registerHandler)
        .replaceParagraph("#__register_platform_views__#", registerPlatformViews)
}