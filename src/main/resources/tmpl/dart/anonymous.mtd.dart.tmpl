static Future<#__class_name__#> anonymous__(#__formal_params__#) async {
  final __result__ = await k#__project_prefix__#Channel.invokeMethod('#__channel_prefix__#::createAnonymous__');

  final __object__ = #__project_prefix__##__platform__#As<#__class_name__#>(__result__)!;

  // handle callback
  MethodChannel('#__channel_prefix__#::Callback@${__object__.refId}', k#__project_prefix__#MethodCodec)
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            #__cases__#
            default:
              throw MissingPluginException('方法${methodCall.method}未实现');
              break;
          }
        } catch (e) {
          debugPrint(e.toString());
          rethrow;
        }
      });

  return __object__;
}
