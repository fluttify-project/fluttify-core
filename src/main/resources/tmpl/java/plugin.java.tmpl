//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package #__package_name__#;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import #__package_name__#.sub_handler.*;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class #__plugin_name__#Plugin implements FlutterPlugin, MethodChannel.MethodCallHandler {

    private BinaryMessenger messenger;

    private static final List<Map<String, Handler>> handlerMapList = new ArrayList<>();

    // v1 android embedding for compatible
    public static void registerWith(Registrar registrar) {
        final MethodChannel channel = new MethodChannel(registrar.messenger(), "#__method_channel__#");

        #__plugin_name__#Plugin plugin = new #__plugin_name__#Plugin();
        BinaryMessenger messenger = registrar.messenger();
        plugin.messenger = messenger;

        #__register_handler__#

        channel.setMethodCallHandler(plugin);

        // register platform view
        PlatformViewRegistry platformViewRegistry = registrar.platformViewRegistry();
        #__register_platform_views__#
    }

    // v2 android embedding
    @Override
    public void onAttachedToEngine(FlutterPluginBinding binding) {
        final MethodChannel channel = new MethodChannel(binding.getBinaryMessenger(), "#__method_channel__#");

        messenger = binding.getBinaryMessenger();

        #__register_handler__#

        channel.setMethodCallHandler(this);

        // register platform view
        PlatformViewRegistry platformViewRegistry = binding.getPlatformViewRegistry();
        #__register_platform_views__#
    }

    @Override
    public void onDetachedFromEngine(FlutterPluginBinding binding) {

    }

    @Override
    public void onMethodCall(@NonNull MethodCall methodCall, @NonNull MethodChannel.Result methodResult) {
        Map<String, Object> args = (Map<String, Object>) methodCall.arguments;

        Handler handler = null;
        for (Map<String, Handler> handlerMap : handlerMapList) {
            if (handlerMap.containsKey(methodCall.method)) {
                handler = handlerMap.get(methodCall.method);
                break;
            }
        }
        if (handler != null) {
            try {
                handler.call(args, methodResult);
            } catch (Exception e) {
                e.printStackTrace();
                methodResult.error(e.getMessage(), null, null);
            }
        } else {
            methodResult.notImplemented();
        }
    }

    @FunctionalInterface
    public static interface Handler {
        void call(Map<String, Object> args, MethodChannel.Result methodResult) throws Exception;
    }
}
