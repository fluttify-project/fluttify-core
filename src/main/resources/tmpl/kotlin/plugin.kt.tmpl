package #__package_name__#

import io.flutter.plugin.common.MethodChannel
import io.flutter.plugin.common.PluginRegistry.Registrar

val REF_MAP = mutableMapOf<Int, Any>()

@Suppress("FunctionName", "UsePropertyAccessSyntax", "RedundantUnitReturnType", "UNUSED_PARAMETER", "SpellCheckingInspection", "ConvertToStringTemplate", "DEPRECATION", "UNUSED_VARIABLE")
class #__plugin_name__#Plugin {
    companion object {
        @JvmStatic
        fun registerWith(registrar: Registrar) {
            val channel = MethodChannel(registrar.messenger(), "#__method_channel__#")

            channel.setMethodCallHandler { methodCall, methodResult ->
                val args = methodCall.arguments as? Map<String, Any> ?: mapOf()
                when (methodCall.method) {
                    // 获取Application对象
                    "SystemRef::getandroid_app_Application" -> {
                        methodResult.success(registrar.activity().application.apply { REF_MAP[hashCode()] = this }.hashCode())
                    }
                    // 获取FlutterActivity对象
                    "SystemRef::getandroid_app_Activity" -> {
                        methodResult.success(registrar.activity().apply { REF_MAP[hashCode()] = this }.hashCode())
                    }
                    // 释放一个对象
                    "SystemRef::release" -> {
                        REF_MAP.remove(args["refId"] as Int)
                        methodResult.success("success")
                    }
                    // 清空REF_MAP中所有对象
                    "SystemRef::clearRefMap" -> {
                        REF_MAP.clear()
                        methodResult.success("success")
                    }
                    #__branches__#
                    else -> methodResult.notImplemented()
                    }
                }

            // 注册View
            #__register_platform_views__#
		}

		// 与branch对应的方法们
		#__handlers__#
    }
}