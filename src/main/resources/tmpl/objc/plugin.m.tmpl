#import "#__plugin_name__#Plugin.h"
#__imports__#

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

NSMutableDictionary<NSNumber *, NSObject *> *REF_MAP;

@implementation #__plugin_name__#Plugin

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"#__method_channel__#"
            binaryMessenger:[registrar messenger]];

  // 引用Map
  REF_MAP = @{}.mutableCopy;

  // 处理方法们
  NSDictionary<NSString *, Handler> *_handlerMap = @{
    #__handlers__#
  };

  // 处理channel
  [channel setMethodCallHandler:^(FlutterMethodCall * _Nonnull methodCall, FlutterResult  _Nonnull methodResult) {
          NSDictionary<NSString *, NSObject *> *args = (NSDictionary<NSString *, NSObject *> *) [methodCall arguments];
          if ([@"SystemRef::release" isEqualToString:methodCall.method]) {
              [REF_MAP removeObjectForKey:(NSNumber *) args[@"refId"]];
              methodResult(@"success");
          } else if ([@"SystemRef::clearRefMap" isEqualToString:methodCall.method]) {
              [REF_MAP removeAllObjects];
              methodResult(@"success");
          } else {
              if (_handlerMap[methodCall.method] != nil) {
                  _handlerMap[methodCall.method](registrar, args, methodResult);
              } else {
                  methodResult(FlutterMethodNotImplemented);
              }
          }
      }];

  // 注册View
  #__register_platform_views__#
}

@end