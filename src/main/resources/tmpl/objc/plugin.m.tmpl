//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "#__plugin_name__#Plugin.h"

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
NSMutableDictionary<NSNumber *, NSObject *> *STACK;
// Dart端随机存取对象的容器
NSMutableDictionary<NSNumber *, NSObject *> *HEAP;

@implementation #__plugin_name__#Plugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      #__handlers__#
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  // 栈容器
  STACK = @{}.mutableCopy;
  // 堆容器
  HEAP = @{}.mutableCopy;

  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"#__method_channel__#"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[#__plugin_name__#Plugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  #__register_platform_views__#
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];
  // 是否一个对象
  if ([@"ObjectFactory::release" isEqualToString:methodCall.method]) {
    NSLog(@"ObjectFactory::释放对象: %@", (NSNumber *) args[@"refId"]);

    [HEAP removeObjectForKey:(NSNumber *) args[@"refId"]];
    methodResult(@"success");

    NSLog(@"HEAP: %@", HEAP);
  }
  // 清空堆
  else if ([@"ObjectFactory::clearRefMap" isEqualToString:methodCall.method]) {
    NSLog(@"ObjectFactory::清空堆");

    [HEAP removeAllObjects];
    methodResult(@"success");

    NSLog(@"HEAP: %@", HEAP);
  }
  // 创建CLLocationCoordinate2D
  else if ([@"ObjectFactory::createCLLocationCoordinate2D" isEqualToString:methodCall.method]) {
    CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
    CLLocationDegrees longitude = [args[@"longitude"] doubleValue];

    CLLocationCoordinate2D data = CLLocationCoordinate2DMake(latitude, longitude);

    NSValue* dataValue = [NSValue value:&data withObjCType:@encode(CLLocationCoordinate2D)];
    HEAP[@(dataValue.hash)] = dataValue;

    methodResult(@(dataValue.hash));
  }
  // 创建UIImage
  else if ([@"ObjectFactory::createUIImage" isEqualToString:methodCall.method]) {
    FlutterStandardTypedData* bitmapBytes = (FlutterStandardTypedData*) args[@"bitmapBytes"];

    UIImage* bitmap = [UIImage imageWithData:bitmapBytes.data];

    HEAP[@(bitmap.hash)] = bitmap;

    methodResult(@(bitmap.hash));
  } else {
    if (_handlerMap[methodCall.method] != nil) {
      _handlerMap[methodCall.method](_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }
}

// 委托方法们
#__delegate_methods__#

@end