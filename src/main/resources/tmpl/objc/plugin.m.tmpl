//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "#__plugin_name__#Plugin.h"

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
NSMutableDictionary<NSString*, NSObject*>* STACK_#__plugin_name__#;
// Dart端随机存取对象的容器
NSMutableDictionary<NSNumber*, NSObject*>* HEAP_#__plugin_name__#;

@implementation #__plugin_name__#Plugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      #__handlers__#
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  // 栈容器
  STACK_#__plugin_name__# = @{}.mutableCopy;
  // 堆容器
  HEAP_#__plugin_name__# = @{}.mutableCopy;

  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"#__method_channel__#"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[#__plugin_name__#Plugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  #__register_platform_views__#
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];
  // 是否一个对象
  if ([@"ObjectFactory::release" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber *) args[@"refId"];

    NSLog(@"ObjectFactory::释放对象: %@@%@", NSStringFromClass([HEAP_#__plugin_name__#[refId] class]), refId);

    [HEAP_#__plugin_name__# removeObjectForKey:refId];
    methodResult(@"success");

    NSLog(@"HEAP_#__plugin_name__#: %@", HEAP_#__plugin_name__#);
  }
  // 清空堆
  else if ([@"ObjectFactory::clearHeap" isEqualToString:methodCall.method]) {
    NSLog(@"ObjectFactory::清空堆");

    [HEAP_#__plugin_name__# removeAllObjects];
    methodResult(@"success");

    NSLog(@"HEAP_#__plugin_name__#: %@", HEAP_#__plugin_name__#);
  }
  // 压入栈
  else if ([@"ObjectFactory::pushStack" isEqualToString:methodCall.method]) {
    NSString* name = (NSString*) args[@"name"];
    NSNumber* refId = (NSNumber*) args[@"refId"];

    // todo release去掉日志
    NSLog(@"ObjectFactory::压入栈 %@@%@", NSStringFromClass([HEAP_#__plugin_name__#[refId] class]), refId);

    STACK_#__plugin_name__#[name] = HEAP_#__plugin_name__#[refId];

    methodResult(@"success");

    NSLog(@"STACK_#__plugin_name__#: %@", STACK_#__plugin_name__#);
  }
  // 压入栈 jsonable
  else if ([@"ObjectFactory::pushStackJsonable" isEqualToString:methodCall.method]) {
    NSString* name = (NSString*) args[@"name"];
    NSObject* data = (NSObject*) args[@"data"];

    // todo release去掉日志
    NSLog(@"ObjectFactory::压入栈 %@", data);

    STACK_#__plugin_name__#[name] = data;

    methodResult(@"success");

    NSLog(@"STACK_#__plugin_name__#: %@", STACK_#__plugin_name__#);
  }
  // 清空栈
  else if ([@"ObjectFactory::clearStack" isEqualToString:methodCall.method]) {
    NSLog(@"ObjectFactory::清空栈");

    [STACK_#__plugin_name__# removeAllObjects];
    methodResult(@"success");

    NSLog(@"STACK_#__plugin_name__#: %@", STACK_#__plugin_name__#);
  }
  // 创建CLLocationCoordinate2D
  else if ([@"ObjectFactory::createCLLocationCoordinate2D" isEqualToString:methodCall.method]) {
    CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
    CLLocationDegrees longitude = [args[@"longitude"] doubleValue];

    CLLocationCoordinate2D data = CLLocationCoordinate2DMake(latitude, longitude);

    NSValue* dataValue = [NSValue value:&data withObjCType:@encode(CLLocationCoordinate2D)];
    HEAP_#__plugin_name__#[@(dataValue.hash)] = dataValue;

    methodResult(@(dataValue.hash));
  }
  // CLLocationCoordinate2D获取latitude
  else if ([@"CLLocationCoordinate2D::get_latitude" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    NSValue* dataValue = (NSValue*) HEAP_#__plugin_name__#[refId];

    CLLocationCoordinate2D _structValue;
    [dataValue getValue:&_structValue];

    methodResult(@(_structValue.latitude));
  }
  // CLLocationCoordinate2D获取longitude
  else if ([@"CLLocationCoordinate2D::get_longitude" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    NSValue* dataValue = (NSValue*) HEAP_#__plugin_name__#[refId];

    CLLocationCoordinate2D _structValue;
    [dataValue getValue:&_structValue];

    methodResult(@(_structValue.longitude));
  }
  // CLLocation获取coordinate
  else if ([@"CLLocation::get_coordinate" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    CLLocation* location = (CLLocation*) HEAP_#__plugin_name__#[refId];

    CLLocationCoordinate2D data = location.coordinate;

    NSValue* dataValue = [NSValue value:&data withObjCType:@encode(CLLocationCoordinate2D)];
    HEAP_#__plugin_name__#[@(dataValue.hash)] = dataValue;

    methodResult(@(dataValue.hash));
  }
  // CLLocation获取altitude
  else if ([@"CLLocation::get_altitude" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    CLLocation* location = (CLLocation*) HEAP_#__plugin_name__#[refId];

    methodResult(@(location.altitude));
  }
  // CLLocation获取horizontalAccuracy
  else if ([@"CLLocation::get_horizontalAccuracy" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    CLLocation* location = (CLLocation*) HEAP_#__plugin_name__#[refId];

    methodResult(@(location.horizontalAccuracy));
  }
  // CLLocation获取verticalAccuracy
  else if ([@"CLLocation::get_verticalAccuracy" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    CLLocation* location = (CLLocation*) HEAP_#__plugin_name__#[refId];

    methodResult(@(location.verticalAccuracy));
  }
  // CLLocation获取course
  else if ([@"CLLocation::get_course" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    CLLocation* location = (CLLocation*) HEAP_#__plugin_name__#[refId];

    methodResult(@(location.course));
  }
  // CLLocation获取speed
  else if ([@"CLLocation::get_speed" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    CLLocation* location = (CLLocation*) HEAP_#__plugin_name__#[refId];

    methodResult(@(location.speed));
  }
  // CLLocation获取floor
  else if ([@"CLLocation::get_floor" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    CLLocation* location = (CLLocation*) HEAP_#__plugin_name__#[refId];
    CLFloor* floor = location.floor;

    HEAP_#__plugin_name__#[@(floor.hash)] = floor;

    methodResult(@(floor.hash));
  }
  // CLFloor获取level
  else if ([@"CLFloor::get_level" isEqualToString:methodCall.method]) {
    NSNumber* refId = (NSNumber*) args[@"refId"];

    CLFloor* floor = (CLFloor*) HEAP_#__plugin_name__#[refId];

    methodResult(@(floor.level));
  }
  // 创建UIImage
  else if ([@"ObjectFactory::createUIImage" isEqualToString:methodCall.method]) {
    FlutterStandardTypedData* bitmapBytes = (FlutterStandardTypedData*) args[@"bitmapBytes"];

    UIImage* bitmap = [UIImage imageWithData:bitmapBytes.data];

    HEAP_#__plugin_name__#[@(bitmap.hash)] = bitmap;

    methodResult(@(bitmap.hash));
  } else {
    if (_handlerMap[methodCall.method] != nil) {
      _handlerMap[methodCall.method](_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }
}

// 委托方法们
#__delegate_methods__#

@end