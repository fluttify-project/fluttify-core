import Flutter
import UIKit

var REF_MAP = [Int : Any]()

public class Swift#__plugin_name__#Plugin: NSObject, FlutterPlugin {

    private var registrar: FlutterPluginRegistrar

    init(_ registrar: FlutterPluginRegistrar) {
        self.registrar = registrar
    }

    public static func register(with registrar: FlutterPluginRegistrar) {
        let channel = FlutterMethodChannel(name: "#__method_channel__#", binaryMessenger: registrar.messenger())
        let instance = Swift#__plugin_name__#Plugin(registrar)
        registrar.addMethodCallDelegate(instance, channel: channel)

        // 注册View
        #__register_platform_views__#
    }

    private let handlerMap: [String : (String, Any, FlutterResult) -> Void] = [
        #__branches__#
    ]

    public func handle(_ methodCall: FlutterMethodCall, methodResult: @escaping FlutterResult) {
        let args = methodCall.arguments as? Dictionary<String, Any> ?? [:]
        switch methodCall.method {
        // 释放一个对象
        case "SystemRef::release":
            REF_MAP.removeValue(forKey: args["refId"] as! Int)
            methodResult("success")
        // 清空REF_MAP中所有对象
        case "SystemRef::clearRefMap":
            REF_MAP.removeAll()
            methodResult("success")
        default:
            handlerMap[methodCall.method]?.self(methodCall.method, args, methodResult) ?? methodResult(FlutterMethodNotImplemented)
        }
    }
}

// 与branch对应的方法们
#__handlers__#